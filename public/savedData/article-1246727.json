{"type_of":"article","id":1246727,"title":"React Component Testing","description":"I have a complicated question about React development, creating component and testing them.   I...","readable_publish_date":"Nov 7","slug":"react-component-testing-135f","path":"/beerpacks/react-component-testing-135f","url":"https://dev.to/beerpacks/react-component-testing-135f","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T17:10:51Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1246727.png","canonical_url":"https://dev.to/beerpacks/react-component-testing-135f","created_at":"2022-11-07T17:10:51Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T17:10:51Z","last_comment_at":"2022-11-07T17:10:51Z","reading_time_minutes":2,"tag_list":"webdev, react","tags":["webdev","react"],"body_html":"<p>I have a complicated question about React development, creating component and testing them. </p>\n\n<p>I created an app using React and Typescript. It worked but now I'm interest in testing that app using <strong>Cypress</strong>. I can override my API Calls and test the software but as I'm reading, I try to separate the component from API for betting architecture.</p>\n\n<p>Here's an example of fetching and show a data list.</p>\n\n<p>Model<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useEffect, useState } from \"react\"\nimport * as SquadsAPI from \"../../servercalls/squadsdatafetcher\";\nimport { ISquadPlayer } from \"../../../../common/squads\";\ntype UIState = 'show' | 'loading' | 'error'\n\nexport const useSquadsPageModel = (careerId: string): {\n    isLoading: boolean,\n    isReady: boolean,\n    isOffline: boolean,\n    squadList: ISquadPlayer[],\n    nationnalities: INationnality[],\n    avgPotentialPerPosition: IAvgPotentialPosition[]\n    deletePlayer: (playerId: string) =&gt; void\n} =&gt; {\n    const [uiState, setUiState] = useState&lt;UIState&gt;('loading');\n    const [playerList, setPlayerList] = useState&lt;ISquadPlayer[]&gt;([]);\n    useEffect(() =&gt; {\n        const loadSquads = async () =&gt; {\n            setUiState('loading')\n            try {\n                const request = await SquadsAPI.fetchSquads({\n                    careerId: careerId\n                })\n                if (!request.success) {\n                    throw new Error('server request error')\n                }\n                setPlayerList(request.squadsPlayers.map(player =&gt; {\n                    if (parseInt(player.potential) &gt; 0)\n                        return player;\n                    return {\n                        ...player,\n                        potential: ((parseInt(player.maxPotential) - parseInt(player.minPotential)) / 2 + parseInt(player.minPotential)).toFixed(0)\n                    }\n                }))\n                setUiState('show')\n            } catch (err) {\n                setUiState('error')\n            }\n        }\n        loadSquads();\n    }, [careerId]);\n\n    const onDeletePlayer = async (playerId: string) =&gt; {\n        const newList = playerList.filter(player =&gt; player.id !== playerId);\n        setPlayerList(newList);\n    }\n    return {\n        isLoading: uiState === 'loading',\n        isReady: uiState === 'show',\n        isOffline: uiState === 'error',\n        squadList: playerList,\n        deletePlayer: onDeletePlayer\n    }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>View<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const SquadsPageComponent = () =&gt; {\n    const classes = useSquadsPageStyle();\n    const buttonClass = useButtonStyle();\n    const { selectedCareerId } = useContext(CareersContext);\n    const {\n        isLoading,\n        squadList,\n    } = useSquadsPageModel(selectedCareerId);\n\n    if (isLoading) {\n        return (\n            &lt;LoadingComponent /&gt;\n        )\n    }\n\n    return (\n        &lt;div className={classes.mainContent}&gt;\n            &lt;div className={classes.commandLayout}&gt;\n                &lt;Link className={buttonClass.greenBorderedButton} to={SitesRoutes.NewRecruitPlayerPage.link}&gt;Add Recruits&lt;/Link&gt;\n                &lt;Link className={buttonClass.greenBorderedButton} to={SitesRoutes.NewSquadPlayerPage.link}&gt;Add Player&lt;/Link&gt;\n            &lt;/div&gt;\n            &lt;SquadsTable players={squadList} /&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I would like some tips to refactor my code with the test using cypress.</p>\n\n<p>Would it be a better approach to send my {UiState} from the model with the array of data to another component (2 parameters in) ? <br>\n-My page component would not have the if loading, it will only call my model and send everything as props to a single component.</p>\n\n<p>Or inside my Page component, keep it with the if statement ?</p>\n\n<p>It's easy to find on use a design pattern for that but how to bring all to together for the \"frontend\" unit testing, component testing and End to End testing while thinking in architecture for best scaling and maintaining the software.</p>\n\n<p>Hope I'm as clear as possible for my question and my explanation. </p>\n\n<p>Thank in advance.</p>\n\n","body_markdown":"I have a complicated question about React development, creating component and testing them. \n\nI created an app using React and Typescript. It worked but now I'm interest in testing that app using **Cypress**. I can override my API Calls and test the software but as I'm reading, I try to separate the component from API for betting architecture.\n\nHere's an example of fetching and show a data list.\n\nModel\n\n```\nimport { useEffect, useState } from \"react\"\nimport * as SquadsAPI from \"../../servercalls/squadsdatafetcher\";\nimport { ISquadPlayer } from \"../../../../common/squads\";\ntype UIState = 'show' | 'loading' | 'error'\n\nexport const useSquadsPageModel = (careerId: string): {\n    isLoading: boolean,\n    isReady: boolean,\n    isOffline: boolean,\n    squadList: ISquadPlayer[],\n    nationnalities: INationnality[],\n    avgPotentialPerPosition: IAvgPotentialPosition[]\n    deletePlayer: (playerId: string) => void\n} => {\n    const [uiState, setUiState] = useState<UIState>('loading');\n    const [playerList, setPlayerList] = useState<ISquadPlayer[]>([]);\n    useEffect(() => {\n        const loadSquads = async () => {\n            setUiState('loading')\n            try {\n                const request = await SquadsAPI.fetchSquads({\n                    careerId: careerId\n                })\n                if (!request.success) {\n                    throw new Error('server request error')\n                }\n                setPlayerList(request.squadsPlayers.map(player => {\n                    if (parseInt(player.potential) > 0)\n                        return player;\n                    return {\n                        ...player,\n                        potential: ((parseInt(player.maxPotential) - parseInt(player.minPotential)) / 2 + parseInt(player.minPotential)).toFixed(0)\n                    }\n                }))\n                setUiState('show')\n            } catch (err) {\n                setUiState('error')\n            }\n        }\n        loadSquads();\n    }, [careerId]);\n\n    const onDeletePlayer = async (playerId: string) => {\n        const newList = playerList.filter(player => player.id !== playerId);\n        setPlayerList(newList);\n    }\n    return {\n        isLoading: uiState === 'loading',\n        isReady: uiState === 'show',\n        isOffline: uiState === 'error',\n        squadList: playerList,\n        deletePlayer: onDeletePlayer\n    }\n}\n```\nView\n```\nconst SquadsPageComponent = () => {\n    const classes = useSquadsPageStyle();\n    const buttonClass = useButtonStyle();\n    const { selectedCareerId } = useContext(CareersContext);\n    const {\n        isLoading,\n        squadList,\n    } = useSquadsPageModel(selectedCareerId);\n\n    if (isLoading) {\n        return (\n            <LoadingComponent />\n        )\n    }\n\n    return (\n        <div className={classes.mainContent}>\n            <div className={classes.commandLayout}>\n                <Link className={buttonClass.greenBorderedButton} to={SitesRoutes.NewRecruitPlayerPage.link}>Add Recruits</Link>\n                <Link className={buttonClass.greenBorderedButton} to={SitesRoutes.NewSquadPlayerPage.link}>Add Player</Link>\n            </div>\n            <SquadsTable players={squadList} />\n        </div>\n    )\n}\n```\n\nI would like some tips to refactor my code with the test using cypress.\n\nWould it be a better approach to send my {UiState} from the model with the array of data to another component (2 parameters in) ? \n-My page component would not have the if loading, it will only call my model and send everything as props to a single component.\n\nOr inside my Page component, keep it with the if statement ?\n\nIt's easy to find on use a design pattern for that but how to bring all to together for the \"frontend\" unit testing, component testing and End to End testing while thinking in architecture for best scaling and maintaining the software.\n\nHope I'm as clear as possible for my question and my explanation. \n\nThank in advance.\n","user":{"name":"beerpacks","username":"beerpacks","twitter_username":null,"github_username":"beerpacks","user_id":967917,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rFGyhVkR--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/967917/79bbf8af-a806-416b-92d7-811fc31e180a.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--D-sIF8c1--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/967917/79bbf8af-a806-416b-92d7-811fc31e180a.png"}}