{"type_of":"article","id":1098015,"title":"React BoardBuilder","description":"This idea was sparked by question based forms that sort the user into a group (Find out which Harry...","readable_publish_date":"Jun 15","slug":"react-boardbuilder-efe","path":"/jordantaylorj/react-boardbuilder-efe","url":"https://dev.to/jordantaylorj/react-boardbuilder-efe","comments_count":0,"public_reactions_count":7,"collection_id":null,"published_timestamp":"2022-06-15T18:13:35Z","positive_reactions_count":7,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1098015.png","canonical_url":"https://dev.to/jordantaylorj/react-boardbuilder-efe","created_at":"2022-05-28T01:35:41Z","edited_at":null,"crossposted_at":null,"published_at":"2022-06-15T18:13:35Z","last_comment_at":"2022-06-15T18:13:35Z","reading_time_minutes":4,"tag_list":"react, javascript, mui","tags":["react","javascript","mui"],"body_html":"<p>This idea was sparked by question based forms that sort the user into a group (Find out which Harry Potter house you belong to). I had originally planned to make a site that leads you to the perfect bike for your style of riding. I quickly realized that every question would be dependent on the previous selection and formatting the data could quickly become cluttered, so I went back to the drawing board. I still liked the idea of a question form connected to a specific outcome.<br>\nThe application I made is a similar idea, but applied to skateboards. This application works with you to build a complete skateboard based on what style of riding you want.</p>\n<h1>\n  <a name=\"readmemd\" href=\"#readmemd\">\n  </a>\n  ReadMe.md\n</h1>\n<h3>\n  <a name=\"features\" href=\"#features\">\n  </a>\n  Features:\n</h3>\n\n<ul>\n<li>Homepage display with navigation panel</li>\n<li>Step-by-step guide to build out your board</li>\n<li>List created boards</li>\n<li>Delete for each board</li>\n</ul>\n<h3>\n  <a name=\"tech-stack\" href=\"#tech-stack\">\n  </a>\n  Tech Stack:\n</h3>\n\n<p>JavaScript React, MUI</p>\n<h3>\n  <a name=\"component-hierarchy\" href=\"#component-hierarchy\">\n  </a>\n  Component Hierarchy:\n</h3>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z5m7XG0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv0hwtpdkxcp1urxoo08.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z5m7XG0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv0hwtpdkxcp1urxoo08.png\" alt=\"Component Hierarchy\" loading=\"lazy\" width=\"880\" height=\"865\"></a></p>\n<h1>\n  <a name=\"organizing-data-amp-usestate\" href=\"#organizing-data-amp-usestate\">\n  </a>\n  Organizing Data &amp; useState\n</h1>\n\n<p>Working with nested data proved a difficult task. I reformatted the db.json several times throughout this build to keep the code clean and minimal. I also very quickly learned the value of good event and variable names in order to better manage props. </p>\n\n<p>The useState hook updates React's internal state. <code>boards</code> state was kept inside of the App component in order for the children components to have access via props. State for <code>newBoard</code> was kept inside the BoardBuilder component along with the data for each <code>step</code> and MUI's <code>activeStep</code> functionality. </p>\n<h1>\n  <a name=\"controlled-component\" href=\"#controlled-component\">\n  </a>\n  Controlled Component\n</h1>\n\n<p>Using state to derive input value makes a controlled input. In React, rather than using a selected attribute on <code>&lt;select&gt;</code>, <code>value={state}</code> should be used for controllable props. </p>\n\n<p>Below you can see the complications in making <code>&lt;select&gt;</code> a controlled input. I wasn't able to pass the <code>part</code> variable as a value attribute because it was outside of the scope.  </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EYexfO75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi308z89s09h1wkyb36c.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EYexfO75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi308z89s09h1wkyb36c.png\" alt=\"Selector component uncontrolled\" loading=\"lazy\" width=\"880\" height=\"707\"></a></p>\n\n<p>I considered reformatting my db.json again, but I wanted to avoid adding a third fetch to my application. I tried to reformat to a checkbox instead, but that became an issue when I needed to restrict the selection to a single item. Eventually, I revisited the select tag with a simpler version (without using MUI). </p>\n\n<p>I created a <code>part</code> variable in state and set <code>value={part}</code>. When a part is selected, handleChangePart saves it in state, and then it is passed to the callback function handleChange. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--l2byEpYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dkdxxt09hqmv9y6phvy.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--l2byEpYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dkdxxt09hqmv9y6phvy.png\" alt=\"Selector component controlled\" loading=\"lazy\" width=\"880\" height=\"649\"></a></p>\n\n<p>From there, the handleChange inside of the BoardBuilder component is responsible for building the <code>newBoard</code> object from the <code>parts</code>. Note the splice to make a copy of the previous state and the object key being targeted with the <code>name</code> value as an attribute of select.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const handleChange = (e) =&gt; {\n    setNewBoard({...newBoard, [e.target.name] : e.target.value})\n  };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I also set the initial state of a newBoard to the first available option so that it can't default to an empty string.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const [newBoard, setNewBoard] = useState({\n    deck: 'standard',\n    trucks: 'standard kingpin',\n    wheels: 'skatepark',\n    risers: 'risers',\n    griptape: 'griptape'\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h1>\n  <a name=\"restful-api\" href=\"#restful-api\">\n  </a>\n  Restful API\n</h1>\n\n<p>I use json-server for POST and DELETE requests. Like the example below, we must get the promise back from the fetch request before setting state. I used splice to make a copy, rather than modifying the original state of <code>boards</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const handleAddBoard = (newBoard) =&gt; {\n    fetch(\"http://localhost:3001/completeboards\", {\n      method: 'POST',\n      headers: { \n        \"Content-Type\": \"application/json\", \n      },\n      body: JSON.stringify(newBoard),\n    })\n    .then(r =&gt; r.json())\n    .then((data) =&gt; setBoards([...boards, data]))\n  };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h1>\n  <a name=\"useeffect-amp-dependency-arrays\" href=\"#useeffect-amp-dependency-arrays\">\n  </a>\n  useEffect &amp; Dependency Arrays\n</h1>\n\n<p>I implemented the useEffect hook twice in this application. First, to fetch boards and initially <code>setBoards</code> and again inside of the BoardBuilder component to fetch and <code>setStep</code>.</p>\n\n<p>I had initially thought that <code>boards</code> should be the dependency array value so that when that value changes, the side effect fires. However, I realized this is not necessary because boards is saved in state and state is updated after each POST or DELETE to the boards data. If a an object is inside the dependency array, it will infinitely fetch. I used empty dependency arrays on both so that they each only run once when the component initially renders.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  useEffect(() =&gt; {\n    fetch(\"http://localhost:3001/completeboards\")\n    .then(r =&gt; r.json())\n    .then((data) =&gt; setBoards(data))\n  }, []);\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Note that the db.json should be run with --p 3001. </p>\n\n<h1>\n  <a name=\"mui\" href=\"#mui\">\n  </a>\n  MUI\n</h1>\n\n<p>I worked with <a href=\"https://mui.com/\">MUI</a> for a consistent styling.  The 'Stepper' component was used (as BoardBuilder) to map through the process of building a board. Within that, I needed to also map through the <code>parts</code> data inside of a Select component. I was able to clean up some of the BoardBuilder code from the original MUI formatting by adding <code>steps</code> into db.json and fetching it. </p>\n\n<p>I also used MUI's AppBar for the navigation bar and their Card component to display the results.</p>\n\n<p><strong>Pros:</strong> The styling is consistent and clean throughout the application. It's easy to integrate and has good documentation (depending on the version, I used v5.8.4).</p>\n\n<p><strong>Cons:</strong> Similarly to working with MaterializeCSS, I had issues adding my own styling along with MUI. There is a learning curve for adding images and changing MUI's \"theme\". It also clutters your code quite a bit. Theres a lot of extra imports and even some items added to state.</p>\n\n<p>Imports for changing theme:</p>\n\n<p><code>import {ThemeProvider, createTheme } from '@mui/material/styles';</code></p>\n\n<h1>\n  <a name=\"react-takeaways\" href=\"#react-takeaways\">\n  </a>\n  React Takeaways\n</h1>\n\n<ul>\n<li>React uses declarative code - JSX tells what to do, but not how to do it. AKA - no more document.createElement() and appending everything. 🙌</li>\n<li>React components allow for reusable code! 👏 I only needed one BoardBuilder and one Result component and was able to map through with the data I wanted.</li>\n<li>Setting state with a new object will cause a re-render with the updated info! No need to worry about complex DOM manipulation, again, less typing = efficiency. 👌</li>\n</ul>\n\n<p>The overall key to React is understanding inverse data flow. </p>\n\n<p>Checkout my <a href=\"https://github.com/JordanTaylorJ/board-builder\">GitHub</a> repo to see the full code!</p>\n\n","body_markdown":"\nThis idea was sparked by question based forms that sort the user into a group (Find out which Harry Potter house you belong to). I had originally planned to make a site that leads you to the perfect bike for your style of riding. I quickly realized that every question would be dependent on the previous selection and formatting the data could quickly become cluttered, so I went back to the drawing board. I still liked the idea of a question form connected to a specific outcome.\nThe application I made is a similar idea, but applied to skateboards. This application works with you to build a complete skateboard based on what style of riding you want.\n\n#ReadMe.md\n###Features:\n- Homepage display with navigation panel\n- Step-by-step guide to build out your board\n- List created boards\n- Delete for each board\n\n###Tech Stack: \nJavaScript React, MUI\n\n###Component Hierarchy:\n![Component Hierarchy](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv0hwtpdkxcp1urxoo08.png)\n\n#Organizing Data & useState\nWorking with nested data proved a difficult task. I reformatted the db.json several times throughout this build to keep the code clean and minimal. I also very quickly learned the value of good event and variable names in order to better manage props. \n\nThe useState hook updates React's internal state. `boards` state was kept inside of the App component in order for the children components to have access via props. State for `newBoard` was kept inside the BoardBuilder component along with the data for each `step` and MUI's `activeStep` functionality. \n\n#Controlled Component \nUsing state to derive input value makes a controlled input. In React, rather than using a selected attribute on `<select>`, `value={state}` should be used for controllable props. \n\nBelow you can see the complications in making `<select>` a controlled input. I wasn't able to pass the `part` variable as a value attribute because it was outside of the scope.  \n\n![Selector component uncontrolled](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi308z89s09h1wkyb36c.png)\n\nI considered reformatting my db.json again, but I wanted to avoid adding a third fetch to my application. I tried to reformat to a checkbox instead, but that became an issue when I needed to restrict the selection to a single item. Eventually, I revisited the select tag with a simpler version (without using MUI). \n\nI created a `part` variable in state and set `value={part}`. When a part is selected, handleChangePart saves it in state, and then it is passed to the callback function handleChange. \n\n![Selector component controlled](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dkdxxt09hqmv9y6phvy.png)\n\nFrom there, the handleChange inside of the BoardBuilder component is responsible for building the `newBoard` object from the `parts`. Note the splice to make a copy of the previous state and the object key being targeted with the `name` value as an attribute of select.\n\n```\nconst handleChange = (e) => {\n    setNewBoard({...newBoard, [e.target.name] : e.target.value})\n  };\n```\n\nI also set the initial state of a newBoard to the first available option so that it can't default to an empty string.\n\n```\nconst [newBoard, setNewBoard] = useState({\n    deck: 'standard',\n    trucks: 'standard kingpin',\n    wheels: 'skatepark',\n    risers: 'risers',\n    griptape: 'griptape'\n});\n```\n\n#Restful API\nI use json-server for POST and DELETE requests. Like the example below, we must get the promise back from the fetch request before setting state. I used splice to make a copy, rather than modifying the original state of `boards`.\n\n```\n  const handleAddBoard = (newBoard) => {\n    fetch(\"http://localhost:3001/completeboards\", {\n      method: 'POST',\n      headers: { \n        \"Content-Type\": \"application/json\", \n      },\n      body: JSON.stringify(newBoard),\n    })\n    .then(r => r.json())\n    .then((data) => setBoards([...boards, data]))\n  };\n```\n\n#useEffect & Dependency Arrays\nI implemented the useEffect hook twice in this application. First, to fetch boards and initially `setBoards` and again inside of the BoardBuilder component to fetch and `setStep`.\n \nI had initially thought that `boards` should be the dependency array value so that when that value changes, the side effect fires. However, I realized this is not necessary because boards is saved in state and state is updated after each POST or DELETE to the boards data. If a an object is inside the dependency array, it will infinitely fetch. I used empty dependency arrays on both so that they each only run once when the component initially renders. \n\n```\n  useEffect(() => {\n    fetch(\"http://localhost:3001/completeboards\")\n    .then(r => r.json())\n    .then((data) => setBoards(data))\n  }, []);\n```\n\nNote that the db.json should be run with --p 3001. \n\n#MUI\nI worked with [MUI](https://mui.com/) for a consistent styling.  The 'Stepper' component was used (as BoardBuilder) to map through the process of building a board. Within that, I needed to also map through the `parts` data inside of a Select component. I was able to clean up some of the BoardBuilder code from the original MUI formatting by adding `steps` into db.json and fetching it. \n\nI also used MUI's AppBar for the navigation bar and their Card component to display the results.\n\n**Pros:** The styling is consistent and clean throughout the application. It's easy to integrate and has good documentation (depending on the version, I used v5.8.4).\n\n**Cons:** Similarly to working with MaterializeCSS, I had issues adding my own styling along with MUI. There is a learning curve for adding images and changing MUI's \"theme\". It also clutters your code quite a bit. Theres a lot of extra imports and even some items added to state.\n\nImports for changing theme:\n\n`import {ThemeProvider, createTheme } from '@mui/material/styles';`\n\n#React Takeaways \n\n* React uses declarative code - JSX tells what to do, but not how to do it. AKA - no more document.createElement() and appending everything. 🙌\n* React components allow for reusable code! 👏 I only needed one BoardBuilder and one Result component and was able to map through with the data I wanted.\n* Setting state with a new object will cause a re-render with the updated info! No need to worry about complex DOM manipulation, again, less typing = efficiency. 👌\n\nThe overall key to React is understanding inverse data flow. \n\n\nCheckout my [GitHub](https://github.com/JordanTaylorJ/board-builder) repo to see the full code!","user":{"name":"JordanTaylorJ","username":"jordantaylorj","twitter_username":null,"github_username":"JordanTaylorJ","user_id":833329,"website_url":"https://www.linkedin.com/in/jordantjoseph/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--va4TTjHm--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/833329/ed1e66be-3eab-457f-8dac-77aad7bb9997.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s---dvORelX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/833329/ed1e66be-3eab-457f-8dac-77aad7bb9997.png"}}