{"type_of":"article","id":1246326,"title":"Very Large Delay Value In setTimeout","description":"Hello Dev,  In this article, I will explain you 1 very important limitation of setTimeout in...","readable_publish_date":"Nov 7","slug":"very-large-delay-value-in-settimeout-51m8","path":"/capscode/very-large-delay-value-in-settimeout-51m8","url":"https://dev.to/capscode/very-large-delay-value-in-settimeout-51m8","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T11:00:14Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--S8Rb0H-A--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u90stihw0gwbv2h2koge.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--dOALdslb--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u90stihw0gwbv2h2koge.jpg","canonical_url":"https://www.capscode.in/blog/large-delay-value-in-setTimeout","created_at":"2022-11-07T11:00:14Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T11:00:14Z","last_comment_at":"2022-11-07T11:00:14Z","reading_time_minutes":1,"tag_list":"webdev, javascript, react, node","tags":["webdev","javascript","react","node"],"body_html":"<p>Hello Dev,</p>\n\n<p>In this article, I will explain you 1 very important limitation of setTimeout in JavaScript.</p>\n\n<p>Browsers including Internet Explorer, Chrome, Safari, and Firefox store the delay as a 32-bit signed integer internally. This causes an integer overflow when using delays larger than <strong>2,147,483,647 ms (about 24.8 days)</strong>, resulting in the timeout being executed immediately.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">func</span><span class=\"p\">(){</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Print hello after 2,147,483,648 milliseconds</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"mi\">2147483648</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">func</span><span class=\"p\">()</span> \n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Expected output/ behavior for the above code should be the callback function of setTimeout will execute after <strong>2,147,483,648 milliseconds</strong>.</p>\n\n<p>But the callback function will get executed immediately because the maximum delay value in <code>setTimeout</code> is <strong>2,147,483,647 milliseconds</strong> and we have provided <strong>2,147,483,648 milliseconds</strong> as delay.</p>\n\n<p>Thank you for reading this so far. This is a brief introduction on <strong>How Large Delay Value In <code>setTimeout</code> Acts in JavaScript</strong>.</p>\n\n<p>Hope it's a nice and informative read for you.<br>\nIf you find this article useful, like and share this article. Someone could find it useful too.</p>\n\n<p>If you find anything technically inaccurate, please feel free to reach out to us.</p>\n\n<p>VISIT <a href=\"https://www.capscode.in/blog\">https://www.capscode.in/blog</a> TO LEARN MORE.</p>\n\n<p>See you in my next Blog article, Take care!!</p>\n\n<p>Thanks,<br>\nCapsCode</p>\n\n","body_markdown":"Hello Dev,\n\nIn this article, I will explain you 1 very important limitation of setTimeout in JavaScript.\n\nBrowsers including Internet Explorer, Chrome, Safari, and Firefox store the delay as a 32-bit signed integer internally. This causes an integer overflow when using delays larger than **2,147,483,647 ms (about 24.8 days)**, resulting in the timeout being executed immediately.\n\n\n```js\nfunction func(){\n    setTimeout(()=>{\n        console.log('Print hello after 2,147,483,648 milliseconds')\n    }, 2147483648)\n}\n\nfunc() \n\n```\n\nExpected output/ behavior for the above code should be the callback function of setTimeout will execute after **2,147,483,648 milliseconds**.\n\nBut the callback function will get executed immediately because the maximum delay value in `setTimeout` is **2,147,483,647 milliseconds** and we have provided **2,147,483,648 milliseconds** as delay.\n\n\nThank you for reading this so far. This is a brief introduction on **How Large Delay Value In `setTimeout` Acts in JavaScript**.\n\nHope it's a nice and informative read for you.\nIf you find this article useful, like and share this article. Someone could find it useful too.\n\nIf you find anything technically inaccurate, please feel free to reach out to us.\n\nVISIT https://www.capscode.in/blog TO LEARN MORE.\n\nSee you in my next Blog article, Take care!!\n\nThanks,\nCapsCode","user":{"name":"capscode","username":"capscode","twitter_username":"capscodeindia","github_username":"capscode","user_id":518225,"website_url":"https://www.capscode.in","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--uB7PYKc_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/518225/2b5ce408-e9e0-4232-94c9-95e55d3e3c15.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wdsiuQMO--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/518225/2b5ce408-e9e0-4232-94c9-95e55d3e3c15.png"}}