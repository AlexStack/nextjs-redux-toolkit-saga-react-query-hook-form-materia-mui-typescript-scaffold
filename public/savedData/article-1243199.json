{"type_of":"article","id":1243199,"title":"Using SAM to deploy an node.js lambda to consume Kinesis stream","description":"If you only need inline code for the lambda, the cloudformation should be enough. But if you need to...","readable_publish_date":"Nov 5","slug":"using-sam-to-deploy-an-nodejs-lambda-to-consume-kinesis-stream-4d0o","path":"/wwayne/using-sam-to-deploy-an-nodejs-lambda-to-consume-kinesis-stream-4d0o","url":"https://dev.to/wwayne/using-sam-to-deploy-an-nodejs-lambda-to-consume-kinesis-stream-4d0o","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-05T09:54:54Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--umrB8LmA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wurlnr9fo3zdmso7otgo.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--XfBblP0V--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wurlnr9fo3zdmso7otgo.png","canonical_url":"https://dev.to/wwayne/using-sam-to-deploy-an-nodejs-lambda-to-consume-kinesis-stream-4d0o","created_at":"2022-11-04T13:51:49Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-05T09:54:54Z","last_comment_at":"2022-11-05T09:54:54Z","reading_time_minutes":2,"tag_list":"aws, devops, tutorial, cloud","tags":["aws","devops","tutorial","cloud"],"body_html":"<p>If you only need inline code for the lambda, the cloudformation should be enough. But if you need to do <code>npm install</code> for your lambda, using SAM would be more suitable and I will show you the steps in the next.</p>\n\n<h3>\n  <a name=\"prerequisite\" href=\"#prerequisite\">\n  </a>\n  Prerequisite\n</h3>\n\n<ul>\n<li>Install SAM CLI (<a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html\">SAM official install page</a>)</li>\n<li>Create a S3 bucket first for storing the lambda</li>\n</ul>\n\n<h3>\n  <a name=\"general-plan\" href=\"#general-plan\">\n  </a>\n  General Plan\n</h3>\n\n<ol>\n<li>Write a sam.yaml file describing a lambda to consume a Kinesis stream</li>\n<li>Let the sam.yaml able to invoke a Makefile command to do <code>npm install</code>\n</li>\n<li>Use <code>sam build</code> to do the preparation works before deployment</li>\n<li>Use <code>same deploy</code> to upload lambda function into the S3 and setup all the other resources that needed</li>\n</ol>\n\n<h3>\n  <a name=\"details\" href=\"#details\">\n  </a>\n  Details\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>- sam/\n  - sam.yaml\n- src/\n  - index.js\n  - package.json\n- Makefile\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"step-1-writing-samlyaml\" href=\"#step-1-writing-samlyaml\">\n  </a>\n  Step 1: writing saml.yaml\n</h4>\n\n<ul>\n<li>Setup a new lambda</li>\n<li>Let the lambda to consume the Kinese stream (SAM will help you to handle role and policy issues automatically)</li>\n<li>Tell <code>sam build</code> to make use of makefile for the building </li>\n</ul>\n\n<p><em>sam/sam.yaml</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">Transform</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">AWS::Serverless-2016-10-31'</span>\n\n<span class=\"na\">Resources</span><span class=\"pi\">:</span>\n  <span class=\"na\">MyLambdaName</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::Serverless::Function</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">FunctionName</span><span class=\"pi\">:</span> <span class=\"pi\">{</span><span class=\"nv\">YOUR_LAMBDA_FUNCTION_NAME</span><span class=\"pi\">}</span>\n      <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"pi\">{</span><span class=\"nv\">YOUR_LAMBDA_DESCRIPTION</span><span class=\"pi\">}</span>\n      <span class=\"na\">Handler</span><span class=\"pi\">:</span> <span class=\"s\">index.handler</span>\n      <span class=\"na\">Runtime</span><span class=\"pi\">:</span> <span class=\"s\">nodejs14.x</span>\n      <span class=\"na\">CodeUri</span><span class=\"pi\">:</span> <span class=\"s\">../</span>  <span class=\"c1\"># Because Makefile in '../'</span>\n      <span class=\"na\">MemorySize</span><span class=\"pi\">:</span> <span class=\"m\">128</span>\n      <span class=\"na\">Timeout</span><span class=\"pi\">:</span> <span class=\"m\">10</span>\n      <span class=\"na\">Events</span><span class=\"pi\">:</span>\n        <span class=\"na\">KinesisStream</span><span class=\"pi\">:</span>\n          <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">Kinesis</span>\n          <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n            <span class=\"na\">BatchSize</span><span class=\"pi\">:</span> <span class=\"m\">1</span> <span class=\"c1\"># Modify this for batch consuming</span>\n            <span class=\"na\">Enabled</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n            <span class=\"na\">Stream</span><span class=\"pi\">:</span> <span class=\"pi\">{</span><span class=\"nv\">YOUR_KINESIS_STREAM_ARN</span><span class=\"pi\">}</span>\n            <span class=\"na\">MaximumBatchingWindowInSeconds</span><span class=\"pi\">:</span> <span class=\"m\">0</span>\n            <span class=\"na\">StartingPosition</span><span class=\"pi\">:</span> <span class=\"s\">LATEST</span>\n    <span class=\"na\">Metadata</span><span class=\"pi\">:</span>\n      <span class=\"na\">BuildMethod</span><span class=\"pi\">:</span> <span class=\"s\">makefile</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"step-2-writing-makefile\" href=\"#step-2-writing-makefile\">\n  </a>\n  Step 2: writing Makefile\n</h4>\n\n<ul>\n<li>Because in the sam file, we named our lambda resource as <strong>MyLambdaName</strong>, so we add a command named <strong>build-MyLambdaName</strong> in the makefile and it will be invoked automatically by running <code>sam build</code>\n</li>\n<li>What the make command do is coping the source file into the tmp folder which created by the <code>sam build</code> and running <code>npm install</code> inside the tmp folder to generate the <strong><em>node_modules</em></strong>\n</li>\n</ul>\n\n<p><em>Makefile</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight make\"><code><span class=\"nl\">build-MyLambdaName</span><span class=\"o\">:</span>\n  <span class=\"err\">@echo</span> <span class=\"s2\">\"Packaging the source file...\"</span>\n  <span class=\"err\">@cp</span> <span class=\"err\">-R</span> <span class=\"err\">src/*</span> <span class=\"err\">$(ARTIFACTS_DIR)</span>\n  <span class=\"err\">@npm</span> <span class=\"err\">--prefix</span> <span class=\"err\">$(ARTIFACTS_DIR)</span> <span class=\"err\">i</span> <span class=\"err\">--production</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"step-3-running-raw-sam-build-endraw-\" href=\"#step-3-running-raw-sam-build-endraw-\">\n  </a>\n  Step 3: running <code>sam build</code>\n</h4>\n\n<ul>\n<li>My sam file is in the <strong>sam/</strong> folder, so I need to specify the file position with the parameter <strong>-t</strong>\n</li>\n<li>After running the build command, a new folder <strong>.aws-sam/</strong> will be created, <code>sam deploy</code> will auto-search and use this folder (don't forget put <strong>.aws-sam</strong> into the <strong>.gitignore</strong>)\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>sam build <span class=\"nt\">-t</span> sam/sam.yaml\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"step-4-running-raw-sam-deploy-endraw-\" href=\"#step-4-running-raw-sam-deploy-endraw-\">\n  </a>\n  Step 4: running <code>sam deploy</code>\n</h4>\n\n<ul>\n<li>\n<code>sam deploy</code> will make use of the <strong>.aws_sam</strong> folder which created by the <code>sam build</code>\n</li>\n<li>Deployment includes uploading lambda function into S3 bucket and setup all the resources in the sam.yaml\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>sam deploy \n    <span class=\"nt\">--region</span> <span class=\"o\">{</span>AWS_REGION<span class=\"o\">}</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--stack-name</span> <span class=\"o\">{</span>STACK_NAME_IN_CLOUDFORMATION<span class=\"o\">}</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--s3-bucket</span> <span class=\"o\">{</span>S3_BUCKET_NAME<span class=\"o\">}</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--s3-prefix</span> <span class=\"o\">{</span>S3 FOLDER NAME IN THE BUCKET<span class=\"o\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"end\" href=\"#end\">\n  </a>\n  End\n</h3>\n\n<p>Later when you do any modification to the lambda, you only need to re-run <code>sam build</code> and <code>same deploy</code>.</p>\n\n<p>It will create and upload a new file into your S3 and update lambda function to use the latest file.</p>\n\n","body_markdown":"If you only need inline code for the lambda, the cloudformation should be enough. But if you need to do `npm install` for your lambda, using SAM would be more suitable and I will show you the steps in the next.\n\n### Prerequisite\n* Install SAM CLI ([SAM official install page](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html))\n* Create a S3 bucket first for storing the lambda\n\n### General Plan\n1. Write a sam.yaml file describing a lambda to consume a Kinesis stream\n2. Let the sam.yaml able to invoke a Makefile command to do `npm install`\n3. Use `sam build` to do the preparation works before deployment\n4. Use `same deploy` to upload lambda function into the S3 and setup all the other resources that needed\n\n### Details\n\n```\n- sam/\n  - sam.yaml\n- src/\n  - index.js\n  - package.json\n- Makefile\n```\n\n#### Step 1: writing saml.yaml\n* Setup a new lambda\n* Let the lambda to consume the Kinese stream (SAM will help you to handle role and policy issues automatically)\n* Tell `sam build` to make use of makefile for the building \n\n_sam/sam.yaml_\n\n```yaml\nTransform: 'AWS::Serverless-2016-10-31'\n\nResources:\n  MyLambdaName:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: {YOUR_LAMBDA_FUNCTION_NAME}\n      Description: {YOUR_LAMBDA_DESCRIPTION}\n      Handler: index.handler\n      Runtime: nodejs14.x\n      CodeUri: ../  # Because Makefile in '../'\n      MemorySize: 128\n      Timeout: 10\n      Events:\n        KinesisStream:\n          Type: Kinesis\n          Properties:\n            BatchSize: 1 # Modify this for batch consuming\n            Enabled: true\n            Stream: {YOUR_KINESIS_STREAM_ARN}\n            MaximumBatchingWindowInSeconds: 0\n            StartingPosition: LATEST\n    Metadata:\n      BuildMethod: makefile\n```\n\n\n#### Step 2: writing Makefile\n* Because in the sam file, we named our lambda resource as **MyLambdaName**, so we add a command named **build-MyLambdaName** in the makefile and it will be invoked automatically by running `sam build`\n* What the make command do is coping the source file into the tmp folder which created by the `sam build` and running `npm install` inside the tmp folder to generate the **_node_modules_**\n\n_Makefile_\n\n```make\nbuild-MyLambdaName:\n  @echo \"Packaging the source file...\"\n  @cp -R src/* $(ARTIFACTS_DIR)\n  @npm --prefix $(ARTIFACTS_DIR) i --production\n```\n\n\n#### Step 3: running `sam build`\n* My sam file is in the __sam/__ folder, so I need to specify the file position with the parameter **-t**\n* After running the build command, a new folder **.aws-sam/** will be created, `sam deploy` will auto-search and use this folder (don't forget put **.aws-sam** into the **.gitignore**)\n```sh\nsam build -t sam/sam.yaml\n```\n\n\n#### Step 4: running `sam deploy`\n* `sam deploy` will make use of the **.aws_sam** folder which created by the `sam build`\n* Deployment includes uploading lambda function into S3 bucket and setup all the resources in the sam.yaml\n```sh\nsam deploy \n    --region {AWS_REGION} \\\n    --stack-name {STACK_NAME_IN_CLOUDFORMATION} \\\n    --s3-bucket {S3_BUCKET_NAME} \\\n    --s3-prefix {S3 FOLDER NAME IN THE BUCKET}\n```\n\n### End\nLater when you do any modification to the lambda, you only need to re-run `sam build` and `same deploy`.\n\nIt will create and upload a new file into your S3 and update lambda function to use the latest file.\n","user":{"name":"wwayne","username":"wwayne","twitter_username":"wwayne_me","github_username":"wwayne","user_id":273957,"website_url":"https://wwayne.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--RdlYBR6u--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273957/9076415e-9e79-4e39-bad5-0e18160f9163.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--ilxcruqs--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273957/9076415e-9e79-4e39-bad5-0e18160f9163.jpeg"}}