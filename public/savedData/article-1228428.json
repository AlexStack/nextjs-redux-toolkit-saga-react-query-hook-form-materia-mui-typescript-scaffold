{"type_of":"article","id":1228428,"title":"Construindo aplicação do zero com node.js: Parte 2","description":"Fala galera, depois de um primeiro artigo bem teórico, dessa vez iremos colocar a mão na massa. Mas...","readable_publish_date":"Nov 7","slug":"construindo-aplicacao-do-zero-com-nodejs-parte-2-16jk","path":"/erandirjunior/construindo-aplicacao-do-zero-com-nodejs-parte-2-16jk","url":"https://dev.to/erandirjunior/construindo-aplicacao-do-zero-com-nodejs-parte-2-16jk","comments_count":0,"public_reactions_count":1,"collection_id":20460,"published_timestamp":"2022-11-07T14:41:46Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1228428.png","canonical_url":"https://dev.to/erandirjunior/construindo-aplicacao-do-zero-com-nodejs-parte-2-16jk","created_at":"2022-10-24T14:04:32Z","edited_at":"2022-11-07T15:39:21Z","crossposted_at":null,"published_at":"2022-11-07T14:41:46Z","last_comment_at":"2022-11-07T14:41:46Z","reading_time_minutes":13,"tag_list":"node, javascript, programming, webdev","tags":["node","javascript","programming","webdev"],"body_html":"<p>Fala galera, depois de um <a href=\"https://dev.to/erandirjunior/construindo-aplicacao-do-zero-com-nodejs-parte-1-3hdj\">primeiro artigo</a> bem teórico, dessa vez iremos colocar a mão na massa. Mas antes, é necessário informar que os códigos a seguir já estão adaptados para a versão final do projeto, isso é, todos os exemplos já serão utilizando <strong>Jest</strong> e <strong>ES6 Module</strong>, além de algumas correções que encontrei pelo caminho.</p>\n\n<h2>\n  <a name=\"configurando-docker\" href=\"#configurando-docker\">\n  </a>\n  Configurando Docker\n</h2>\n\n<p>Inicialmente você precisa ter configurado tanto o <strong>docker</strong> quanto o <strong>docker compose</strong> em sua máquina, até mesmo para termos um padrão no ambiente de desenvolvimento.</p>\n\n<p>Com a máquina já configurada, crie um diretório qualquer, no meu caso foi <strong>Two-Factor-Authentication</strong> e dentro dele vamos criar os arquivos <strong>Dockerfile</strong>, sem extensão, e o arquivo <strong>docker-compose.yml</strong>.</p>\n\n<p>No arquivo <em>Dockerfile</em>, deixaremos ele assim:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> node:lts</span>\n\n<span class=\"k\">RUN </span><span class=\"nb\">mkdir</span> /app\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> --chown=node:node . .</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> /bin/sh</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>No arquivo <em>docker-compose.yml</em>, deixaremos ele assim:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3.9'</span>\n<span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">two_factor_authentication</span><span class=\"pi\">:</span>\n    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">authentication_project</span>\n    <span class=\"na\">build</span><span class=\"pi\">:</span> <span class=\"s\">.</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">.:/app:rw</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">${APP_PORT}:${APP_PORT}\"</span>\n    <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">no\"</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">sh</span>\n    <span class=\"na\">stdin_open</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">tty</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">CHOKIDAR_USEPOLLING=true</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db_two_factor</span>\n    <span class=\"na\">networks</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">pg-network</span>\n  <span class=\"na\">adminer</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">adminer</span>\n    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">adminer_sgbd_two_factor_authentication</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">8081:8080\"</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db_two_factor</span>\n    <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">always</span>\n    <span class=\"na\">networks</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">pg-network</span>\n  <span class=\"na\">db_two_factor</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">postgres:latest</span>\n    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">db_two_factor_authentication</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">5432:5432</span>\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">POSTGRES_USER=${DB_USER}</span>\n      <span class=\"pi\">-</span> <span class=\"s\">POSTGRES_PASSWORD=${DB_PASSWORD}</span>\n      <span class=\"pi\">-</span> <span class=\"s\">POSTGRES_DB=${DB_DATABASE}</span>\n      <span class=\"pi\">-</span> <span class=\"s\">POSTGRES_HOST_AUTH_METHOD=trust</span>\n    <span class=\"na\">networks</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">pg-network</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">dba:/var/lib/postgresql</span>\n\n<span class=\"na\">volumes</span><span class=\"pi\">:</span>\n  <span class=\"na\">dba</span><span class=\"pi\">:</span>\n\n<span class=\"na\">networks</span><span class=\"pi\">:</span>\n  <span class=\"na\">pg-network</span><span class=\"pi\">:</span>\n    <span class=\"na\">driver</span><span class=\"pi\">:</span> <span class=\"s\">bridge</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Só para esclarecer o que estamos fazendo, iremos utilizar a última versão do <strong>node lts</strong>, usaremos a última versão do <strong>postgres</strong>, para armazenar os dados, e utilizaremos o <strong>adminer</strong>, que é uma ferramenta visual para auxiliar no gerenciamento do banco de dados.</p>\n\n<p>Além disso, algumas informações da nossa configuração acima são dinâmicas, como por exemplo as informações de conexão com o banco e a porta da aplicação, para isso, vamos criar um arquivo de configuração chamado <strong>.env</strong>, com o seguinte conteúdo;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>APP_PORT=8001\n\nDB_DIALECT=postgres\nDB_HOST=db_two_factor\nDB_DATABASE=two_factors\nDB_USER=root\nDB_PASSWORD=root\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Esse arquivo será bem útil posteriormente</strong>.</p>\n\n<p>Agora iremos subir todos os nossos serviços. Acesse o terminal e rode o comando abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker-compose up <span class=\"nt\">--buid</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Ou se quiser deixar os serviços rodando em segundo plano, basta rodar o comando abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker compose up <span class=\"nt\">-d</span> <span class=\"nt\">--build</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Agora que estamos com nossos serviços rodando, vamos entrar no serviço onde está o <em>node</em> para começarmos a construir nossa aplicação, no terminal, rode o comando abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> authentication_project bash\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong><em>authentication_project</em> é o nome do meu serviço node, para verificar o seu, basta rodar o comando docker ps</strong>.</p>\n\n<h2>\n  <a name=\"iniciando-estrutura-do-projeto\" href=\"#iniciando-estrutura-do-projeto\">\n  </a>\n  Iniciando estrutura do projeto\n</h2>\n\n<p>Depois de entrarmos no serviço do <em>node</em>, vamos rodar o seguinte comando para de fato iniciarmos o projeto:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm init <span class=\"nt\">-y</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Um arquivo chamado <strong>package.json</strong> vai ser criado, ele será bem útil, por enquanto o deixaremos de lado. Em relação a organização do projeto, deixei claro que me baseei na <strong>arquitetura hexagonal</strong> (falarei um pouco mais posteriormente), então vamos criar diretórios que vão facilitar o entendimento do projeto, minha estrutura ficou como o da imagem abaixo:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GXUBeCL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqoayj28fyp7604xl3ks.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GXUBeCL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqoayj28fyp7604xl3ks.png\" alt=\"Image description\" loading=\"lazy\" width=\"222\" height=\"116\"></a></p>\n\n<ul>\n<li>\n<strong>src/domain</strong>: onde ficará toda a nossa regra de negócio;</li>\n<li>\n<strong>src/infra</strong>: onde ficará todas as implementações das dependências do nosso projeto, irá encapsular os recursos de libs, por exemplo;</li>\n<li>\n<strong>tests</strong>: onde ficará nossos testes.</li>\n</ul>\n\n<h2>\n  <a name=\"fluxo-do-projeto\" href=\"#fluxo-do-projeto\">\n  </a>\n  Fluxo do projeto\n</h2>\n\n<p>O fluxo do projeto será dividido em duas partes: Primeiro vamos construir a lógica de login \"tradicional\", com e-mail e senha, depois vamos construir a lógica de logar com o token.</p>\n\n<p>E pensando na primeira lógica do sistema, a gente vai ter uma entrada de e-mail e senha, vamos precisar buscar as informações do usuário pelo e-mail, validar sua senha, gerar um token e mandar por e-mail. Nesta breve descrição, podemos perceber que teremos uma comunicação com o banco de dados, uma validação de senha, comunicação com o serviço de e-mail e geração de token, ou seja, temos 4 dependências.</p>\n\n<p>Vamos primeiramente definir essas \"<strong>interfaces</strong>\", lembrando que <em>JS</em> não possui o recurso de interface como conhecemos em outras linguagens, então dentro de <strong>src/domain</strong>, vamos criar alguns arquivos:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// src/domain/iemail.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">IEmail</span> <span class=\"p\">{</span>\n    <span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// src/domain/irepository.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">IRepository</span> <span class=\"p\">{</span>\n    <span class=\"nx\">findByEmail</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// src/domain/ipassword-hash.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">IPasswordHash</span> <span class=\"p\">{</span>\n    <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">hash</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// src/domain/igenerate-token.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">IGenerateToken</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getToken</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getEmailToken</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Method must be implemented!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Basicamente definimos nossas \"interfaces\" de comunicação. Um detalhe muito importante fica por conta da classe <strong>IGenerateToken</strong>, contendo 2 métodos de geração de token, isso porque pensei na seguinte lógica: quando o usuário logar, ele vai receber por e-mail um token, porém também vai receber um outro token como resposta da requisição (que será armazenada temporariamente pelo cliente), quando o usuário for fazer a segunda autenticação, ele vai precisar mandar os 2 tokens, aqui basicamente é uma forma de aumentar a segurança.</p>\n\n<p>Outra coisa que vamos encapsular, é em relação ao erros, eu basicamente criei 3 classes de erros, isso vai ser útil mais na frente:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// src/domain/domain-error.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">DomainError</span> <span class=\"kd\">extends</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// src/domain/gateway-error.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">GatewayError</span> <span class=\"kd\">extends</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// invalid-argument-error.js</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"kd\">extends</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Também vamos criar uma ação para trabalhar com esses erros:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// throw-error.js</span>\n<span class=\"kd\">const</span> <span class=\"nx\">throwError</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">throwError</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Agora vamos construir a classe de login:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// src/domain/user-authentication.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">IRepository</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./irepository.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IEmail</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./iemail.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IPasswordHash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./ipassword-hash.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IGenerateToken</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./igenerate-token.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">DomainError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./domain-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">GatewayError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./gateway-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">throwError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./throw-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">UserAuthentication</span> <span class=\"p\">{</span>\n    <span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">hashService</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">repository</span><span class=\"p\">,</span>\n        <span class=\"nx\">emailGateway</span><span class=\"p\">,</span>\n        <span class=\"nx\">passwordHash</span><span class=\"p\">,</span>\n        <span class=\"nx\">tokenService</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span> <span class=\"o\">=</span> <span class=\"nx\">repository</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">emailGateway</span> <span class=\"o\">=</span> <span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">hashService</span> <span class=\"o\">=</span> <span class=\"nx\">passwordHash</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span> <span class=\"o\">=</span> <span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Como <em>JS</em> é uma linguagem de tipagem fraca, vamos criar algo que valide a instância dos objetos recebidos, para isso vamos criar um novo arquivo para fazer essa validação:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// src/domain/intanceof.js</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isInstanceOf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">instance</span> <span class=\"k\">instanceof</span> <span class=\"nx\">instanceBase</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">isInstanceOf</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Agora importamos em UserAuthentication e vamos validar as entradas:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">IRepository</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./irepository.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IEmail</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./iemail.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IPasswordHash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./ipassword-hash.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IGenerateToken</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./igenerate-token.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">isInstanceOf</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./instanceof.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">DomainError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./domain-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">GatewayError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./gateway-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">throwError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./throw-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">UserAuthentication</span> <span class=\"p\">{</span>\n    <span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">hashService</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">repository</span><span class=\"p\">,</span>\n        <span class=\"nx\">emailGateway</span><span class=\"p\">,</span>\n        <span class=\"nx\">passwordHash</span><span class=\"p\">,</span>\n        <span class=\"nx\">tokenService</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">validateDependencies</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">tokenService</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span> <span class=\"o\">=</span> <span class=\"nx\">repository</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">emailGateway</span> <span class=\"o\">=</span> <span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">hashService</span> <span class=\"o\">=</span> <span class=\"nx\">passwordHash</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span> <span class=\"o\">=</span> <span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">validateDependencies</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">tokenService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">IRepository</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid repository dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">IEmail</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid email gateway dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">IPasswordHash</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid hash service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">tokenService</span><span class=\"p\">,</span> <span class=\"nx\">IGenerateToken</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid token service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Antes de criarmos nosso método de autenticação, vamos criar duas classes, uma que vai encapsular os dados de entrada, e outra que vai encapsular os dados do usuário que vem do banco:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// src/domain/login-payload.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">throwError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./throw-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">LoginPayload</span> <span class=\"p\">{</span>\n    <span class=\"err\">#</span><span class=\"nx\">email</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">password</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">email</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">InvalidArgumentError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Fields email and password must be filled!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">email</span> <span class=\"o\">=</span> <span class=\"nx\">email</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">password</span> <span class=\"o\">=</span> <span class=\"nx\">password</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">email</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">email</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">password</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">password</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// src/domain/user.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">DomainError</span> <span class=\"k\">from</span><span class=\"dl\">'</span><span class=\"s1\">./domain-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">throwError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./throw-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">User</span> <span class=\"p\">{</span>\n    <span class=\"nx\">token</span><span class=\"p\">;</span>\n    <span class=\"nx\">emailToken</span><span class=\"p\">;</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">email</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">password</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">expired</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">({</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"nx\">emailToken</span><span class=\"p\">,</span> <span class=\"nx\">expired</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">id</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">email</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid user data!</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">id</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">email</span> <span class=\"o\">=</span> <span class=\"nx\">email</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">password</span> <span class=\"o\">=</span> <span class=\"nx\">password</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"nx\">token</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">emailToken</span> <span class=\"o\">=</span> <span class=\"nx\">emailToken</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">expired</span> <span class=\"o\">=</span> <span class=\"nx\">expired</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">id</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">expired</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">!!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">expired</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">email</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">email</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">password</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">password</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Importem essas classes na nossa classe de negócio, e agora vamos implementar nossa lógica de autenticação, observe o fluxo abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">async</span> <span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">validateUserDataInput</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getUserRegistered</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getUserWithUpdatedData</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">);</span>\n            <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">emailGateway</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">token</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">GatewayError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Generic error, see the integrations!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">validateUserDataInput</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">,</span> <span class=\"nx\">LoginPayload</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid payload dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">getUserRegistered</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">findByEmail</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">GatewayError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Error connection database!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getUserValidated</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"err\">#</span><span class=\"nx\">getUserValidated</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">registeredUser</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">InvalidArgumentError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">User not found with data sent!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">User</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid user instance!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">passwordsAreEquals</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">hashService</span><span class=\"p\">.</span><span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">registeredUser</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">passwordsAreEquals</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">InvalidArgumentError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid user data!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">registeredUser</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">getUserWithUpdatedData</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">User</span><span class=\"p\">({</span>\n            <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n            <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">,</span>\n            <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getTokens</span><span class=\"p\">(),</span>\n            <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">,</span>\n            <span class=\"na\">expired</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">getTokens</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"na\">token</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">.</span><span class=\"nx\">getToken</span><span class=\"p\">(),</span>\n            <span class=\"na\">emailToken</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">.</span><span class=\"nx\">getEmailToken</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Temos o método <strong>authenticate</strong> que recebe um objeto de entrada, é feita a validação desse objeto, depois é feita a busca do usuário pelo e-mail e novamente validamos o objeto recebido, e por último validamos a senha. Volte ao código acima e veja que a gente envolve algumas chamadas em try/catch e em caso de erro, ou validações mal sucedidas, lançamos sempre as nossas classes de erros personalizados.</p>\n\n<p>Após obtermos o usuário válido com a chamada do método <strong>#getUserRegistered</strong>, nós vamos criar um outro objeto, contendo tanto as informações do usuário do banco, como também as informações dos tokens. Tudo isso chamando o método <strong>#getUserWithUpdatedData</strong>, após isso, a gente chama o método de atualização do banco, depois manda os dados necessários por e-mail e retornamos um dos tokens gerados.</p>\n\n<p>Note que o método de envio de e-mail, não esperamos o fim da execução, pois provavelmente o envio de e-mail seja um processo demorado, que pode travar a execução do nosso sistema.</p>\n\n<p>Agora observem o objeto <strong>User</strong>, e principalmente o campo <strong>expired</strong>, esse campo é o responsável por verificar se os tokens enviados já foram utilizados ou não (trabalharemos nisso depois). Fazendo com que um par de tokens seja utilizado apenas uma vez.</p>\n\n<p>Por fim, o arquivo <em>user-authentication</em>, deverá ficar com o conteúdo abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">User</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./user.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IRepository</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./irepository.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IEmail</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./iemail.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IPasswordHash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./ipassword-hash.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">IGenerateToken</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./igenerate-token.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">LoginPayload</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./login-payload.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">isInstanceOf</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./instanceof.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">DomainError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./domain-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">GatewayError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./gateway-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">throwError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./throw-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">UserAuthentication</span> <span class=\"p\">{</span>\n    <span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">hashService</span><span class=\"p\">;</span>\n    <span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">repository</span><span class=\"p\">,</span>\n        <span class=\"nx\">emailGateway</span><span class=\"p\">,</span>\n        <span class=\"nx\">passwordHash</span><span class=\"p\">,</span>\n        <span class=\"nx\">tokenService</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">validateDependencies</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">tokenService</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span> <span class=\"o\">=</span> <span class=\"nx\">repository</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">emailGateway</span> <span class=\"o\">=</span> <span class=\"nx\">emailGateway</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">hashService</span> <span class=\"o\">=</span> <span class=\"nx\">passwordHash</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span> <span class=\"o\">=</span> <span class=\"nx\">tokenService</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">validateDependencies</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">tokenService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">repository</span><span class=\"p\">,</span> <span class=\"nx\">IRepository</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid repository dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">emailGateway</span><span class=\"p\">,</span> <span class=\"nx\">IEmail</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid email gateway dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">passwordHash</span><span class=\"p\">,</span> <span class=\"nx\">IPasswordHash</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid hash service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">tokenService</span><span class=\"p\">,</span> <span class=\"nx\">IGenerateToken</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid token service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">validateUserDataInput</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getUserRegistered</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getUserWithUpdatedData</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">);</span>\n            <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">emailGateway</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">token</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">GatewayError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Generic error, see the integrations!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">validateUserDataInput</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">loginPayload</span><span class=\"p\">,</span> <span class=\"nx\">LoginPayload</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid payload dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"err\">#</span><span class=\"nx\">getUserRegistered</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">registeredUser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">repository</span><span class=\"p\">.</span><span class=\"nx\">findByEmail</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">GatewayError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Error connection database!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getUserValidated</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"err\">#</span><span class=\"nx\">getUserValidated</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">registeredUser</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">InvalidArgumentError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">User not found with data sent!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">registeredUser</span><span class=\"p\">,</span> <span class=\"nx\">User</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">DomainError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid user instance!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">passwordsAreEquals</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">hashService</span><span class=\"p\">.</span><span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">registeredUser</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">passwordsAreEquals</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">InvalidArgumentError</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Invalid user data!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">registeredUser</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">isInstanceOf</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">instanceBase</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">getUserWithUpdatedData</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">User</span><span class=\"p\">({</span>\n            <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n            <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">,</span>\n            <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">getTokens</span><span class=\"p\">(),</span>\n            <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">,</span>\n            <span class=\"na\">expired</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">getTokens</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"na\">token</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">.</span><span class=\"nx\">getToken</span><span class=\"p\">(),</span>\n            <span class=\"na\">emailToken</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">tokenService</span><span class=\"p\">.</span><span class=\"nx\">getEmailToken</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"teste\" href=\"#teste\">\n  </a>\n  Teste\n</h2>\n\n<p>Agora que nossa lógica foi feita, vamos testar todos os fluxos. Acesse o terminal do container e rode o comando abaixo para instalar o <strong>Jest</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i <span class=\"nt\">--save-dev</span> jest\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Instamos essa biblioteca somente como dependência de desenvolvimento. Outra coisa que faremos é alterar o comando padrão de testes, para que ele chame o <em>Jest</em>, então, em nosso arquivo package.json, altere ele modificando o campo <em>script</em> para isso:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"node --experimental-vm-modules ./node_modules/jest/bin/jest.js ./tests/* --coverage --config='{ </span><span class=\"se\">\\\"</span><span class=\"s2\">coverageReporters</span><span class=\"se\">\\\"</span><span class=\"s2\">: [</span><span class=\"se\">\\\"</span><span class=\"s2\">html</span><span class=\"se\">\\\"</span><span class=\"s2\">] }'</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>E agora vamos criar nossos testes, dentro do diretório <em>tests</em>, crie um diretório chamado <em>unit</em>, e dentro dele um diretório chamado <em>mocks</em>, essa pasta <em>mocks</em> vai servir para armazenar todas as implementações das interfaces do domínio. Poderíamos utilizar alguma lib para fazer isso, mas eu preferi fazer tudo na mão, então dentro de <em>mocks</em>, crie os arquivos abaixo contendo os seguintes códigos:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// tests/unit/mocks/email-mock.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">IEmail</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../../src/domain/iemail.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">EmailMock</span> <span class=\"kd\">extends</span> <span class=\"nx\">IEmail</span> <span class=\"p\">{</span>\n    <span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">throwException</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Sent!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">EmailMock</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// tests/unit/mocks/repository-mock.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">IRepository</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../../src/domain/irepository.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">User</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../../src/domain/user.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">RepositoryMock</span> <span class=\"kd\">extends</span> <span class=\"nx\">IRepository</span> <span class=\"p\">{</span>\n    <span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">throwExceptionUpdate</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">returnEmptyObject</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">returnEmpty</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">findByEmail</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">throwException</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">returnEmpty</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">returnEmptyObject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">{};</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">User</span><span class=\"p\">({</span><span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">erandir@email.com</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">123456</span><span class=\"dl\">'</span><span class=\"p\">});</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">throwExceptionUpdate</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nb\">Error</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">RepositoryMock</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// tests/unit/mocks/hash-mock.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">IPasswordHash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../../src/domain/ipassword-hash.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">HashMock</span> <span class=\"kd\">extends</span> <span class=\"nx\">IPasswordHash</span> <span class=\"p\">{</span>\n    <span class=\"nx\">passwordsAreEquals</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">hash</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">passwordsAreEquals</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">HashMock</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// tests/unit/mocks/token-mock.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">IGenerateToken</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../../src/domain/igenerate-token.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">TokenMock</span> <span class=\"kd\">extends</span> <span class=\"nx\">IGenerateToken</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getToken</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">13eb4cb6-35dd-4536-97e6-0ed0e4fb1fb3</span><span class=\"dl\">'</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getEmailToken</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span>  <span class=\"dl\">'</span><span class=\"s1\">4RV651gR93hDAGiTCYhmhh</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">TokenMock</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Agora dentro de <em>tests/unit</em>, crie um arquivo chamado <strong>user-authentication.test.js</strong>, é nesse arquivo que escreveremos todos os nosso testes para a classe <strong>UserAuthentication</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">UserAuthentication</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../src/domain/user-authentication.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">EmailMock</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./mocks/email-mock.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">RepositoryMock</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./mocks/repository-mock.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">HashMock</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./mocks/hash-mock.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">TokenMock</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./mocks/token-mock.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">LoginPayload</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../src/domain/login-payload.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">payload</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoginPayload</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">erandir@email.com</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">1234567</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">userAuthentication</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">UserAuthentication</span><span class=\"p\">(</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">,</span>\n    <span class=\"nx\">EmailMock</span><span class=\"p\">,</span>\n    <span class=\"nx\">HashMock</span><span class=\"p\">,</span>\n    <span class=\"nx\">TokenMock</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid object repository</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">UserAuthentication</span><span class=\"p\">(</span>\n        <span class=\"p\">{},</span>\n        <span class=\"nx\">EmailMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">HashMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">TokenMock</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid repository dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid object email</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">UserAuthentication</span><span class=\"p\">(</span>\n        <span class=\"nx\">RepositoryMock</span><span class=\"p\">,</span>\n        <span class=\"p\">{},</span>\n        <span class=\"nx\">HashMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">TokenMock</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid email gateway dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid object hash</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">UserAuthentication</span><span class=\"p\">(</span>\n        <span class=\"nx\">RepositoryMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">EmailMock</span><span class=\"p\">,</span>\n        <span class=\"p\">{},</span>\n        <span class=\"nx\">TokenMock</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid hash service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid object token</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">UserAuthentication</span><span class=\"p\">(</span>\n        <span class=\"nx\">RepositoryMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">EmailMock</span><span class=\"p\">,</span>\n        <span class=\"nx\">HashMock</span><span class=\"p\">,</span>\n        <span class=\"p\">{}</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid token service dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid object login payload</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">({});</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid payload dependency</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error exception find user</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error connection database!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error find user empty</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">returnEmpty</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">User not found with data sent!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error user without id</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">returnEmpty</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">returnEmptyObject</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid user instance!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error update user</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">returnEmptyObject</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">throwExceptionUpdate</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Generic error, see the integrations!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error email exception</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">RepositoryMock</span><span class=\"p\">.</span><span class=\"nx\">throwExceptionUpdate</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">EmailMock</span><span class=\"p\">.</span><span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Generic error, see the integrations!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error user divergent password</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">EmailMock</span><span class=\"p\">.</span><span class=\"nx\">throwException</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"nx\">HashMock</span><span class=\"p\">.</span><span class=\"nx\">passwordsAreEquals</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Invalid user data!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Get token</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">HashMock</span><span class=\"p\">.</span><span class=\"nx\">passwordsAreEquals</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">userAuthentication</span><span class=\"p\">.</span><span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">13eb4cb6-35dd-4536-97e6-0ed0e4fb1fb3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Importamos as dependências e fizemos todos os testes em cima da nossa classe de negócios, seja passando dados errados, ou gerando exceção, passando por todos os caminhos errados, para só no final realizarmos o teste de caminho feliz.</p>\n\n<p>Antes de executarmos nossos testes, precisamos configurar a modularização do nosso projeto, que por padrão é a do <strong>commonjs</strong>, e em nosso caso, utilizamos a do <strong>es6 module</strong>, então precisamos informar isso nas configurações, modifique o arquivo <strong>package.json</strong> e deixe-o assim:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nome_do_seu_projeto\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"main\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"index.js\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"directories\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tests\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"node --experimental-vm-modules ./node_modules/jest/bin/jest.js ./tests/* --coverage --config='{ </span><span class=\"se\">\\\"</span><span class=\"s2\">coverageReporters</span><span class=\"se\">\\\"</span><span class=\"s2\">: [</span><span class=\"se\">\\\"</span><span class=\"s2\">html</span><span class=\"se\">\\\"</span><span class=\"s2\">] }'</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"keywords\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">\n  </span><span class=\"nl\">\"author\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"license\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ISC\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"jest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^29.2.2\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"module\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Vá ao terminal do serviço node e executar o código abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm t\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Será executado todos os teste e após isso uma pasta chamada <strong>coverage</strong> será criada na raiz do projeto. Dentro de <strong>coverage</strong>, vai ter inúmeros arquivos html, procure o <strong>index.html</strong> e abra ele no seu navegador. Você notará que temos um relatório de cobertura de testes, onde sabemos o que foi testado, o que falta testar, etc. Isso é muito útil.</p>\n\n<h2>\n  <a name=\"t%C3%B3picos-interessantes\" href=\"#t%C3%B3picos-interessantes\">\n  </a>\n  Tópicos interessantes\n</h2>\n\n<p>Sabe-se que em JavaScript, podemos definir objetos de algumas formas diferentes, nesse projeto, fiz uso de classes, que é algo mais recente, isso porque tenho mais familiaridade com essa forma. O projeto inteiro poderia ter sido feito utilizando objetos literais, funções construtoras, etc.</p>\n\n<p>Ainda falando sobre classes, perceba que para criar atributos e métodos privados, eu faço uso do caractere #, que também é um recurso recente. Outro detalhe fica por conta das subclasses, que sempre definimos um <em>construtor</em> e que sempre o primeiro comando é chamar o <em>construtor</em> do pai.</p>\n\n<p>Além disso, percebam como estamos isolando nossa camada de regra de negócio, dependemos sempre de interfaces, isso nos possibilita simular comportamentos, o que nos ajudou nos testes.</p>\n\n<p>Se você é um desenvolvedor mais experiente, possivelmente pode ter notado que não implementei uma validação importante, que é se os tokens gerados são únicos, isso foi de certa forma proposital, caso alguém queira mexer no código, alterar e adicionar essa validação.</p>\n\n<p>E sobre a questão da modularização do projeto, caso quiséssemos utilizar a padrão, que é o <strong>commonjs</strong>, iriamos substituir os comando de exportar e importar, por exemplo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// es6 Module</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"kd\">extends</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// E para importar fazemos assim</span>\n<span class=\"k\">import</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Em commonjs fariamos da seguinte forma</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">class</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"kd\">extends</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// E para importar faríamos assim</span>\n<span class=\"kd\">const</span> <span class=\"nx\">InvalidArgumentError</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./invalid-argument-error.js</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Existem algumas pequenas diferenças entre usar uma ou outra, mas eu gosto de utilizar a modularização do <em>ES6</em>.</p>\n\n<h2>\n  <a name=\"resumo\" href=\"#resumo\">\n  </a>\n  Resumo\n</h2>\n\n<p>Neste artigo, começamos a montar nosso projeto, criamos testes, relatório de teste, aprendemos a importar e exportar módulos, validamos objetos, etc. Vale a pena notar que essa aqui foi a minha linha de raciocínio, talvez você tenha pensado em uma forma diferente de fazer tudo que fiz nessa primeira parte, você pode implementar do jeito. Continuaremos desenvolvendo nossa lógica no próximo artigo, até lá.</p>\n\n","body_markdown":"Fala galera, depois de um [primeiro artigo](https://dev.to/erandirjunior/construindo-aplicacao-do-zero-com-nodejs-parte-1-3hdj) bem teórico, dessa vez iremos colocar a mão na massa. Mas antes, é necessário informar que os códigos a seguir já estão adaptados para a versão final do projeto, isso é, todos os exemplos já serão utilizando **Jest** e **ES6 Module**, além de algumas correções que encontrei pelo caminho.\n\n## Configurando Docker\nInicialmente você precisa ter configurado tanto o **docker** quanto o **docker compose** em sua máquina, até mesmo para termos um padrão no ambiente de desenvolvimento.\n\nCom a máquina já configurada, crie um diretório qualquer, no meu caso foi **Two-Factor-Authentication** e dentro dele vamos criar os arquivos **Dockerfile**, sem extensão, e o arquivo **docker-compose.yml**.\n\nNo arquivo *Dockerfile*, deixaremos ele assim:\n```Dockerfile\nFROM node:lts\n\nRUN mkdir /app\n\nWORKDIR /app\n\nCOPY --chown=node:node . .\n\nCMD /bin/sh\n```\n\nNo arquivo *docker-compose.yml*, deixaremos ele assim:\n```yml\nversion: '3.9'\nservices:\n  two_factor_authentication:\n    container_name: authentication_project\n    build: .\n    volumes:\n      - .:/app:rw\n    ports:\n      - \"${APP_PORT}:${APP_PORT}\"\n    restart: \"no\"\n    command: sh\n    stdin_open: true\n    tty: true\n    environment:\n      - CHOKIDAR_USEPOLLING=true\n    depends_on:\n      - db_two_factor\n    networks:\n      - pg-network\n  adminer:\n    image: adminer\n    container_name: adminer_sgbd_two_factor_authentication\n    ports:\n      - \"8081:8080\"\n    depends_on:\n      - db_two_factor\n    restart: always\n    networks:\n      - pg-network\n  db_two_factor:\n    image: postgres:latest\n    container_name: db_two_factor_authentication\n    ports:\n      - 5432:5432\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_DATABASE}\n      - POSTGRES_HOST_AUTH_METHOD=trust\n    networks:\n      - pg-network\n    volumes:\n      - dba:/var/lib/postgresql\n\nvolumes:\n  dba:\n\nnetworks:\n  pg-network:\n    driver: bridge\n```\nSó para esclarecer o que estamos fazendo, iremos utilizar a última versão do **node lts**, usaremos a última versão do **postgres**, para armazenar os dados, e utilizaremos o **adminer**, que é uma ferramenta visual para auxiliar no gerenciamento do banco de dados.\n\nAlém disso, algumas informações da nossa configuração acima são dinâmicas, como por exemplo as informações de conexão com o banco e a porta da aplicação, para isso, vamos criar um arquivo de configuração chamado **.env**, com o seguinte conteúdo;\n```env\nAPP_PORT=8001\n\nDB_DIALECT=postgres\nDB_HOST=db_two_factor\nDB_DATABASE=two_factors\nDB_USER=root\nDB_PASSWORD=root\n```\n**Esse arquivo será bem útil posteriormente**.\n\nAgora iremos subir todos os nossos serviços. Acesse o terminal e rode o comando abaixo:\n```bash\ndocker-compose up --buid\n```\n\nOu se quiser deixar os serviços rodando em segundo plano, basta rodar o comando abaixo:\n```bash\ndocker compose up -d --build\n```\n\nAgora que estamos com nossos serviços rodando, vamos entrar no serviço onde está o *node* para começarmos a construir nossa aplicação, no terminal, rode o comando abaixo:\n```bash\ndocker exec -it authentication_project bash\n```\n**_authentication_project_ é o nome do meu serviço node, para verificar o seu, basta rodar o comando docker ps**.\n\n## Iniciando estrutura do projeto\nDepois de entrarmos no serviço do *node*, vamos rodar o seguinte comando para de fato iniciarmos o projeto:\n```bash\nnpm init -y\n```\nUm arquivo chamado **package.json** vai ser criado, ele será bem útil, por enquanto o deixaremos de lado. Em relação a organização do projeto, deixei claro que me baseei na **arquitetura hexagonal** (falarei um pouco mais posteriormente), então vamos criar diretórios que vão facilitar o entendimento do projeto, minha estrutura ficou como o da imagem abaixo:\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqoayj28fyp7604xl3ks.png)\n\n* **src/domain**: onde ficará toda a nossa regra de negócio;\n* **src/infra**: onde ficará todas as implementações das dependências do nosso projeto, irá encapsular os recursos de libs, por exemplo;\n* **tests**: onde ficará nossos testes.\n\n## Fluxo do projeto\nO fluxo do projeto será dividido em duas partes: Primeiro vamos construir a lógica de login \"tradicional\", com e-mail e senha, depois vamos construir a lógica de logar com o token.\n\nE pensando na primeira lógica do sistema, a gente vai ter uma entrada de e-mail e senha, vamos precisar buscar as informações do usuário pelo e-mail, validar sua senha, gerar um token e mandar por e-mail. Nesta breve descrição, podemos perceber que teremos uma comunicação com o banco de dados, uma validação de senha, comunicação com o serviço de e-mail e geração de token, ou seja, temos 4 dependências.\n\nVamos primeiramente definir essas \"**interfaces**\", lembrando que *JS* não possui o recurso de interface como conhecemos em outras linguagens, então dentro de **src/domain**, vamos criar alguns arquivos:\n```js\n// src/domain/iemail.js\nexport default class IEmail {\n    send(user) {\n        throw new Error('Method must be implemented!');\n    }\n}\n\n// src/domain/irepository.js\nexport default class IRepository {\n    findByEmail(email) {\n        throw Error('Method must be implemented!');\n    }\n\n    update(user) {\n        throw Error('Method must be implemented!');\n    }\n}\n\n// src/domain/ipassword-hash.js\nexport default class IPasswordHash {\n    compare(password, hash) {\n        throw Error('Method must be implemented!');\n    }\n}\n\n// src/domain/igenerate-token.js\nexport default class IGenerateToken {\n    getToken() {\n        throw Error('Method must be implemented!');\n    }\n\n    getEmailToken() {\n        throw Error('Method must be implemented!');\n    }\n}\n```\n\nBasicamente definimos nossas \"interfaces\" de comunicação. Um detalhe muito importante fica por conta da classe **IGenerateToken**, contendo 2 métodos de geração de token, isso porque pensei na seguinte lógica: quando o usuário logar, ele vai receber por e-mail um token, porém também vai receber um outro token como resposta da requisição (que será armazenada temporariamente pelo cliente), quando o usuário for fazer a segunda autenticação, ele vai precisar mandar os 2 tokens, aqui basicamente é uma forma de aumentar a segurança.\n\nOutra coisa que vamos encapsular, é em relação ao erros, eu basicamente criei 3 classes de erros, isso vai ser útil mais na frente:\n```js\n// src/domain/domain-error.js\nexport default class DomainError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n\n// src/domain/gateway-error.js\nexport default class GatewayError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n\n// invalid-argument-error.js\nexport default class InvalidArgumentError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n```\n\nTambém vamos criar uma ação para trabalhar com esses erros:\n```js\n// throw-error.js\nconst throwError = (error, message) => {\n    throw new error(message);\n};\n\nexport default throwError;\n```\n\nAgora vamos construir a classe de login:\n```js\n// src/domain/user-authentication.js\nimport IRepository from './irepository.js';\nimport IEmail from './iemail.js';\nimport IPasswordHash from './ipassword-hash.js';\nimport IGenerateToken from './igenerate-token.js';\nimport DomainError from './domain-error.js';\nimport GatewayError from './gateway-error.js';\nimport InvalidArgumentError from './invalid-argument-error.js';\nimport throwError from './throw-error.js';\n\nexport default class UserAuthentication {\n    #repository;\n    #emailGateway;\n    #hashService;\n    #tokenService;\n\n    constructor(\n        repository,\n        emailGateway,\n        passwordHash,\n        tokenService\n    ) {\n        this.#repository = repository;\n        this.#emailGateway = emailGateway;\n        this.#hashService = passwordHash;\n        this.#tokenService = tokenService;\n    }\n}\n```\n\nComo *JS* é uma linguagem de tipagem fraca, vamos criar algo que valide a instância dos objetos recebidos, para isso vamos criar um novo arquivo para fazer essa validação:\n```js\n// src/domain/intanceof.js\nconst isInstanceOf = (instance, instanceBase) => instance instanceof instanceBase;\n\nexport default isInstanceOf;\n```\n\nAgora importamos em UserAuthentication e vamos validar as entradas:\n\n```js\nimport IRepository from './irepository.js';\nimport IEmail from './iemail.js';\nimport IPasswordHash from './ipassword-hash.js';\nimport IGenerateToken from './igenerate-token.js';\nimport isInstanceOf from './instanceof.js';\nimport DomainError from './domain-error.js';\nimport GatewayError from './gateway-error.js';\nimport InvalidArgumentError from './invalid-argument-error.js';\nimport throwError from './throw-error.js';\n\nexport default class UserAuthentication {\n    #repository;\n    #emailGateway;\n    #hashService;\n    #tokenService;\n\n    constructor(\n        repository,\n        emailGateway,\n        passwordHash,\n        tokenService\n    ) {\n        this.#validateDependencies(repository, emailGateway, passwordHash, tokenService);\n        this.#repository = repository;\n        this.#emailGateway = emailGateway;\n        this.#hashService = passwordHash;\n        this.#tokenService = tokenService;\n    }\n\n    #validateDependencies(repository, emailGateway, passwordHash, tokenService) {\n        if (!this.#isInstanceOf(repository, IRepository)) {\n            throwError(DomainError, 'Invalid repository dependency');\n        }\n\n        if (!this.#isInstanceOf(emailGateway, IEmail)) {\n            throwError(DomainError, 'Invalid email gateway dependency');\n        }\n\n        if (!this.#isInstanceOf(passwordHash, IPasswordHash)) {\n            throwError(DomainError, 'Invalid hash service dependency');\n        }\n\n        if (!this.#isInstanceOf(tokenService, IGenerateToken)) {\n            throwError(DomainError, 'Invalid token service dependency');\n        }\n    }\n\n    #isInstanceOf(object, instanceBase) {\n        return isInstanceOf(object, instanceBase);\n    }\n}\n```\n\nAntes de criarmos nosso método de autenticação, vamos criar duas classes, uma que vai encapsular os dados de entrada, e outra que vai encapsular os dados do usuário que vem do banco:\n```js\n// src/domain/login-payload.js\nimport InvalidArgumentError from './invalid-argument-error.js';\nimport throwError from './throw-error.js';\n\nexport default class LoginPayload {\n    #email;\n    #password;\n\n    constructor(email, password) {\n        if (!email || !password) {\n            throwError(InvalidArgumentError, 'Fields email and password must be filled!');\n        }\n\n        this.#email = email;\n        this.#password = password;\n    }\n\n    get email() {\n        return this.#email;\n    }\n\n    get password() {\n        return this.#password;\n    }\n}\n\n// src/domain/user.js\nimport DomainError from'./domain-error.js';\nimport throwError from './throw-error.js';\n\nexport default class User {\n    token;\n    emailToken;\n\n    #id;\n    #email;\n    #password;\n    #expired;\n\n    constructor({id, email, password, token, emailToken, expired}) {\n        if (!id || !email || !password) {\n            throwError(DomainError, 'Invalid user data!')\n        }\n\n        this.#id = id;\n        this.#email = email;\n        this.#password = password;\n        this.token = token;\n        this.emailToken = emailToken;\n        this.#expired = expired;\n    }\n\n    get id() {\n        return parseInt(this.#id);\n    }\n\n    get expired() {\n        return !!this.#expired;\n    }\n\n    get email() {\n        return this.#email;\n    }\n\n    get password() {\n        return this.#password;\n    }\n}\n```\n\nImportem essas classes na nossa classe de negócio, e agora vamos implementar nossa lógica de autenticação, observe o fluxo abaixo:\n```js\nasync authenticate(loginPayload) {\n        this.#validateUserDataInput(loginPayload);\n        const registeredUser = await this.getUserRegistered(loginPayload);\n\n        try {\n            const user = this.#getUserWithUpdatedData(registeredUser);\n            await this.#repository.update(user);\n            this.#emailGateway.send(user);\n            return user.token;\n        } catch (error) {\n            throwError(GatewayError, 'Generic error, see the integrations!');\n        }\n    }\n\n    #validateUserDataInput(loginPayload) {\n        if (!this.#isInstanceOf(loginPayload, LoginPayload)) {\n            throwError(DomainError, 'Invalid payload dependency');\n        }\n    }\n\n    async getUserRegistered(user) {\n        let registeredUser = null;\n\n        try {\n            registeredUser = await this.#repository.findByEmail(user.email);\n        } catch (e) {\n            throwError(GatewayError, 'Error connection database!');\n        }\n\n        return this.#getUserValidated(registeredUser, user);\n    }\n\n    async #getUserValidated(registeredUser, user) {\n        if (!registeredUser) {\n            throwError(InvalidArgumentError, 'User not found with data sent!');\n        }\n\n        if (!this.#isInstanceOf(registeredUser, User)) {\n            throwError(DomainError, 'Invalid user instance!');\n        }\n\n        const passwordsAreEquals = await this.#hashService.compare(user.password, registeredUser.password);\n\n        if (!passwordsAreEquals) {\n            throwError(InvalidArgumentError, 'Invalid user data!');\n        }\n\n        return registeredUser;\n    }\n\n    #isInstanceOf(object, instanceBase) {\n        return isInstanceOf(object, instanceBase);\n    }\n\n    #getUserWithUpdatedData(user) {\n        return new User({\n            id: user.id,\n            email: user.email,\n            ...this.#getTokens(),\n            password: user.password,\n            expired: false\n        });\n    }\n\n    #getTokens() {\n        return {\n            token: this.#tokenService.getToken(),\n            emailToken: this.#tokenService.getEmailToken()\n        }\n    }\n}\n```\n\nTemos o método **authenticate** que recebe um objeto de entrada, é feita a validação desse objeto, depois é feita a busca do usuário pelo e-mail e novamente validamos o objeto recebido, e por último validamos a senha. Volte ao código acima e veja que a gente envolve algumas chamadas em try/catch e em caso de erro, ou validações mal sucedidas, lançamos sempre as nossas classes de erros personalizados.\n\nApós obtermos o usuário válido com a chamada do método **#getUserRegistered**, nós vamos criar um outro objeto, contendo tanto as informações do usuário do banco, como também as informações dos tokens. Tudo isso chamando o método **#getUserWithUpdatedData**, após isso, a gente chama o método de atualização do banco, depois manda os dados necessários por e-mail e retornamos um dos tokens gerados.\n\nNote que o método de envio de e-mail, não esperamos o fim da execução, pois provavelmente o envio de e-mail seja um processo demorado, que pode travar a execução do nosso sistema.\n\nAgora observem o objeto **User**, e principalmente o campo **expired**, esse campo é o responsável por verificar se os tokens enviados já foram utilizados ou não (trabalharemos nisso depois). Fazendo com que um par de tokens seja utilizado apenas uma vez.\n\nPor fim, o arquivo *user-authentication*, deverá ficar com o conteúdo abaixo:\n```js\nimport User from './user.js';\nimport IRepository from './irepository.js';\nimport IEmail from './iemail.js';\nimport IPasswordHash from './ipassword-hash.js';\nimport IGenerateToken from './igenerate-token.js';\nimport LoginPayload from './login-payload.js';\nimport isInstanceOf from './instanceof.js';\nimport DomainError from './domain-error.js';\nimport GatewayError from './gateway-error.js';\nimport InvalidArgumentError from './invalid-argument-error.js';\nimport throwError from './throw-error.js';\n\nexport default class UserAuthentication {\n    #repository;\n    #emailGateway;\n    #hashService;\n    #tokenService;\n\n    constructor(\n        repository,\n        emailGateway,\n        passwordHash,\n        tokenService\n    ) {\n        this.#validateDependencies(repository, emailGateway, passwordHash, tokenService);\n        this.#repository = repository;\n        this.#emailGateway = emailGateway;\n        this.#hashService = passwordHash;\n        this.#tokenService = tokenService;\n    }\n\n    #validateDependencies(repository, emailGateway, passwordHash, tokenService) {\n        if (!this.#isInstanceOf(repository, IRepository)) {\n            throwError(DomainError, 'Invalid repository dependency');\n        }\n\n        if (!this.#isInstanceOf(emailGateway, IEmail)) {\n            throwError(DomainError, 'Invalid email gateway dependency');\n        }\n\n        if (!this.#isInstanceOf(passwordHash, IPasswordHash)) {\n            throwError(DomainError, 'Invalid hash service dependency');\n        }\n\n        if (!this.#isInstanceOf(tokenService, IGenerateToken)) {\n            throwError(DomainError, 'Invalid token service dependency');\n        }\n    }\n\n    async authenticate(loginPayload) {\n        this.#validateUserDataInput(loginPayload);\n        const registeredUser = await this.#getUserRegistered(loginPayload);\n\n        try {\n            const user = this.#getUserWithUpdatedData(registeredUser);\n            await this.#repository.update(user);\n            this.#emailGateway.send(user);\n            return user.token;\n        } catch (error) {\n            throwError(GatewayError, 'Generic error, see the integrations!');\n        }\n    }\n\n    #validateUserDataInput(loginPayload) {\n        if (!this.#isInstanceOf(loginPayload, LoginPayload)) {\n            throwError(DomainError, 'Invalid payload dependency');\n        }\n    }\n\n    async #getUserRegistered(user) {\n        let registeredUser = null;\n\n        try {\n            registeredUser = await this.#repository.findByEmail(user.email);\n        } catch (e) {\n            throwError(GatewayError, 'Error connection database!');\n        }\n\n        return this.#getUserValidated(registeredUser, user);\n    }\n\n    async #getUserValidated(registeredUser, user) {\n        if (!registeredUser) {\n            throwError(InvalidArgumentError, 'User not found with data sent!');\n        }\n\n        if (!this.#isInstanceOf(registeredUser, User)) {\n            throwError(DomainError, 'Invalid user instance!');\n        }\n\n        const passwordsAreEquals = await this.#hashService.compare(user.password, registeredUser.password);\n\n        if (!passwordsAreEquals) {\n            throwError(InvalidArgumentError, 'Invalid user data!');\n        }\n\n        return registeredUser;\n    }\n\n    #isInstanceOf(object, instanceBase) {\n        return isInstanceOf(object, instanceBase);\n    }\n\n    #getUserWithUpdatedData(user) {\n        return new User({\n            id: user.id,\n            email: user.email,\n            ...this.#getTokens(),\n            password: user.password,\n            expired: false\n        });\n    }\n\n    #getTokens() {\n        return {\n            token: this.#tokenService.getToken(),\n            emailToken: this.#tokenService.getEmailToken()\n        }\n    }\n}\n```\n\n## Teste\nAgora que nossa lógica foi feita, vamos testar todos os fluxos. Acesse o terminal do container e rode o comando abaixo para instalar o **Jest**:\n```bash\nnpm i --save-dev jest\n```\n\nInstamos essa biblioteca somente como dependência de desenvolvimento. Outra coisa que faremos é alterar o comando padrão de testes, para que ele chame o *Jest*, então, em nosso arquivo package.json, altere ele modificando o campo *script* para isso:\n```json\n\"scripts\": {\n    \"test\": \"node --experimental-vm-modules ./node_modules/jest/bin/jest.js ./tests/* --coverage --config='{ \\\"coverageReporters\\\": [\\\"html\\\"] }'\\n\"\n  }\n```\n\nE agora vamos criar nossos testes, dentro do diretório *tests*, crie um diretório chamado *unit*, e dentro dele um diretório chamado *mocks*, essa pasta *mocks* vai servir para armazenar todas as implementações das interfaces do domínio. Poderíamos utilizar alguma lib para fazer isso, mas eu preferi fazer tudo na mão, então dentro de *mocks*, crie os arquivos abaixo contendo os seguintes códigos:\n```js\n// tests/unit/mocks/email-mock.js\nimport IEmail from '../../../src/domain/iemail.js';\n\nclass EmailMock extends IEmail {\n    throwException = false;\n\n    send(user) {\n        if (this.throwException) {\n            throw Error();\n        }\n        return Promise.resolve('Sent!');\n    }\n}\n\nexport default new EmailMock();\n\n// tests/unit/mocks/repository-mock.js\nimport IRepository from '../../../src/domain/irepository.js';\nimport User from '../../../src/domain/user.js';\n\nclass RepositoryMock extends IRepository {\n    throwException = false;\n    throwExceptionUpdate = false;\n    returnEmptyObject = false;\n    returnEmpty = false;\n\n    constructor() {\n        super();\n    }\n\n    findByEmail(email) {\n        if (this.throwException) {\n            throw Error();\n        }\n\n        if (this.returnEmpty) {\n            return '';\n        }\n\n        if (this.returnEmptyObject) {\n            return {};\n        }\n\n        const user = new User({id: 1, email: 'erandir@email.com', password: '123456'});\n\n        return Promise.resolve(user);\n    }\n\n    update(user) {\n        if (this.throwExceptionUpdate) {\n            throw Error();\n        }\n        return Promise.resolve(true);\n    }\n}\n\nexport default new RepositoryMock();\n\n// tests/unit/mocks/hash-mock.js\nimport IPasswordHash from '../../../src/domain/ipassword-hash.js';\n\nclass HashMock extends IPasswordHash {\n    passwordsAreEquals = true;\n\n    constructor() {\n        super();\n    }\n\n    compare(password, hash) {\n        return this.passwordsAreEquals;\n    }\n}\n\nexport default new HashMock();\n\n// tests/unit/mocks/token-mock.js\nimport IGenerateToken from '../../../src/domain/igenerate-token.js';\n\nclass TokenMock extends IGenerateToken {\n    constructor() {\n        super();\n    }\n\n    getToken() {\n        return '13eb4cb6-35dd-4536-97e6-0ed0e4fb1fb3'\n    }\n\n    getEmailToken() {\n        return  '4RV651gR93hDAGiTCYhmhh';\n    }\n}\n\nexport default new TokenMock();\n```\n\nAgora dentro de *tests/unit*, crie um arquivo chamado **user-authentication.test.js**, é nesse arquivo que escreveremos todos os nosso testes para a classe **UserAuthentication**:\n```js\nimport UserAuthentication from '../../src/domain/user-authentication.js';\nimport EmailMock from './mocks/email-mock.js';\nimport RepositoryMock from './mocks/repository-mock.js';\nimport HashMock from './mocks/hash-mock.js';\nimport TokenMock from './mocks/token-mock.js';\nimport LoginPayload from '../../src/domain/login-payload.js';\nconst payload = new LoginPayload('erandir@email.com', '1234567');\nconst userAuthentication = new UserAuthentication(\n    RepositoryMock,\n    EmailMock,\n    HashMock,\n    TokenMock\n);\n\ntest('Invalid object repository', function () {\n    const result = () => new UserAuthentication(\n        {},\n        EmailMock,\n        HashMock,\n        TokenMock\n    );\n    expect(result).toThrow('Invalid repository dependency');\n});\n\ntest('Invalid object email', function () {\n    const result = () => new UserAuthentication(\n        RepositoryMock,\n        {},\n        HashMock,\n        TokenMock\n    );\n    expect(result).toThrow('Invalid email gateway dependency');\n});\n\ntest('Invalid object hash', function () {\n    const result = () => new UserAuthentication(\n        RepositoryMock,\n        EmailMock,\n        {},\n        TokenMock\n    );\n    expect(result).toThrow('Invalid hash service dependency');\n});\n\ntest('Invalid object token', function () {\n    const result = () => new UserAuthentication(\n        RepositoryMock,\n        EmailMock,\n        HashMock,\n        {}\n    );\n    expect(result).toThrow('Invalid token service dependency');\n});\n\ntest('Invalid object login payload', async () => {\n    const result = async () => await userAuthentication.authenticate({});\n    expect(result).rejects.toThrow('Invalid payload dependency');\n});\n\ntest('Error exception find user', async () => {\n    RepositoryMock.throwException = true;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('Error connection database!');\n});\n\ntest('Error find user empty', async () => {\n    RepositoryMock.throwException = false;\n    RepositoryMock.returnEmpty = true;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('User not found with data sent!');\n});\n\ntest('Error user without id', async () => {\n    RepositoryMock.returnEmpty = false;\n    RepositoryMock.returnEmptyObject = true;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('Invalid user instance!');\n});\n\ntest('Error update user', async () => {\n    RepositoryMock.returnEmptyObject = false;\n    RepositoryMock.throwExceptionUpdate = true;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('Generic error, see the integrations!');\n});\n\ntest('Error email exception', async () => {\n    RepositoryMock.throwExceptionUpdate = false;\n    EmailMock.throwException = true;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('Generic error, see the integrations!');\n});\n\ntest('Error user divergent password', async () => {\n    EmailMock.throwException = false;\n    HashMock.passwordsAreEquals = false;\n    const result = async () => await userAuthentication.authenticate(payload);\n    expect(result).rejects.toThrow('Invalid user data!');\n});\n\ntest('Get token', async () => {\n    HashMock.passwordsAreEquals = true;\n    const result = await userAuthentication.authenticate(payload);\n    expect(result).toBe('13eb4cb6-35dd-4536-97e6-0ed0e4fb1fb3');\n});\n```\nImportamos as dependências e fizemos todos os testes em cima da nossa classe de negócios, seja passando dados errados, ou gerando exceção, passando por todos os caminhos errados, para só no final realizarmos o teste de caminho feliz.\n\nAntes de executarmos nossos testes, precisamos configurar a modularização do nosso projeto, que por padrão é a do **commonjs**, e em nosso caso, utilizamos a do **es6 module**, então precisamos informar isso nas configurações, modifique o arquivo **package.json** e deixe-o assim:\n```json\n{\n  \"name\": \"nome_do_seu_projeto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"test\": \"node --experimental-vm-modules ./node_modules/jest/bin/jest.js ./tests/* --coverage --config='{ \\\"coverageReporters\\\": [\\\"html\\\"] }'\\n\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"jest\": \"^29.2.2\"\n  },\n  \"type\": \"module\"\n}\n```\n\nVá ao terminal do serviço node e executar o código abaixo:\n```bash\nnpm t\n```\nSerá executado todos os teste e após isso uma pasta chamada **coverage** será criada na raiz do projeto. Dentro de **coverage**, vai ter inúmeros arquivos html, procure o **index.html** e abra ele no seu navegador. Você notará que temos um relatório de cobertura de testes, onde sabemos o que foi testado, o que falta testar, etc. Isso é muito útil.\n\n## Tópicos interessantes\nSabe-se que em JavaScript, podemos definir objetos de algumas formas diferentes, nesse projeto, fiz uso de classes, que é algo mais recente, isso porque tenho mais familiaridade com essa forma. O projeto inteiro poderia ter sido feito utilizando objetos literais, funções construtoras, etc.\n\nAinda falando sobre classes, perceba que para criar atributos e métodos privados, eu faço uso do caractere #, que também é um recurso recente. Outro detalhe fica por conta das subclasses, que sempre definimos um *construtor* e que sempre o primeiro comando é chamar o *construtor* do pai.\n\nAlém disso, percebam como estamos isolando nossa camada de regra de negócio, dependemos sempre de interfaces, isso nos possibilita simular comportamentos, o que nos ajudou nos testes.\n\nSe você é um desenvolvedor mais experiente, possivelmente pode ter notado que não implementei uma validação importante, que é se os tokens gerados são únicos, isso foi de certa forma proposital, caso alguém queira mexer no código, alterar e adicionar essa validação.\n\nE sobre a questão da modularização do projeto, caso quiséssemos utilizar a padrão, que é o **commonjs**, iriamos substituir os comando de exportar e importar, por exemplo:\n```js\n// es6 Module\nexport default class InvalidArgumentError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n\n// E para importar fazemos assim\nimport InvalidArgumentError from './invalid-argument-error.js';\n\n// Em commonjs fariamos da seguinte forma\nmodule.exports = class InvalidArgumentError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n\n// E para importar faríamos assim\nconst InvalidArgumentError = require('./invalid-argument-error.js');\n```\nExistem algumas pequenas diferenças entre usar uma ou outra, mas eu gosto de utilizar a modularização do *ES6*.\n\n## Resumo\nNeste artigo, começamos a montar nosso projeto, criamos testes, relatório de teste, aprendemos a importar e exportar módulos, validamos objetos, etc. Vale a pena notar que essa aqui foi a minha linha de raciocínio, talvez você tenha pensado em uma forma diferente de fazer tudo que fiz nessa primeira parte, você pode implementar do jeito. Continuaremos desenvolvendo nossa lógica no próximo artigo, até lá.","user":{"name":"Erandir Junior","username":"erandirjunior","twitter_username":null,"github_username":"erandirjunior","user_id":469657,"website_url":"https://www.linkedin.com/in/erandir-junior/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--_JgNtDHp--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/469657/d4bcb2eb-e6da-4515-8534-dfef3af6831f.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--D44iORih--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/469657/d4bcb2eb-e6da-4515-8534-dfef3af6831f.jpg"}}