{"type_of":"article","id":1233632,"title":"What is URL Resolving?","description":"When building a custom storefront for your e-commerce, you eventually will run into a situation where...","readable_publish_date":"Nov 7","slug":"what-is-url-resolving-22cb","path":"/vue-storefront/what-is-url-resolving-22cb","url":"https://dev.to/vue-storefront/what-is-url-resolving-22cb","comments_count":0,"public_reactions_count":0,"collection_id":14955,"published_timestamp":"2022-11-07T11:27:00Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--TIpaw0au--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiqkpc41nix6nd8bwclw.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--kNfOMpwX--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiqkpc41nix6nd8bwclw.png","canonical_url":"https://vuestorefront.io/blog/what-is-url-resolving","created_at":"2022-10-28T09:44:03Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T11:27:00Z","last_comment_at":"2022-11-07T11:27:00Z","reading_time_minutes":10,"tag_list":"vue, javascript, tutorial, opensource","tags":["vue","javascript","tutorial","opensource"],"body_html":"<p>When building a custom storefront for your e-commerce, you eventually will run into a situation where you will need to map the products in your e-commerce platform to certain pages in the storefront. So you may ask yourself: “How should I map them then?”. This is a common problem in all e-commerce websites, especially considering the growing amount of possible attributes a product can have like sizes, colors, fabric, etc. The combination of attributes is often referred as variants. To help with that problem, you can utilize the concept of URL Resolving. </p>\n\n<p>As a start, we should first get a better understanding of what actually is a URL. Knowledge about this concept will allow us to dive deeper into the second section where we will be discussing the pros and cons of certain URL Resolving approaches so that you can choose and implement the one that best suits your business needs. Finally, an example of implementing Dynamic Routing in Vue Storefront 2 will be shown and discussed.</p>\n\n<h2>\n  <a name=\"what-is-an-url\" href=\"#what-is-an-url\">\n  </a>\n  What is an URL?\n</h2>\n\n<p>A Uniform Resource Locator (URL) is the web address that we enter into a browser to access a web page. Web URLs are also called links and users will use them to access your website directly.</p>\n\n<p>URLs can have a different structure, but the most popular one can be seen below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1_JtnFD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnfctwfusspac2jfoak5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1_JtnFD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnfctwfusspac2jfoak5.png\" alt=\"URL Structure\" loading=\"lazy\" width=\"880\" height=\"299\"></a></p>\n\n<p>Let’s discuss each individual part of it:</p>\n\n<ul>\n<li>\n<strong>Protocol</strong> - thanks to it, the browser will be able to get information by using the appropriate HTTP protocol (HTTP or HTTPS which stands for secure).</li>\n<li>\n<strong>Sub Domain</strong> - you can have multiple subdomains like docs, prod, stage, test, etc. They can be useful for creating organized content that is related to your root domain.</li>\n<li>\n<strong>Root Domain</strong> - it is a unique address where a website is located.</li>\n<li>\n<strong>Top Level Domain (TLD)</strong> - usually .com, .org, .io</li>\n<li>\n<strong>Path</strong> - exact location of a certain page, subpage, or a file</li>\n</ul>\n\n<p>The structure of an URL can depend on several aspects and unique needs and I will explain some of them later in this article.</p>\n\n<h2>\n  <a name=\"what-is-a-url-resolving\" href=\"#what-is-a-url-resolving\">\n  </a>\n  What is a URL Resolving?\n</h2>\n\n<p>URL Resolving concept allows you to connect certain products in your e-commerce platform with a certain page and URL in your storefront. This means that whenever a customer on your online store will click on the product card to see more details (and possibly add this product to the cart) he/she will be redirected to an appropriate URL. </p>\n\n<p>Let’s take a look at the example from our Vue Storefront playground.</p>\n\n<ul>\n<li>\n<strong>Category Page</strong> - <a href=\"https://demo.vuestorefront.io/c/household-items\">https://demo.vuestorefront.io/c/household-items</a> - the path consists of <code>/c</code>, which stands for the category, and <code>/household-items</code> which is a category slug or category name.</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1cyTYUpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z1pxp212qjm5re09zxp.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1cyTYUpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z1pxp212qjm5re09zxp.png\" alt=\"Vue Storefront Category URL\" loading=\"lazy\" width=\"880\" height=\"574\"></a></p>\n\n<ul>\n<li>\n<strong>Product Page</strong> - <a href=\"https://demo.vuestorefront.io/p/77/fog-linen-chambray-towel-beige-stripe\">https://demo.vuestorefront.io/p/77/fog-linen-chambray-towel-beige-stripe</a> - the path consists of <code>/p</code>, which stands for product, <code>/77</code>, which is a product ID, and <code>/fog-linen-chambray-towel-beige-stripe</code> which is a product slug or name.</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uag2ZNUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svlb5q0bttizjkp42x4x.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uag2ZNUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svlb5q0bttizjkp42x4x.png\" alt=\"Vue Storefront Product URL\" loading=\"lazy\" width=\"880\" height=\"574\"></a></p>\n\n<p>Vue Storefront also supports international e-commerce so when we switch the language of our website, it will automatically update the URLs to include the correct locale, i.e. <a href=\"https://demo.vuestorefront.io/de/c/household-items\">https://demo.vuestorefront.io/de/c/household-items</a>, where <code>/de</code> is a language/region/locale.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KjUylENT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8xzz7vnorv0c6yglea.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KjUylENT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8xzz7vnorv0c6yglea.png\" alt=\"Vue Storefront Multi Language URLs\" loading=\"lazy\" width=\"880\" height=\"574\"></a></p>\n\n<p>Implementing custom dynamic routing in both Vue Storefront 2 and Nuxt 2 is pretty straightforward and it is explained really well in the following articles:</p>\n\n<ul>\n<li>Vue Storefront 2 - <a href=\"https://docs.vuestorefront.io/v2/getting-started/layouts-and-routing.html#manually-adding-and-modifying-routes\">https://docs.vuestorefront.io/v2/getting-started/layouts-and-routing.html#manually-adding-and-modifying-routes</a>\n</li>\n<li>Nuxt 2 - <a href=\"https://nuxtjs.org/docs/features/file-system-routing#extendroutes\">https://nuxtjs.org/docs/features/file-system-routing#extendroutes</a>\n</li>\n</ul>\n\n<p>In Vue Storefront, if you want to manually add your custom routes or modify some already provided, use the <code>extendRoutes</code> function in the <code>nuxt.config.js</code>. This function has two properties:</p>\n\n<ul>\n<li>\n<code>routes</code> — an array of already registered routes. You can <code>push</code> or delete entries from it.</li>\n<li>\n<code>resolve</code> — helper function for resolving Vue.js components based on their paths in the project.</li>\n</ul>\n\n<p>For the sake of example, let's assume that we created a <code>pages/AboutUs.vue</code> component, but we want to use the <code>/company/about-us</code> route instead of auto-registered <code>/aboutus</code>. There are two approaches we could take.</p>\n\n<p>The first approach is to <strong>delete the existing route</strong> and <strong>register a new route</strong> with a different path.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// nuxt.config.js</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">router</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">extendRoutes</span><span class=\"p\">(</span><span class=\"nx\">routes</span><span class=\"p\">,</span> <span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Delete automatically registered route</span>\n      <span class=\"nx\">routes</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span>\n        <span class=\"nx\">routes</span><span class=\"p\">.</span><span class=\"nx\">findIndex</span><span class=\"p\">(</span><span class=\"nx\">route</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">route</span><span class=\"p\">.</span><span class=\"nx\">path</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">/AboutUs</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n        <span class=\"mi\">1</span>\n      <span class=\"p\">);</span>\n\n      <span class=\"c1\">// Re-register the same component but with different path</span>\n      <span class=\"nx\">routes</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">AboutUs</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">/company/about-us</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">pages/AboutUs.vue</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"comparison-of-url-resolving-patterns\" href=\"#comparison-of-url-resolving-patterns\">\n  </a>\n  Comparison of URL Resolving patterns\n</h2>\n\n<p>URL Resolving can be achieved in many different ways. Let’s compare some of the popular URL Resolving patterns that can be used in e-commerce websites. Depending on your website requirements, you may implement some or all of the following patterns.</p>\n\n<p>For the comparison, let’s assume that before the slash there is something like <code>my-awesome-store.com</code> and <code>${product}</code> is a unique product slug or ID. These are the patterns that I have found being used in several e-commerce applications:</p>\n\n<ul>\n<li>\n<code>/[p/c]/${product}</code> - In this approach, the first part of the URL path is a business domain, for example, a category/collection or a product with only the first letter from the domain. After it, there is a unique product ID or a slug. This approach allows easily distinguish the certain part of the website (i.e. I am currently in the category X and the ID is Y)</li>\n<li>\n<code>/${product}</code> - In this approach, the only part of the URL path is the unique product ID or slug. This approach may not be the best if you prefer to have meaningful URLs because your URL in this approach might look like this <code>my-awesome-website/123-abc</code>\n</li>\n<li>\n<code>/p-${product}</code> - In this approach, the only part of the URL path is the unique product ID or slug and a prefix of a business domain. While this might look good, both creating links and fetching data about certain pages can be more difficult as you would have to respect add and strip a domain prefix to get a product ID. Not a big deal, but you would have to remember about it.</li>\n<li>\n<code>/${product}-p</code> - Similar pattern as the one above but in this case, we are adding an appendix with a business domain. It shares similar issues as the one above.</li>\n<li>\n<code>/any-text-p-${product}</code> - In this approach, the only part of the URL path is the unique product ID or slug, a prefix of a business domain, and some text. By going with this pattern, you will have even more unique URLs but at the cost of hard-to-read and navigate links, i.e. <code>my-awesome-store/some-text-p-123abc</code>\n</li>\n<li>\n<code>/any-text-p${product}</code> - Similar to the one above but there is no hyphen between a product letter and the product ID. It might be even harder to work with from the frontend.</li>\n<li>\n<code>/category/product/${product}</code> - In this approach, the URLs are created adequately to the actual page path so that we will have a product with a certain ID that is a part of a certain category. This may be too complex for some long names.</li>\n<li>\n<code>/category/subcategory/product/${product}</code> - Similar approach to the one above but even more nested. This kind of URL paths could work as breadcrumbs but in some cases might be too complex.</li>\n</ul>\n\n<p>These are some of the most popular URL resolving / Dynamic Routing patterns I have observed in several e-commerce websites.</p>\n\n<p>If you need internationalization in your website you can also implement the following pattern:</p>\n\n<ul>\n<li>\n<code>/en_US/*</code> - in it, as the first part of the URL path you will be adding an appropriate locale and then category/product and a product id. With this approach, you can configure different languages and locale in the frontend application and you don’t have to worry about domains (i.e. .pl/.de).</li>\n</ul>\n\n<p>However, if you do not want to implement routing in the frontend of your website, you can also implement third-party (i.e. Content Management System - CMS) based URL Resolving. It can take the whole routing issue out of the frontend but it will be a single point of failure (if CMS will be down, your whole website will be down as well). Below, you can see a visual representation of this approach:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K2QSCylX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhv8fg4oswbrkp5aoz2b.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K2QSCylX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhv8fg4oswbrkp5aoz2b.png\" alt=\"CMS acting as URL Resolver\" loading=\"lazy\" width=\"880\" height=\"589\"></a></p>\n\n<h2>\n  <a name=\"why-the-right-url-structure-is-important\" href=\"#why-the-right-url-structure-is-important\">\n  </a>\n  Why the right URL structure is important?\n</h2>\n\n<p>URL Structure is important for two main reasons; <strong>User Experience</strong> and <strong>Google Search Position</strong>. </p>\n\n<p>The first aspect is especially important for making your URL’s be logically structured and easy to navigate by the users of your website. URLs such as the one below are easy to understand for the users and include content keywords that are useful for SEO:</p>\n\n<p><strong><a href=\"https://docs.vuestorefront.io/commercetools/guide/ssr-cache.html\">https://docs.vuestorefront.io/commercetools/guide/ssr-cache.html</a></strong></p>\n\n<p>URLs such as the one below are not descriptive and can be indexed by Search Engines as duplicates:</p>\n\n<p><strong><a href=\"https://www.my-awesome-website.com/index.php?id_123\">https://www.my-awesome-website.com/index.php?id_123</a></strong></p>\n\n<p>The second aspect is even more important for SEO. Good URL structure can put your website higher in Google search results. You can read more about it here → <a href=\"https://www.semrush.com/blog/pagerank/\">https://www.semrush.com/blog/pagerank/</a>. Root domains have the most PageRank but it does not mean that you have to add all-important keywords there. Too many keywords will make your website difficult to read and crawl by Google. Instead, make sure to include what is necessary and place it under the path.</p>\n\n<p>Remember to create and update the sitemap.xml file so that your website will be correctly crawlable so that Google could keep Search Engine Results Pages up to date. If you are interested in how to add sitemap.xml to Vue Storefront 2 project, check out the following module that you can add to your project and control the sitemap easily → <a href=\"https://sitemap.nuxtjs.org/\">https://sitemap.nuxtjs.org/</a></p>\n\n<p>The right URL structure  can help Google crawl and index your website better but also mitigate the following problems:</p>\n\n<ul>\n<li>\n<p>Getting the same content multiple times - in some scenarios, two different websites can lead to the same product and it is also how Google will index it. Let’s take a look at the following example:</p>\n\n<ul>\n<li>\n<code>/p/dress</code> and <code>/p?id=456</code>\n</li>\n</ul>\n\n<p>Both URLs can lead to the same product page and Google will index it incorrectly.</p>\n\n\n</li>\n<li>\n\n<p>For some dynamic parameters or queries (like timestamps) Google Crawler may think that our store contains an infinite number of pages. Let’s take a look at the following example:</p>\n\n<ul>\n<li>\n<code>/checkout?expiresAt=10:20pm</code> and <code>/checkout?expiresAt=10:30pm</code>\n</li>\n</ul>\n\n<p>These URLs can be then treated as different pages even though the only difference is a parameter.</p>\n\n\n</li>\n<li>\n\n<p>When using fragment identifiers (#fragment) Google may not see the difference between the two URL and because of that, the content can be missed. Let’s take a look at the following example:</p>\n\n<ul>\n<li>\n<code>p/dress#red</code> and <code>p/dress#green</code>\n</li>\n</ul>\n\n<p>These two URLs even though is meant to display different products, will be indexed by Google as the same.</p>\n\n\n</li>\n</ul>\n\n<p>Working with product variants has also proven to be quite difficult in terms of correct URLs and Google searching algorithms. Variants can be implemented purely in JavaScript as a selection that will be then passed as a param or query for a request that will fetch the data from the e-commerce platform or can be accessed from the current URL. For the second approach, you can choose either of the following approaches:</p>\n\n<ul>\n<li>A path segment, such as <code>/dress/black</code>\n</li>\n<li>A query parameter, such as <code>/dress?color=black</code>\n</li>\n</ul>\n\n<p>In this situation, to show Google which variant is the best to show, you can use canonical URL’s. For example, if the default value of the <code>color</code> query parameter for a Dress is <code>red</code>, then:</p>\n\n<ul>\n<li>Use <code>/dress</code> as the canonical URL for all Dress variants</li>\n<li>For a red dress, use <code>/dress</code> (and not <code>/dress?color=red</code>)</li>\n<li>For a black dress, use <code>/dress?color=black</code> with canonical URL <code>&lt;link rel=\"canonical\" href=\"https://my-awesome-store/dress\" /&gt;</code>\n</li>\n</ul>\n\n<h2>\n  <a name=\"url-best-practices\" href=\"#url-best-practices\">\n  </a>\n  URL Best Practices\n</h2>\n\n<p>Below, I am listing some URL best practices for you to use in your website. No matter what kind of application you are building, most or all of these recommendations should make your website more crawlable and user-friendly. </p>\n\n<ol>\n<li>\n<strong>Construct a good URL structure</strong> - as explained in previous section, URL’s that are simple and self-explanatory are best for both the users and the search engines.</li>\n<li>\n<strong>Use hyphens to separate words</strong> - If your path is constructed out of several words, make sure to divide them by using hyphens.</li>\n<li>\n<strong>Don’t use stop words</strong> - Words like and, or, for are not meaningful for the SEO so make sure to avoid them.</li>\n<li>\n<strong>Use lowercase</strong> - pretty self-explanatory, instead of /About use /about.</li>\n<li>\n<strong>Redirect old URLs</strong> - In the case of out of date URLs, you can add a redirect to them so that users will be redirected to the new and up-to-date page.</li>\n<li>\n<strong>Don’t use dates in the Path</strong> - If you are building a blog or your products contain dates, do not put them into the URL path.</li>\n<li>\n<strong>Spell out numbers</strong> - If your website URL contains the number, i.e. <a href=\"http://example.com/3-best-tools\">example.com/3-best-tools</a> you can instead spell out the number like example.com/three-best-tools</li>\n<li>\n<strong>Use HTTPS</strong> - Using a secure protocol will ensure security for your users and result in better trust. </li>\n<li>\n<strong>Hide www prefix</strong> - If your website is using this prefix, you can safely hide it. Nowadays, the majority of the websites are known for being a World Wide Web resource.</li>\n<li>\n<strong>Use country domain or subdirectory</strong> - If you are building an international website, you can use a country domain (example.pl) or subdirectory (example.com/pl/)</li>\n</ol>\n\n<h2>\n  <a name=\"resources\" href=\"#resources\">\n  </a>\n  Resources\n</h2>\n\n<ul>\n<li><a href=\"https://www.designpowers.com/blog/url-best-practices\">https://www.designpowers.com/blog/url-best-practices</a></li>\n<li><a href=\"https://developers.google.com/search/docs/advanced/guidelines/url-structure\">https://developers.google.com/search/docs/advanced/guidelines/url-structure</a></li>\n<li><a href=\"https://www.meticulosity.com/blog/best-practices-ecommerce-url-structures\">https://www.meticulosity.com/blog/best-practices-ecommerce-url-structures</a></li>\n<li><a href=\"https://ecommerce-platforms.com/glossary/what-is-a-website-url\">https://ecommerce-platforms.com/glossary/what-is-a-website-url</a></li>\n<li><a href=\"https://developers.google.com/search/docs/specialty/ecommerce/designing-a-url-structure-for-ecommerce-sites\">https://developers.google.com/search/docs/specialty/ecommerce/designing-a-url-structure-for-ecommerce-sites</a></li>\n</ul>\n\n","body_markdown":"When building a custom storefront for your e-commerce, you eventually will run into a situation where you will need to map the products in your e-commerce platform to certain pages in the storefront. So you may ask yourself: “How should I map them then?”. This is a common problem in all e-commerce websites, especially considering the growing amount of possible attributes a product can have like sizes, colors, fabric, etc. The combination of attributes is often referred as variants. To help with that problem, you can utilize the concept of URL Resolving. \n\nAs a start, we should first get a better understanding of what actually is a URL. Knowledge about this concept will allow us to dive deeper into the second section where we will be discussing the pros and cons of certain URL Resolving approaches so that you can choose and implement the one that best suits your business needs. Finally, an example of implementing Dynamic Routing in Vue Storefront 2 will be shown and discussed.\n\n## What is an URL?\n\nA Uniform Resource Locator (URL) is the web address that we enter into a browser to access a web page. Web URLs are also called links and users will use them to access your website directly.\n\nURLs can have a different structure, but the most popular one can be seen below:\n\n![URL Structure](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnfctwfusspac2jfoak5.png)\n\nLet’s discuss each individual part of it:\n\n- **Protocol** - thanks to it, the browser will be able to get information by using the appropriate HTTP protocol (HTTP or HTTPS which stands for secure).\n- **Sub Domain** - you can have multiple subdomains like docs, prod, stage, test, etc. They can be useful for creating organized content that is related to your root domain.\n- **Root Domain** - it is a unique address where a website is located.\n- **Top Level Domain (TLD)** - usually .com, .org, .io\n- **Path** - exact location of a certain page, subpage, or a file\n\nThe structure of an URL can depend on several aspects and unique needs and I will explain some of them later in this article.\n\n## What is a URL Resolving?\n\nURL Resolving concept allows you to connect certain products in your e-commerce platform with a certain page and URL in your storefront. This means that whenever a customer on your online store will click on the product card to see more details (and possibly add this product to the cart) he/she will be redirected to an appropriate URL. \n\nLet’s take a look at the example from our Vue Storefront playground.\n\n- **Category Page** - [https://demo.vuestorefront.io/c/household-items](https://demo.vuestorefront.io/c/household-items) - the path consists of `/c`, which stands for the category, and `/household-items` which is a category slug or category name.\n\n![Vue Storefront Category URL](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z1pxp212qjm5re09zxp.png)\n\n- **Product Page** - [https://demo.vuestorefront.io/p/77/fog-linen-chambray-towel-beige-stripe](https://demo.vuestorefront.io/p/77/fog-linen-chambray-towel-beige-stripe) - the path consists of `/p`, which stands for product, `/77`, which is a product ID, and `/fog-linen-chambray-towel-beige-stripe` which is a product slug or name.\n\n![Vue Storefront Product URL](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svlb5q0bttizjkp42x4x.png)\n\nVue Storefront also supports international e-commerce so when we switch the language of our website, it will automatically update the URLs to include the correct locale, i.e. [https://demo.vuestorefront.io/de/c/household-items](https://demo.vuestorefront.io/de/c/household-items), where `/de` is a language/region/locale.\n\n![Vue Storefront Multi Language URLs](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8xzz7vnorv0c6yglea.png)\n\nImplementing custom dynamic routing in both Vue Storefront 2 and Nuxt 2 is pretty straightforward and it is explained really well in the following articles:\n\n- Vue Storefront 2 - [https://docs.vuestorefront.io/v2/getting-started/layouts-and-routing.html#manually-adding-and-modifying-routes](https://docs.vuestorefront.io/v2/getting-started/layouts-and-routing.html#manually-adding-and-modifying-routes)\n- Nuxt 2 - [https://nuxtjs.org/docs/features/file-system-routing#extendroutes](https://nuxtjs.org/docs/features/file-system-routing#extendroutes)\n\nIn Vue Storefront, if you want to manually add your custom routes or modify some already provided, use the `extendRoutes` function in the `nuxt.config.js`. This function has two properties:\n\n- `routes` — an array of already registered routes. You can `push` or delete entries from it.\n- `resolve` — helper function for resolving Vue.js components based on their paths in the project.\n\nFor the sake of example, let's assume that we created a `pages/AboutUs.vue` component, but we want to use the `/company/about-us` route instead of auto-registered `/aboutus`. There are two approaches we could take.\n\nThe first approach is to **delete the existing route** and **register a new route** with a different path.\n\n```tsx\n// nuxt.config.js\n\nexport default {\n  router: {\n    extendRoutes(routes, resolve) {\n      // Delete automatically registered route\n      routes.splice(\n        routes.findIndex(route => route.path === '/AboutUs'),\n        1\n      );\n\n      // Re-register the same component but with different path\n      routes.push({\n        name: 'AboutUs',\n        path: '/company/about-us',\n        component: resolve(__dirname, 'pages/AboutUs.vue')\n      });\n    }\n  }\n};\n```\n\n## Comparison of URL Resolving patterns\n\nURL Resolving can be achieved in many different ways. Let’s compare some of the popular URL Resolving patterns that can be used in e-commerce websites. Depending on your website requirements, you may implement some or all of the following patterns.\n\nFor the comparison, let’s assume that before the slash there is something like `my-awesome-store.com` and `${product}` is a unique product slug or ID. These are the patterns that I have found being used in several e-commerce applications:\n\n- `/[p/c]/${product}` - In this approach, the first part of the URL path is a business domain, for example, a category/collection or a product with only the first letter from the domain. After it, there is a unique product ID or a slug. This approach allows easily distinguish the certain part of the website (i.e. I am currently in the category X and the ID is Y)\n- `/${product}` - In this approach, the only part of the URL path is the unique product ID or slug. This approach may not be the best if you prefer to have meaningful URLs because your URL in this approach might look like this `my-awesome-website/123-abc`\n- `/p-${product}` - In this approach, the only part of the URL path is the unique product ID or slug and a prefix of a business domain. While this might look good, both creating links and fetching data about certain pages can be more difficult as you would have to respect add and strip a domain prefix to get a product ID. Not a big deal, but you would have to remember about it.\n- `/${product}-p` - Similar pattern as the one above but in this case, we are adding an appendix with a business domain. It shares similar issues as the one above.\n- `/any-text-p-${product}` - In this approach, the only part of the URL path is the unique product ID or slug, a prefix of a business domain, and some text. By going with this pattern, you will have even more unique URLs but at the cost of hard-to-read and navigate links, i.e. `my-awesome-store/some-text-p-123abc`\n- `/any-text-p${product}` - Similar to the one above but there is no hyphen between a product letter and the product ID. It might be even harder to work with from the frontend.\n- `/category/product/${product}` - In this approach, the URLs are created adequately to the actual page path so that we will have a product with a certain ID that is a part of a certain category. This may be too complex for some long names.\n- `/category/subcategory/product/${product}` - Similar approach to the one above but even more nested. This kind of URL paths could work as breadcrumbs but in some cases might be too complex.\n\nThese are some of the most popular URL resolving / Dynamic Routing patterns I have observed in several e-commerce websites.\n\nIf you need internationalization in your website you can also implement the following pattern:\n\n- `/en_US/*` - in it, as the first part of the URL path you will be adding an appropriate locale and then category/product and a product id. With this approach, you can configure different languages and locale in the frontend application and you don’t have to worry about domains (i.e. .pl/.de).\n\nHowever, if you do not want to implement routing in the frontend of your website, you can also implement third-party (i.e. Content Management System - CMS) based URL Resolving. It can take the whole routing issue out of the frontend but it will be a single point of failure (if CMS will be down, your whole website will be down as well). Below, you can see a visual representation of this approach:\n\n![CMS acting as URL Resolver](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhv8fg4oswbrkp5aoz2b.png)\n\n## Why the right URL structure is important?\n\nURL Structure is important for two main reasons; **User Experience** and **Google Search Position**. \n\nThe first aspect is especially important for making your URL’s be logically structured and easy to navigate by the users of your website. URLs such as the one below are easy to understand for the users and include content keywords that are useful for SEO:\n\n**https://docs.vuestorefront.io/commercetools/guide/ssr-cache.html**\n\nURLs such as the one below are not descriptive and can be indexed by Search Engines as duplicates:\n\n**https://www.my-awesome-website.com/index.php?id_123**\n\nThe second aspect is even more important for SEO. Good URL structure can put your website higher in Google search results. You can read more about it here → [https://www.semrush.com/blog/pagerank/](https://www.semrush.com/blog/pagerank/). Root domains have the most PageRank but it does not mean that you have to add all-important keywords there. Too many keywords will make your website difficult to read and crawl by Google. Instead, make sure to include what is necessary and place it under the path.\n\nRemember to create and update the sitemap.xml file so that your website will be correctly crawlable so that Google could keep Search Engine Results Pages up to date. If you are interested in how to add sitemap.xml to Vue Storefront 2 project, check out the following module that you can add to your project and control the sitemap easily → [https://sitemap.nuxtjs.org/](https://sitemap.nuxtjs.org/)\n\nThe right URL structure  can help Google crawl and index your website better but also mitigate the following problems:\n\n- Getting the same content multiple times - in some scenarios, two different websites can lead to the same product and it is also how Google will index it. Let’s take a look at the following example:\n    - `/p/dress` and `/p?id=456`\n    \n    Both URLs can lead to the same product page and Google will index it incorrectly.\n    \n- For some dynamic parameters or queries (like timestamps) Google Crawler may think that our store contains an infinite number of pages. Let’s take a look at the following example:\n    - `/checkout?expiresAt=10:20pm` and `/checkout?expiresAt=10:30pm`\n    \n    These URLs can be then treated as different pages even though the only difference is a parameter.\n    \n- When using fragment identifiers (#fragment) Google may not see the difference between the two URL and because of that, the content can be missed. Let’s take a look at the following example:\n    - `p/dress#red` and `p/dress#green`\n    \n    These two URLs even though is meant to display different products, will be indexed by Google as the same.\n    \n\nWorking with product variants has also proven to be quite difficult in terms of correct URLs and Google searching algorithms. Variants can be implemented purely in JavaScript as a selection that will be then passed as a param or query for a request that will fetch the data from the e-commerce platform or can be accessed from the current URL. For the second approach, you can choose either of the following approaches:\n\n- A path segment, such as `/dress/black`\n- A query parameter, such as `/dress?color=black`\n\nIn this situation, to show Google which variant is the best to show, you can use canonical URL’s. For example, if the default value of the `color` query parameter for a Dress is `red`, then:\n\n- Use `/dress` as the canonical URL for all Dress variants\n- For a red dress, use `/dress` (and not `/dress?color=red`)\n- For a black dress, use `/dress?color=black` with canonical URL `<link rel=\"canonical\" href=\"https://my-awesome-store/dress\" />`\n\n## URL Best Practices\n\nBelow, I am listing some URL best practices for you to use in your website. No matter what kind of application you are building, most or all of these recommendations should make your website more crawlable and user-friendly. \n\n1. **Construct a good URL structure** - as explained in previous section, URL’s that are simple and self-explanatory are best for both the users and the search engines.\n2. **Use hyphens to separate words** - If your path is constructed out of several words, make sure to divide them by using hyphens.\n3. **Don’t use stop words** - Words like and, or, for are not meaningful for the SEO so make sure to avoid them.\n4. **Use lowercase** - pretty self-explanatory, instead of /About use /about.\n5. **Redirect old URLs** - In the case of out of date URLs, you can add a redirect to them so that users will be redirected to the new and up-to-date page.\n6. **Don’t use dates in the Path** - If you are building a blog or your products contain dates, do not put them into the URL path.\n7. **Spell out numbers** - If your website URL contains the number, i.e. [example.com/3-best-tools](http://example.com/3-best-tools) you can instead spell out the number like example.com/three-best-tools\n8. **Use HTTPS** - Using a secure protocol will ensure security for your users and result in better trust. \n9. **Hide www prefix** - If your website is using this prefix, you can safely hide it. Nowadays, the majority of the websites are known for being a World Wide Web resource.\n10. **Use country domain or subdirectory** - If you are building an international website, you can use a country domain (example.pl) or subdirectory (example.com/pl/)\n\n## Resources\n\n- [https://www.designpowers.com/blog/url-best-practices](https://www.designpowers.com/blog/url-best-practices)\n- [https://developers.google.com/search/docs/advanced/guidelines/url-structure](https://developers.google.com/search/docs/advanced/guidelines/url-structure)\n- [https://www.meticulosity.com/blog/best-practices-ecommerce-url-structures](https://www.meticulosity.com/blog/best-practices-ecommerce-url-structures)\n- [https://ecommerce-platforms.com/glossary/what-is-a-website-url](https://ecommerce-platforms.com/glossary/what-is-a-website-url)\n- [https://developers.google.com/search/docs/specialty/ecommerce/designing-a-url-structure-for-ecommerce-sites](https://developers.google.com/search/docs/specialty/ecommerce/designing-a-url-structure-for-ecommerce-sites)\n\n\n","user":{"name":"Jakub Andrzejewski","username":"jacobandrewsky","twitter_username":"jacobandrewsky","github_username":"Baroshem","user_id":652576,"website_url":"https://pl.linkedin.com/in/jakub-andrzejewski","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rNUBqsv7--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/652576/3943bd22-a95d-4b6c-bf69-856c269cf944.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--bCb5pJgP--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/652576/3943bd22-a95d-4b6c-bf69-856c269cf944.jpeg"},"organization":{"name":"Vue Storefront","username":"vue-storefront","slug":"vue-storefront","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--WzxGn7HE--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/622/06eff8ee-9da9-4551-ae73-1ba5a427c067.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--S9SGcLBt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/622/06eff8ee-9da9-4551-ae73-1ba5a427c067.png"}}