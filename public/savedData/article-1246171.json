{"type_of":"article","id":1246171,"title":"49-Nodejs Course 2023: Database Models: Dirty Columns","description":"As we are now done with casting, there is a catch here, we don't need to make any cast to any column,...","readable_publish_date":"Nov 7","slug":"49-nodejs-course-2023-database-models-dirty-columns-2bbn","path":"/hassanzohdy/49-nodejs-course-2023-database-models-dirty-columns-2bbn","url":"https://dev.to/hassanzohdy/49-nodejs-course-2023-database-models-dirty-columns-2bbn","comments_count":0,"public_reactions_count":0,"collection_id":20274,"published_timestamp":"2022-11-07T12:38:41Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--q9tSnszX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzbl4m8jcrv2bsh7vcof.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--SACYeX5C--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzbl4m8jcrv2bsh7vcof.png","canonical_url":"https://dev.to/hassanzohdy/49-nodejs-course-2023-database-models-dirty-columns-2bbn","created_at":"2022-11-07T07:06:39Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T12:38:41Z","last_comment_at":"2022-11-07T12:38:41Z","reading_time_minutes":5,"tag_list":"node, typescript, mongodb, fastify","tags":["node","typescript","mongodb","fastify"],"body_html":"<p>As we are now done with casting, there is a catch here, we don't need to make any cast to any column, unless the column's value has changed, so we need to know which columns have changed, and this is what we call dirty columns.</p>\n\n<h2>\n  <a name=\"dirty-columns\" href=\"#dirty-columns\">\n  </a>\n  Dirty Columns\n</h2>\n\n<p>Dirty columns are the columns that have changed, so we need to know which columns have changed, and this is what we call dirty columns.</p>\n\n<p>Data are changed through multiple methods, <code>set</code>, <code>replace</code> and <code>merge</code> methods.</p>\n\n<p>We also have the <code>originalData</code> property that holds the original data, so we can compare the original data with the current data to know which columns have changed.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">areEqual</span><span class=\"p\">,</span>\n  <span class=\"nx\">except</span><span class=\"p\">,</span>\n  <span class=\"kd\">get</span><span class=\"p\">,</span>\n  <span class=\"nx\">merge</span><span class=\"p\">,</span>\n  <span class=\"nx\">only</span><span class=\"p\">,</span>\n  <span class=\"kd\">set</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mongez/reinforcements</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/**\n   * Check if the given column is a dirty column\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">isDirty</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"nx\">column</span><span class=\"p\">),</span> <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">column</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here we checked for the column in both <code>originalData</code> and <code>data</code> and compared them, if they are equal, then the column is not dirty, otherwise, it is dirty.</p>\n\n<p>We used <code>areEqual</code> function from <code>@mongez/reinforcements</code> package, it is a deep equal function, so it will compare the values deeply either objects, arrays, strings and so on.</p>\n\n<p>But what about the new models, the original data are the same as the current data, so we need to check also if the model is relatively new one or not, if so then all columns are dirty.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n  <span class=\"cm\">/**\n   * Check if the given column is a dirty column\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">isDirty</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isNewModel</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"nx\">column</span><span class=\"p\">),</span> <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">column</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We used <code>isNewModel</code> method to check if the model is new or not, if so then all columns are dirty.</p>\n\n<p>Now let's implement the 'isNewModel' method.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n  <span class=\"cm\">/**\n   * Check if the model is new or not\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">isNewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Actually, we can also use it in the save method as well.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code>\n  <span class=\"cm\">/**\n   * Perform saving operation either by updating or creating a new record in database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if the data contains the primary id column</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isNewModel</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// perform an update operation</span>\n      <span class=\"c1\">// check if the data has changed</span>\n      <span class=\"c1\">// if not changed, then do not do anything</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// creating a new document in the database</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// check for default values and merge it with the data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkDefaultValues</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now we'll go back to the cast method and check if the column is a dirty column, if so then we'll cast it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n  <span class=\"cm\">/**\n   * Cast data before saving\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">castData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">column</span> <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">casts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isDirty</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">))</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">let</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">);</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">castType</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">casts</span><span class=\"p\">[</span><span class=\"nx\">column</span><span class=\"p\">];</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">castType</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">function</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">castType</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castValue</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">castType</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And That's it.</p>\n\n<h2>\n  <a name=\"update-the-original-data-on-save\" href=\"#update-the-original-data-on-save\">\n  </a>\n  Update the original data on save\n</h2>\n\n<p>The original data is being captured from the constructor, but we need to replace it again once the user perform a save so we can make it the latest stable data for the current model.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n  <span class=\"cm\">/**\n   * Perform saving operation either by updating or creating a new record in database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if the data contains the primary id column</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isNewModel</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// perform an update operation</span>\n      <span class=\"c1\">// check if the data has changed</span>\n      <span class=\"c1\">// if not changed, then do not do anything</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// creating a new document in the database</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// check for default values and merge it with the data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkDefaultValues</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// update the original data to equal current data</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"keeping-initial-data\" href=\"#keeping-initial-data\">\n  </a>\n  Keeping Initial Data\n</h2>\n\n<p>What if we want to keep the very first data that were injected in the model? well, in that case we can create a new property called <code>initialData</code> and assign it the value of the data that were injected in the constructor.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/**\n   * Model Document Initial data\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">initialData</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">ModelDocument</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n  <span class=\"cm\">/**\n   * Constructor\n   */</span>\n  <span class=\"k\">public</span> <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">public</span> <span class=\"nx\">originalData</span><span class=\"p\">:</span> <span class=\"nb\">Partial</span><span class=\"o\">&lt;</span><span class=\"nx\">ModelDocument</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//</span>\n    <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">initialData</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In that sense, now the initial value is kept in our model untouched.</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  🎨 Conclusion\n</h2>\n\n<p>In this lesson, we learned how to implement dirty columns, and how to check if a column is dirty or not.</p>\n\n<p>We also made an update to the save method to update the original data once the user perform a save so if we want to change the data again after the save method, we can now tell that this column is dirty or not after the last save.</p>\n\n<h2>\n  <a name=\"project-repository\" href=\"#project-repository\">\n  </a>\n  🚀 Project Repository\n</h2>\n\n<p>You can find the latest updates of this project on <a href=\"https://github.com/hassanzohdy/nodejs-2023\">Github</a></p>\n\n<h2>\n  <a name=\"join-our-community\" href=\"#join-our-community\">\n  </a>\n  😍 Join our community\n</h2>\n\n<p>Join our community on <a href=\"https://discord.gg/pb2vmdfhGf\">Discord</a> to get help and support (Node Js 2023 Channel).</p>\n\n<h2>\n  <a name=\"video-course-arabic-voice\" href=\"#video-course-arabic-voice\">\n  </a>\n  🎞️ Video Course (Arabic Voice)\n</h2>\n\n<p>If you want to learn this course in video format, you can find it on <a href=\"https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz\">Youtube</a>, the course is in Arabic language.</p>\n\n<h2>\n  <a name=\"bonus-content\" href=\"#bonus-content\">\n  </a>\n  💰 Bonus Content 💰\n</h2>\n\n<p>You may have a look at these articles, it will definitely boost your knowledge and productivity.</p>\n\n<p>General Topics</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk\">Event Driven Architecture: A Practical Guide in Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi\">Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b\">After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n</a></li>\n</ul>\n\n<p>Packages &amp; Libraries</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15\">Collections: Your ultimate Javascript Arrays Manager</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e\">Supportive Is: an elegant utility to check types of values in JavaScript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3\">Localization: An agnostic i18n package to manage localization in your project</a></li>\n</ul>\n\n<p>React Js Packages</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9\">useFetcher: easiest way to fetch data in React Js</a></li>\n</ul>\n\n<p>Courses (Articles)</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k\">React Js: Let\"s Create File Manager With React Js and Node Js</a></li>\n</ul>\n\n","body_markdown":"---\ntitle: 49-Nodejs Course 2023: Database Models: Dirty Columns\npublished: true\ndescription: \nseries: Nodejs Course 2023\ntags: nodejs, typescript, mongodb, fastify\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzbl4m8jcrv2bsh7vcof.png\n# Use a ratio of 100:42 for best results.\n---\n\nAs we are now done with casting, there is a catch here, we don't need to make any cast to any column, unless the column's value has changed, so we need to know which columns have changed, and this is what we call dirty columns.\n\n## Dirty Columns\n\nDirty columns are the columns that have changed, so we need to know which columns have changed, and this is what we call dirty columns.\n\nData are changed through multiple methods, `set`, `replace` and `merge` methods.\n\nWe also have the `originalData` property that holds the original data, so we can compare the original data with the current data to know which columns have changed.\n\n```ts\n// src/core/database/model/model.ts\nimport {\n  areEqual,\n  except,\n  get,\n  merge,\n  only,\n  set,\n} from \"@mongez/reinforcements\";\n\n  /**\n   * Check if the given column is a dirty column\n   */\n  public isDirty(column: string) {\n    return areEqual(get(this.originalData, column), get(this.data, column));\n  }\n```\n\nHere we checked for the column in both `originalData` and `data` and compared them, if they are equal, then the column is not dirty, otherwise, it is dirty.\n\nWe used `areEqual` function from `@mongez/reinforcements` package, it is a deep equal function, so it will compare the values deeply either objects, arrays, strings and so on.\n\nBut what about the new models, the original data are the same as the current data, so we need to check also if the model is relatively new one or not, if so then all columns are dirty.\n\n```ts\n// src/core/database/model/model.ts\n  /**\n   * Check if the given column is a dirty column\n   */\n  public isDirty(column: string) {\n    if (this.isNewModel()) return true;\n\n    return areEqual(get(this.originalData, column), get(this.data, column));\n  }\n```\n\nWe used `isNewModel` method to check if the model is new or not, if so then all columns are dirty.\n\nNow let's implement the 'isNewModel' method.\n\n```ts\n// src/core/database/model/model.ts\n  /**\n   * Check if the model is new or not\n   */\n  public isNewModel() {\n    return !this.data._id || (this.data._id && this.isRestored);\n  }\n```\n\nActually, we can also use it in the save method as well.\n\n```ts\n\n  /**\n   * Perform saving operation either by updating or creating a new record in database\n   */\n  public async save(mergedData: Document = {}) {\n    this.merge(mergedData);\n\n    // check if the data contains the primary id column\n    if (!this.isNewModel()) {\n      // perform an update operation\n      // check if the data has changed\n      // if not changed, then do not do anything\n      if (areEqual(this.originalData, this.data)) return;\n\n      this.data.updatedAt = new Date();\n\n      this.castData();\n\n      await queryBuilder.update(\n        this.getCollectionName(),\n        {\n          _id: this.data._id,\n        },\n        this.data,\n      );\n    } else {\n      // creating a new document in the database\n      const generateNextId =\n        this.getStaticProperty(\"generateNextId\").bind(Model);\n\n      // check for default values and merge it with the data\n      this.checkDefaultValues();\n\n      // if the column does not exist, then create it\n      if (!this.data.id) {\n        this.data.id = await generateNextId();\n      }\n\n      const now = new Date();\n\n      // if the column does not exist, then create it\n      if (!this.data.createdAt) {\n        this.data.createdAt = now;\n      }\n\n      // if the column does not exist, then create it\n      if (!this.data.updatedAt) {\n        this.data.updatedAt = now;\n      }\n\n      this.castData();\n\n      this.data = await queryBuilder.create(\n        this.getCollectionName(),\n        this.data,\n      );\n    }\n  }\n```\n\nNow we'll go back to the cast method and check if the column is a dirty column, if so then we'll cast it.\n\n```ts\n// src/core/database/model/model.ts\n\n  /**\n   * Cast data before saving\n   */\n  protected castData() {\n    for (const column in this.casts) {\n      if (!this.isDirty(column)) continue;\n\n      let value = this.get(column);\n\n      if (value === undefined) continue;\n\n      const castType = this.casts[column];\n\n      if (typeof castType === \"function\") {\n        value = castType(column, value, this);\n      } else {\n        value = this.castValue(value, castType);\n      }\n\n      this.set(column, value);\n    }\n  }\n```\n\nAnd That's it.\n\n## Update the original data on save\n\nThe original data is being captured from the constructor, but we need to replace it again once the user perform a save so we can make it the latest stable data for the current model.\n\n```ts\n// src/core/database/model/model.ts\n\n  /**\n   * Perform saving operation either by updating or creating a new record in database\n   */\n  public async save(mergedData: Document = {}) {\n    this.merge(mergedData);\n\n    // check if the data contains the primary id column\n    if (!this.isNewModel()) {\n      // perform an update operation\n      // check if the data has changed\n      // if not changed, then do not do anything\n      if (areEqual(this.originalData, this.data)) return;\n\n      this.data.updatedAt = new Date();\n\n      this.castData();\n\n      await queryBuilder.update(\n        this.getCollectionName(),\n        {\n          _id: this.data._id,\n        },\n        this.data,\n      );\n    } else {\n      // creating a new document in the database\n      const generateNextId =\n        this.getStaticProperty(\"generateNextId\").bind(Model);\n\n      // check for default values and merge it with the data\n      this.checkDefaultValues();\n\n      // if the column does not exist, then create it\n      if (!this.data.id) {\n        this.data.id = await generateNextId();\n      }\n\n      const now = new Date();\n\n      // if the column does not exist, then create it\n      if (!this.data.createdAt) {\n        this.data.createdAt = now;\n      }\n\n      // if the column does not exist, then create it\n      if (!this.data.updatedAt) {\n        this.data.updatedAt = now;\n      }\n\n      this.castData();\n\n      this.data = await queryBuilder.create(\n        this.getCollectionName(),\n        this.data,\n      );\n    }\n\n    // update the original data to equal current data\n    this.originalData = this.data;\n  }\n```\n\n## Keeping Initial Data\n\nWhat if we want to keep the very first data that were injected in the model? well, in that case we can create a new property called `initialData` and assign it the value of the data that were injected in the constructor.\n\n```ts\n// src/core/database/model/model.ts\nexport default abstract class Model extends CrudModel {\n  /**\n   * Model Document Initial data\n   */\n  public initialData: Partial<ModelDocument> = {};\n\n  /**\n   * Constructor\n   */\n  public constructor(public originalData: Partial<ModelDocument> = {}) {\n    //\n    super();\n    this.data = { ...this.originalData };\n\n    this.initialData = { ...this.originalData };\n  }\n```\n\nIn that sense, now the initial value is kept in our model untouched.\n\n## 🎨 Conclusion\n\nIn this lesson, we learned how to implement dirty columns, and how to check if a column is dirty or not.\n\nWe also made an update to the save method to update the original data once the user perform a save so if we want to change the data again after the save method, we can now tell that this column is dirty or not after the last save.\n\n## 🚀 Project Repository\n\nYou can find the latest updates of this project on [Github](https://github.com/hassanzohdy/nodejs-2023)\n\n## 😍 Join our community\n\nJoin our community on [Discord](https://discord.gg/pb2vmdfhGf) to get help and support (Node Js 2023 Channel).\n\n## 🎞️ Video Course (Arabic Voice)\n\nIf you want to learn this course in video format, you can find it on [Youtube](https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz), the course is in Arabic language.\n\n## 💰 Bonus Content 💰\n\nYou may have a look at these articles, it will definitely boost your knowledge and productivity.\n\nGeneral Topics\n\n- [Event Driven Architecture: A Practical Guide in Javascript](https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk)\n- [Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript](https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi)\n- [After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n](https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b)\n\nPackages & Libraries\n\n- [Collections: Your ultimate Javascript Arrays Manager](https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15)\n- [Supportive Is: an elegant utility to check types of values in JavaScript](https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e)\n- [Localization: An agnostic i18n package to manage localization in your project](https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3)\n\n React Js Packages\n\n- [useFetcher: easiest way to fetch data in React Js](https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9)\n\nCourses (Articles)\n\n- [React Js: Let\"s Create File Manager With React Js and Node Js](https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k)\n","user":{"name":"Hasan Zohdy","username":"hassanzohdy","twitter_username":null,"github_username":"hassanzohdy","user_id":148881,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qAfPQwU1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--a0msxQIX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg"}}