{"type_of":"article","id":1246134,"title":"47-Nodejs Course 2023: Database Models: Casting Data","description":"We added a feature previously where we can set the default value, but what about casting data?       ...","readable_publish_date":"Nov 7","slug":"47-nodejs-course-2023-database-models-casting-data-21h2","path":"/hassanzohdy/47-nodejs-course-2023-database-models-casting-data-21h2","url":"https://dev.to/hassanzohdy/47-nodejs-course-2023-database-models-casting-data-21h2","comments_count":0,"public_reactions_count":0,"collection_id":20274,"published_timestamp":"2022-11-07T06:44:39Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--IAYFYBAx--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie7q0ygbsdku0geiz6hv.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--3F_vspR7--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie7q0ygbsdku0geiz6hv.png","canonical_url":"https://dev.to/hassanzohdy/47-nodejs-course-2023-database-models-casting-data-21h2","created_at":"2022-11-07T05:31:16Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T06:44:39Z","last_comment_at":"2022-11-07T06:44:39Z","reading_time_minutes":7,"tag_list":"node, typescript, mongodb, fastify","tags":["node","typescript","mongodb","fastify"],"body_html":"<p>We added a feature previously where we can set the default value, but what about casting data?</p>\n\n<h2>\n  <a name=\"what-is-casting-data\" href=\"#what-is-casting-data\">\n  </a>\n  What is Casting Data?\n</h2>\n\n<p>Casting data is when you want to change the type of data that is being stored in the database. For example, if you have a field that is a string, but you want to store it as a number, you can cast it to a <code>number</code>.</p>\n\n<p>So we can change or <code>mutate</code> the data before it is stored in the database.</p>\n\n<p>That's the whole idea.</p>\n\n<h2>\n  <a name=\"types-of-casting\" href=\"#types-of-casting\">\n  </a>\n  Types of Casting\n</h2>\n\n<p>There are multiple types, as mostly all data types in JavaScript can be listed here, but we'll do a better thing.</p>\n\n<p>We'll add standard casting types, and we'll add custom casting types, also we'll add a cast handler type as well so we can later add custom casting types.</p>\n\n<p>Now let's define it's type in the types file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/types.ts</span>\n\n<span class=\"cm\">/**\n * Custom cast handler\n */</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">CustomCast</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">,</span> <span class=\"nx\">model</span><span class=\"p\">:</span> <span class=\"nx\">Model</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kr\">any</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Cast types\n */</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">CastType</span> <span class=\"o\">=</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">bool</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">boolean</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">number</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">int</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">integer</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">float</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span>\n  <span class=\"o\">|</span> <span class=\"nx\">CustomCast</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Model Casts\n */</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Casts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">]:</span> <span class=\"nx\">CastType</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The <code>CastType</code> has a pre-defined types such as <code>string</code> and <code>number</code>, but also has a <code>CustomCast</code> type which is a function that takes the column name, the value, and the model, and returns the casted value.</p>\n\n<p>Custom Cast handler will allow us to make custom casting types, for example we can use it to generate hashed password for the user.</p>\n\n<p>But let's start with the standard types first.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Document</span><span class=\"p\">,</span> <span class=\"nx\">ModelDocument</span><span class=\"p\">,</span> <span class=\"nx\">Casts</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./types</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"cm\">/**\n   * Cast types\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">casts</span><span class=\"p\">:</span> <span class=\"nx\">Casts</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We defined a property called <code>casts</code> which is an object that has the column name as the key, and the cast type as the value.</p>\n\n<p>Now the question that remains is how do we use it?</p>\n\n<h2>\n  <a name=\"using-casting\" href=\"#using-casting\">\n  </a>\n  Using Casting\n</h2>\n\n<p>It's pretty obvious, we'll use it in the <code>save</code> method directly before the create or update process.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * Cast types\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">casts</span><span class=\"p\">:</span> <span class=\"nx\">Casts</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n  <span class=\"cm\">/**\n   * Perform saving operation either by updating or creating a new record in database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if the data contains the primary id column</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// perform an update operation</span>\n      <span class=\"c1\">// check if the data has changed</span>\n      <span class=\"c1\">// if not changed, then do not do anything</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 👇🏻 cast data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// creating a new document in the database</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// check for default values and merge it with the data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkDefaultValues</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 👇🏻 cast data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castData</span><span class=\"p\">();</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What we did here, We added a method called <code>castData</code> which will cast the data before it is saved in the database.</p>\n\n<p>Now let's define the <code>castData</code> method.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * Cast types\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">casts</span><span class=\"p\">:</span> <span class=\"nx\">Casts</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n  <span class=\"cm\">/**\n   * Cast data\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">castData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// loop through the casts</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">column</span> <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">casts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// get the cast type</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">castType</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">casts</span><span class=\"p\">[</span><span class=\"nx\">column</span><span class=\"p\">];</span>\n\n      <span class=\"c1\">// get the value</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">column</span><span class=\"p\">];</span>\n\n      <span class=\"c1\">// check if the value is undefined</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// check if the cast type is a function</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">castType</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">function</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// cast the value</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">castType</span><span class=\"p\">(</span><span class=\"nx\">column</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// cast the value</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">castValue</span><span class=\"p\">(</span><span class=\"nx\">castType</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/**\n   * Cast value\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">castValue</span><span class=\"p\">(</span><span class=\"nx\">castType</span><span class=\"p\">:</span> <span class=\"nx\">CastType</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">castType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">bool</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">boolean</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">number</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">int</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">integer</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">float</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// parse the date string</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">number</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// parse the date number</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Date</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// return the date</span>\n          <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// return the current date</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">{};</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">[];</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Woooohooo, what is the heck is going on here?</p>\n\n<p>Let's break it down.</p>\n\n<p>First, we loop through the casts, and get the cast type and the value.</p>\n\n<p>Then we check if the value is undefined, if it is, then we continue to the next iteration.</p>\n\n<p>Then we check if the cast type is a function, if it is, then we call the function and pass the column name, the value, and the model itself.</p>\n\n<p>If the cast type is not a function, then we call the <code>castValue</code> method and pass the cast type and the value which will perform our standard casting.</p>\n\n<p>Now let's understand the <code>castValue</code> method.</p>\n\n<p>Here where is the best time to use the <code>switch</code> statement.</p>\n\n<p>We check the cast type, and based on the cast type, we cast the value.</p>\n\n<p>For example, if the cast type is <code>date</code>, then we check the value type, if it is a string, then we parse it as a date, if it is a number, then we parse it as a date, if it is a date, then we return it, and if it is none of the above, then we return the current date.</p>\n\n<p>As you can see there are some casts are alias to each other like <code>bool</code> and <code>boolean</code>, <code>int</code> and <code>integer</code>, these are just for convenience, in that case we define multiple cases for the same cast type.</p>\n\n<p>Now let's give it a try.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/app/users/models/user.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Model</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">core/database</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Casts</span><span class=\"p\">,</span> <span class=\"nx\">Document</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">core/database/model/types</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">User</span> <span class=\"kd\">extends</span> <span class=\"nx\">Model</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/**\n   * Collection name\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"nx\">collectionName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">users</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/**\n   * {@inheritDoc}\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">casts</span><span class=\"p\">:</span> <span class=\"nx\">Casts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">boolean</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">isVerified</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">boolean</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">joinDate</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We defined here three casts, <code>isActive</code> will be casted to a boolean, <code>email</code> will be casted to a string, and <code>joinDate</code> will be casted to a date.</p>\n\n<p>Now let's try to save a new user.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/app/users/routes.ts</span>\n<span class=\"k\">import</span> <span class=\"nx\">User</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./models/user</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">isVerified</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"na\">joinDate</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2021-01-01</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">isActive</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span> <span class=\"c1\">// { isVerified: false, joinDate: 2021-01-01T00:00:00.000Z, isActive: true }</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And That's it!</p>\n\n<p>Actually, i just remembered one thing, the <code>boolean</code> casting we need to enhance it a little bit.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code>\n  <span class=\"cm\">/**\n   * Cast value\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">castValue</span><span class=\"p\">(</span><span class=\"nx\">castType</span><span class=\"p\">:</span> <span class=\"nx\">CastType</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">castType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">bool</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">boolean</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"c1\">// if the value is `true` in string, then turn it into boolean true</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">true</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"c1\">// if the value is `false` in string or zero, then turn it into boolean false</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">false</span><span class=\"dl\">\"</span> <span class=\"o\">||</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span> <span class=\"o\">||</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">number</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">int</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">integer</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">float</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// parse the date string</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">number</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// parse the date number</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Date</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// return the date</span>\n          <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// return the current date</span>\n          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">{};</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">[];</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We added a little check here about the value, if its <code>true</code> in string, then we need to cast it as <strong>true</strong> as boolean value, also if the value is <code>false</code> in string or zero, then we need to cast it as <strong>false</strong> as boolean value.</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  🎨 Conclusion\n</h2>\n\n<p>In this article, we learned how to cast values in our models, and we learned how to use the <code>switch</code> statement in TypeScript in practice.</p>\n\n<p>In our next article, we will learn how to use the custom cast and create password cast.</p>\n\n<h2>\n  <a name=\"project-repository\" href=\"#project-repository\">\n  </a>\n  🚀 Project Repository\n</h2>\n\n<p>You can find the latest updates of this project on <a href=\"https://github.com/hassanzohdy/nodejs-2023\">Github</a></p>\n\n<h2>\n  <a name=\"join-our-community\" href=\"#join-our-community\">\n  </a>\n  😍 Join our community\n</h2>\n\n<p>Join our community on <a href=\"https://discord.gg/pb2vmdfhGf\">Discord</a> to get help and support (Node Js 2023 Channel).</p>\n\n<h2>\n  <a name=\"video-course-arabic-voice\" href=\"#video-course-arabic-voice\">\n  </a>\n  🎞️ Video Course (Arabic Voice)\n</h2>\n\n<p>If you want to learn this course in video format, you can find it on <a href=\"https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz\">Youtube</a>, the course is in Arabic language.</p>\n\n<h2>\n  <a name=\"bonus-content\" href=\"#bonus-content\">\n  </a>\n  💰 Bonus Content 💰\n</h2>\n\n<p>You may have a look at these articles, it will definitely boost your knowledge and productivity.</p>\n\n<p>General Topics</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk\">Event Driven Architecture: A Practical Guide in Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi\">Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b\">After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n</a></li>\n</ul>\n\n<p>Packages &amp; Libraries</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15\">Collections: Your ultimate Javascript Arrays Manager</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e\">Supportive Is: an elegant utility to check types of values in JavaScript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3\">Localization: An agnostic i18n package to manage localization in your project</a></li>\n</ul>\n\n<p>React Js Packages</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9\">useFetcher: easiest way to fetch data in React Js</a></li>\n</ul>\n\n<p>Courses (Articles)</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k\">React Js: Let\"s Create File Manager With React Js and Node Js</a></li>\n</ul>\n\n","body_markdown":"---\ntitle: 47-Nodejs Course 2023: Database Models: Casting Data\npublished: true\ndescription: \nseries: Nodejs Course 2023\ntags: nodejs, typescript, mongodb, fastify\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie7q0ygbsdku0geiz6hv.png\n# Use a ratio of 100:42 for best results.\n---\n\nWe added a feature previously where we can set the default value, but what about casting data?\n\n## What is Casting Data?\n\nCasting data is when you want to change the type of data that is being stored in the database. For example, if you have a field that is a string, but you want to store it as a number, you can cast it to a `number`.\n\nSo we can change or `mutate` the data before it is stored in the database.\n\nThat's the whole idea.\n\n## Types of Casting\n\nThere are multiple types, as mostly all data types in JavaScript can be listed here, but we'll do a better thing.\n\nWe'll add standard casting types, and we'll add custom casting types, also we'll add a cast handler type as well so we can later add custom casting types.\n\nNow let's define it's type in the types file.\n\n```ts\n// src/core/database/model/types.ts\n\n/**\n * Custom cast handler\n */\nexport type CustomCast = (column: string, value: any, model: Model) => any;\n\n/**\n * Cast types\n */\nexport type CastType =\n  | \"string\"\n  | \"bool\"\n  | \"boolean\"\n  | \"number\"\n  | \"int\"\n  | \"integer\"\n  | \"float\"\n  | \"date\"\n  | \"object\"\n  | \"array\"\n  | CustomCast;\n  \n/**\n * Model Casts\n */\nexport type Casts = {\n  [column: string]: CastType;\n};\n```\n\nThe `CastType` has a pre-defined types such as `string` and `number`, but also has a `CustomCast` type which is a function that takes the column name, the value, and the model, and returns the casted value.\n\nCustom Cast handler will allow us to make custom casting types, for example we can use it to generate hashed password for the user.\n\nBut let's start with the standard types first.\n\n```ts\n// src/core/database/model/model.ts\nimport { Document, ModelDocument, Casts } from \"./types\";\n\nexport default abstract class Model extends CrudModel {\n  // ...\n  /**\n   * Cast types\n   */\n  protected casts: Casts = {};\n}\n```\n\nWe defined a property called `casts` which is an object that has the column name as the key, and the cast type as the value.\n\nNow the question that remains is how do we use it?\n\n## Using Casting\n\nIt's pretty obvious, we'll use it in the `save` method directly before the create or update process.\n\n```ts\n// src/core/database/model/model.ts\n\nexport default abstract class Model extends CrudModel {\n  // ...\n\n  /**\n   * Cast types\n   */\n  protected casts: Casts = {};\n\n  /**\n   * Perform saving operation either by updating or creating a new record in database\n   */\n  public async save(mergedData: Document = {}) {\n    this.merge(mergedData);\n\n    // check if the data contains the primary id column\n    if (this.data._id && !this.isRestored) {\n      // perform an update operation\n      // check if the data has changed\n      // if not changed, then do not do anything\n      if (areEqual(this.originalData, this.data)) return;\n\n      this.data.updatedAt = new Date();\n\n      // 👇🏻 cast data\n      this.castData();\n\n      await queryBuilder.update(\n        this.getCollectionName(),\n        {\n          _id: this.data._id,\n        },\n        this.data,\n      );\n    } else {\n      // creating a new document in the database\n      const generateNextId =\n        this.getStaticProperty(\"generateNextId\").bind(Model);\n\n      // check for default values and merge it with the data\n      this.checkDefaultValues();\n\n      // if the column does not exist, then create it\n      if (!this.data.id) {\n        this.data.id = await generateNextId();\n      }\n\n      const now = new Date();\n\n      // if the column does not exist, then create it\n      if (!this.data.createdAt) {\n        this.data.createdAt = now;\n      }\n\n      // if the column does not exist, then create it\n      if (!this.data.updatedAt) {\n        this.data.updatedAt = now;\n      }\n\n      // 👇🏻 cast data\n      this.castData();\n\n      this.data = await queryBuilder.create(\n        this.getCollectionName(),\n        this.data,\n      );\n    }\n  }\n```\n\nWhat we did here, We added a method called `castData` which will cast the data before it is saved in the database.\n\nNow let's define the `castData` method.\n\n```ts\n// src/core/database/model/model.ts\n\nexport default abstract class Model extends CrudModel {\n  // ...\n\n  /**\n   * Cast types\n   */\n  protected casts: Casts = {};\n\n  /**\n   * Cast data\n   */\n  protected castData() {\n    // loop through the casts\n    for (const column in this.casts) {\n      // get the cast type\n      const castType = this.casts[column];\n\n      // get the value\n      const value = this.data[column];\n\n      // check if the value is undefined\n      if (value === undefined) continue;\n\n      // check if the cast type is a function\n      if (typeof castType === \"function\") {\n        // cast the value\n        this.data[column] = castType(column, value, this);\n      } else {\n        // cast the value\n        this.data[column] = this.castValue(castType, value);\n      }\n    }\n  }\n\n  /**\n   * Cast value\n   */\n  protected castValue(castType: CastType, value: any) {\n    switch (castType) {\n      case \"string\":\n        return String(value);\n      case \"bool\":\n      case \"boolean\":\n        return Boolean(value);\n      case \"number\":\n        return Number(value);\n      case \"int\":\n      case \"integer\":\n        return parseInt(value);\n      case \"float\":\n        return parseFloat(value);\n      case \"date\":\n        if (typeof value === \"string\") {\n          // parse the date string\n          return new Date(value);\n        } else if (typeof value === \"number\") {\n          // parse the date number\n          return new Date(value * 1000);\n        } else if (value instanceof Date) {\n          // return the date\n          return value;\n        } else {\n          // return the current date\n          return new Date();\n        }\n      case \"object\":\n        if (!value) return {};\n\n        if (typeof value === \"string\") {\n          return JSON.parse(value);\n        }\n\n        return value;\n      case \"array\":\n        if (!value) return [];\n\n        if (typeof value === \"string\") {\n          return JSON.parse(value);\n        }\n\n        return value;\n      default:\n        return value;\n    }\n  }\n}\n```\n\nWoooohooo, what is the heck is going on here?\n\nLet's break it down.\n\nFirst, we loop through the casts, and get the cast type and the value.\n\nThen we check if the value is undefined, if it is, then we continue to the next iteration.\n\nThen we check if the cast type is a function, if it is, then we call the function and pass the column name, the value, and the model itself.\n\nIf the cast type is not a function, then we call the `castValue` method and pass the cast type and the value which will perform our standard casting.\n\nNow let's understand the `castValue` method.\n\nHere where is the best time to use the `switch` statement.\n\nWe check the cast type, and based on the cast type, we cast the value.\n\nFor example, if the cast type is `date`, then we check the value type, if it is a string, then we parse it as a date, if it is a number, then we parse it as a date, if it is a date, then we return it, and if it is none of the above, then we return the current date.\n\nAs you can see there are some casts are alias to each other like `bool` and `boolean`, `int` and `integer`, these are just for convenience, in that case we define multiple cases for the same cast type.\n\nNow let's give it a try.\n\n```ts\n// src/app/users/models/user.ts\nimport { Model } from \"core/database\";\nimport { Casts, Document } from \"core/database/model/types\";\n\nexport default class User extends Model {\n  /**\n   * Collection name\n   */\n  public static collectionName = \"users\";\n\n  /**\n   * {@inheritDoc}\n   */\n  protected casts: Casts = {\n    isActive: \"boolean\",\n    isVerified: \"boolean\",\n    joinDate: \"date\",\n  };\n}\n```\n\nWe defined here three casts, `isActive` will be casted to a boolean, `email` will be casted to a string, and `joinDate` will be casted to a date.\n\nNow let's try to save a new user.\n\n```ts\n// src/app/users/routes.ts\nimport User from './models/user';\n\nconst user = await User.create({\n  isVerified: \"\",\n  joinDate: \"2021-01-01\",\n  isActive: \"1\",\n});\n\nawait user.save();\n\nconsole.log(user.data); // { isVerified: false, joinDate: 2021-01-01T00:00:00.000Z, isActive: true }\n```\n\nAnd That's it!\n\nActually, i just remembered one thing, the `boolean` casting we need to enhance it a little bit.\n\n```ts\n\n  /**\n   * Cast value\n   */\n  protected castValue(castType: CastType, value: any) {\n    switch (castType) {\n      case \"string\":\n        return String(value);\n      case \"bool\":\n      case \"boolean\":\n        // if the value is `true` in string, then turn it into boolean true\n        if (value === \"true\") return true;\n        // if the value is `false` in string or zero, then turn it into boolean false\n        if (value === \"false\" || value === \"0\" || value === 0) return false;\n        return Boolean(value);\n      case \"number\":\n        return Number(value);\n      case \"int\":\n      case \"integer\":\n        return parseInt(value);\n      case \"float\":\n        return parseFloat(value);\n      case \"date\":\n        if (typeof value === \"string\") {\n          // parse the date string\n          return new Date(value);\n        } else if (typeof value === \"number\") {\n          // parse the date number\n          return new Date(value * 1000);\n        } else if (value instanceof Date) {\n          // return the date\n          return value;\n        } else {\n          // return the current date\n          return new Date();\n        }\n      case \"object\":\n        if (!value) return {};\n\n        if (typeof value === \"string\") {\n          return JSON.parse(value);\n        }\n\n        return value;\n      case \"array\":\n        if (!value) return [];\n\n        if (typeof value === \"string\") {\n          return JSON.parse(value);\n        }\n\n        return value;\n      default:\n        return value;\n    }\n  }\n```\n\nWe added a little check here about the value, if its `true` in string, then we need to cast it as **true** as boolean value, also if the value is `false` in string or zero, then we need to cast it as **false** as boolean value.\n\n## 🎨 Conclusion\n\nIn this article, we learned how to cast values in our models, and we learned how to use the `switch` statement in TypeScript in practice.\n\nIn our next article, we will learn how to use the custom cast and create password cast.\n\n## 🚀 Project Repository\n\nYou can find the latest updates of this project on [Github](https://github.com/hassanzohdy/nodejs-2023)\n\n## 😍 Join our community\n\nJoin our community on [Discord](https://discord.gg/pb2vmdfhGf) to get help and support (Node Js 2023 Channel).\n\n## 🎞️ Video Course (Arabic Voice)\n\nIf you want to learn this course in video format, you can find it on [Youtube](https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz), the course is in Arabic language.\n\n## 💰 Bonus Content 💰\n\nYou may have a look at these articles, it will definitely boost your knowledge and productivity.\n\nGeneral Topics\n\n- [Event Driven Architecture: A Practical Guide in Javascript](https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk)\n- [Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript](https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi)\n- [After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n](https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b)\n\nPackages & Libraries\n\n- [Collections: Your ultimate Javascript Arrays Manager](https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15)\n- [Supportive Is: an elegant utility to check types of values in JavaScript](https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e)\n- [Localization: An agnostic i18n package to manage localization in your project](https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3)\n\n React Js Packages\n\n- [useFetcher: easiest way to fetch data in React Js](https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9)\n\nCourses (Articles)\n\n- [React Js: Let\"s Create File Manager With React Js and Node Js](https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k)\n","user":{"name":"Hasan Zohdy","username":"hassanzohdy","twitter_username":null,"github_username":"hassanzohdy","user_id":148881,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qAfPQwU1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--a0msxQIX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg"}}