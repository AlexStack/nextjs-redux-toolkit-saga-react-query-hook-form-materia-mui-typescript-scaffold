{"type_of":"article","id":1078520,"title":"Build Dynamic Dependent Dropdown using React JS","description":"A cascading dropdown is a group of dropdowns where the value of one dropdown depends upon another...","readable_publish_date":"May 7","slug":"build-dynamic-dependent-dropdown-using-react-js-3d9c","path":"/jps27cse/build-dynamic-dependent-dropdown-using-react-js-3d9c","url":"https://dev.to/jps27cse/build-dynamic-dependent-dropdown-using-react-js-3d9c","comments_count":0,"public_reactions_count":11,"collection_id":null,"published_timestamp":"2022-05-07T20:06:07Z","positive_reactions_count":11,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--lybCXKVD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc6bxwtgfv1lti8uqz0f.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--MBsnFxYY--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc6bxwtgfv1lti8uqz0f.png","canonical_url":"https://dev.to/jps27cse/build-dynamic-dependent-dropdown-using-react-js-3d9c","created_at":"2022-05-07T20:06:07Z","edited_at":null,"crossposted_at":null,"published_at":"2022-05-07T20:06:07Z","last_comment_at":"2022-05-07T20:06:07Z","reading_time_minutes":2,"tag_list":"react, mui, javascript, webdev","tags":["react","mui","javascript","webdev"],"body_html":"<p>A cascading dropdown is a group of dropdowns where the value of one dropdown depends upon another dropdown value. Child dropdown values are populated based on the item selected in the parent dropdown.</p>\n\n<p>Tools and Packages :</p>\n\n<ul>\n<li><p><a href=\"https://reactjs.org/\">React</a></p></li>\n<li><p><a href=\"https://mui.com/\">Material UI (M-UI)</a></p></li>\n<li><p><a href=\"https://www.npmjs.com/package/axios\">Axios</a></p></li>\n</ul>\n\n<p><em>API Link:</em> <a href=\"https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\">API</a></p>\n\n<p>App.js<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { Autocomplete, Container, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [getCounty, setCounty] = useState([]);\n  const [getState, setState] = useState([]);\n  useEffect(() =&gt; {\n    axios\n      .get(\n        \"https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\"\n      )\n      .then((response) =&gt; {\n        // console.log(response);\n        setData(response.data);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n  }, []);\n\n  const country = [...new Set(data.map((item) =&gt; item.country))];\n  // console.log(country);\n\n  // console.log(data);\n\n  const handleCountry = (event, value) =&gt; {\n    let states = data.filter((state) =&gt; state.country === value);\n    states = [...new Set(states.map((item) =&gt; item.name))];\n    states.sort();\n\n    setState(states);\n  };\n\n  return (\n    &lt;Container&gt;\n      &lt;Typography&gt;Dependent Select Field&lt;/Typography&gt;\n      &lt;Autocomplete\n        onChange={(event, value) =&gt; handleCountry(event, value)}\n        id=\"country\"\n        getOptionLabel={(country) =&gt; `${country}`}\n        options={country}\n        isOptionEqualToValue={(option, value) =&gt; option.name === value.name}\n        noOptionsText={\"No Available Data\"}\n        renderOption={(props, country) =&gt; (\n          &lt;Box component=\"li\" {...props} key={country} value={getCounty}&gt;\n            {country}\n          &lt;/Box&gt;\n        )}\n        renderInput={(params) =&gt; &lt;TextField {...params} label=\"Search\" /&gt;}\n      /&gt;\n      &lt;Autocomplete\n        id=\"city\"\n        getOptionLabel={(getState) =&gt; `${getState}`}\n        options={getState}\n        isOptionEqualToValue={(option, value) =&gt; option.name === value.name}\n        noOptionsText={\"No Available User\"}\n        renderOption={(props, getState) =&gt; (\n          &lt;Box component=\"li\" {...props} key={getState}&gt;\n            {getState}\n          &lt;/Box&gt;\n        )}\n        renderInput={(params) =&gt; &lt;TextField {...params} label=\"City\" /&gt;}\n      /&gt;\n      {/* &lt;Autocomplete /&gt; */}\n    &lt;/Container&gt;\n  );\n}\n\nexport default App;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Github Repository Link:</strong> <a href=\"https://github.com/jps27CSE/Dependent_Input_API_React\">GitHub</a></p>\n\n","body_markdown":"A cascading dropdown is a group of dropdowns where the value of one dropdown depends upon another dropdown value. Child dropdown values are populated based on the item selected in the parent dropdown.\n\nTools and Packages :\n\n- [React](https://reactjs.org/)\n\n- [Material UI (M-UI)](https://mui.com/)\n\n- [Axios](https://www.npmjs.com/package/axios)\n\n_API Link:_ [API](https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\n)\n\nApp.js\n\n```\nimport { Autocomplete, Container, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [getCounty, setCounty] = useState([]);\n  const [getState, setState] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\n        \"https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\"\n      )\n      .then((response) => {\n        // console.log(response);\n        setData(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const country = [...new Set(data.map((item) => item.country))];\n  // console.log(country);\n\n  // console.log(data);\n\n  const handleCountry = (event, value) => {\n    let states = data.filter((state) => state.country === value);\n    states = [...new Set(states.map((item) => item.name))];\n    states.sort();\n\n    setState(states);\n  };\n\n  return (\n    <Container>\n      <Typography>Dependent Select Field</Typography>\n      <Autocomplete\n        onChange={(event, value) => handleCountry(event, value)}\n        id=\"country\"\n        getOptionLabel={(country) => `${country}`}\n        options={country}\n        isOptionEqualToValue={(option, value) => option.name === value.name}\n        noOptionsText={\"No Available Data\"}\n        renderOption={(props, country) => (\n          <Box component=\"li\" {...props} key={country} value={getCounty}>\n            {country}\n          </Box>\n        )}\n        renderInput={(params) => <TextField {...params} label=\"Search\" />}\n      />\n      <Autocomplete\n        id=\"city\"\n        getOptionLabel={(getState) => `${getState}`}\n        options={getState}\n        isOptionEqualToValue={(option, value) => option.name === value.name}\n        noOptionsText={\"No Available User\"}\n        renderOption={(props, getState) => (\n          <Box component=\"li\" {...props} key={getState}>\n            {getState}\n          </Box>\n        )}\n        renderInput={(params) => <TextField {...params} label=\"City\" />}\n      />\n      {/* <Autocomplete /> */}\n    </Container>\n  );\n}\n\nexport default App;\n```\n\n**Github Repository Link:** [GitHub](https://github.com/jps27CSE/Dependent_Input_API_React)\n","user":{"name":"Jack Pritom Soren ","username":"jps27cse","twitter_username":null,"github_username":"jps27CSE","user_id":424526,"website_url":"https://jps27.netlify.app/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UtUGFOX3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/424526/b8913717-a3b8-4a48-8805-c6bd56022d5e.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--5pPb-eF---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/424526/b8913717-a3b8-4a48-8805-c6bd56022d5e.jpg"}}