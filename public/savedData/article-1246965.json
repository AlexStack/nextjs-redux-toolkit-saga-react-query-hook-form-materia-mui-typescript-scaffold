{"type_of":"article","id":1246965,"title":"Factory Method pattern in TypeScript","description":"Introduction   The factory method pattern is a creational pattern which provides an...","readable_publish_date":"Nov 7","slug":"factory-method-pattern-in-typescript-2a1n","path":"/jmalvarez/factory-method-pattern-in-typescript-2a1n","url":"https://dev.to/jmalvarez/factory-method-pattern-in-typescript-2a1n","comments_count":0,"public_reactions_count":4,"collection_id":19997,"published_timestamp":"2022-11-07T19:18:13Z","positive_reactions_count":4,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1246965.png","canonical_url":"https://www.jmalvarez.dev/posts/factory-method-typescript","created_at":"2022-11-07T19:18:13Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T19:18:13Z","last_comment_at":"2022-11-07T19:18:13Z","reading_time_minutes":3,"tag_list":"design, architecture, typescript, javascript","tags":["design","architecture","typescript","javascript"],"body_html":"<h2>\n  <a name=\"introduction\" href=\"#introduction\">\n  </a>\n  Introduction\n</h2>\n\n<p>The factory method pattern is a creational pattern which provides an interface to create objects in a parent class. Subclasses of that class can override the method that creates the objects to change the type of object that will be created.</p>\n\n<p>This way the creation of the objects is decoupled from the rest of the code.</p>\n\n<h2>\n  <a name=\"applicability\" href=\"#applicability\">\n  </a>\n  Applicability\n</h2>\n\n<p>Use the factory method pattern when:</p>\n\n<ul>\n<li>you cannot anticipate the type of the object that will be created</li>\n<li>you want to localize the creation of the objects</li>\n<li>you want to provide an easy way of extending the type of objects that can be created</li>\n</ul>\n\n<h2>\n  <a name=\"implementation\" href=\"#implementation\">\n  </a>\n  Implementation\n</h2>\n\n<p>You can find the full example source code <a href=\"https://github.com/josemiguel-alvarez/design-patterns-typescript/blob/main/creational-patterns/factory-method.ts\">here</a>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2d4MNwsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq15xw69k3dove5qzu8v.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2d4MNwsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq15xw69k3dove5qzu8v.jpeg\" alt=\"Diagram of the factory method pattern. Credit: Vanderjoe - Wikimedia Commons\" loading=\"lazy\" width=\"500\" height=\"240\"></a></p>\n\n<p><strong>1.</strong> Define an abstract interface for the object that will be created.</p>\n\n<p>In the example I'm going to handle payments so I'm going to use the following interface:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Payment</span> <span class=\"p\">{</span>\n  <span class=\"nl\">creditCard</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>2.</strong> Define an abstract class which will have an abstract method to create the objects. In this class you can include any common logic that the objects created by the subclasses will need.</p>\n\n<p>In this example, <code>createPayment</code> is the abstract method that will be implemented by the subclasses. It could also be possible to have a default implementation of this method in the abstract class if you want to have some default setup.</p>\n\n<p>Apart from this, I'm including the method <code>completePayment</code> which will be common to all the objects created by the subclasses.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">PaymentGateway</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"kd\">abstract</span> <span class=\"nx\">createPayment</span><span class=\"p\">(</span><span class=\"nx\">creditCard</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">[]):</span> <span class=\"nx\">Payment</span><span class=\"p\">;</span>\n\n  <span class=\"k\">public</span> <span class=\"nx\">completePayment</span><span class=\"p\">(</span><span class=\"nx\">payment</span><span class=\"p\">:</span> <span class=\"nx\">Payment</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span>\n      <span class=\"s2\">`Payment with credit card </span><span class=\"p\">${</span><span class=\"nx\">payment</span><span class=\"p\">.</span><span class=\"nx\">creditCard</span><span class=\"p\">}</span><span class=\"s2\"> successfully completed using the PaymentGateway`</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>3.</strong> Define concreted implementations of the object interface that was defined in the first step.</p>\n\n<p>In the example I will have <code>PhysicalPayment</code> and <code>OnlinePayment</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">PhysicalPayment</span> <span class=\"kd\">extends</span> <span class=\"nx\">Payment</span> <span class=\"p\">{</span>\n  <span class=\"nl\">storeLocation</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">OnlinePayment</span> <span class=\"kd\">extends</span> <span class=\"nx\">Payment</span> <span class=\"p\">{</span>\n  <span class=\"nl\">email</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>4.</strong> Finally, define the subclasses of the abstract class that will implement the <code>createPayment</code> method.</p>\n\n<p>As I have two different object types, I will create two new classes: <code>PhysicalPaymentGateway</code> and <code>OnlinePaymentGateway</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">PhysicalPaymentGateway</span> <span class=\"kd\">extends</span> <span class=\"nx\">PaymentGateway</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"nx\">createPayment</span><span class=\"p\">(</span>\n    <span class=\"nx\">creditCard</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span>\n    <span class=\"nx\">storeLocation</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"p\">):</span> <span class=\"nx\">PhysicalPayment</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">creditCard</span><span class=\"p\">,</span>\n      <span class=\"nx\">storeLocation</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">OnlinePaymentGateway</span> <span class=\"kd\">extends</span> <span class=\"nx\">PaymentGateway</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"nx\">createPayment</span><span class=\"p\">(</span><span class=\"nx\">creditCard</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">email</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nx\">OnlinePayment</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">creditCard</span><span class=\"p\">,</span>\n      <span class=\"nx\">email</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>5.</strong> The factory method is now ready to be used.</p>\n\n<p>An example of how client code would create objects for the online variant:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">onlinePaymentGateway</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">OnlinePaymentGateway</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">onlinePayment</span> <span class=\"o\">=</span> <span class=\"nx\">onlinePaymentGateway</span><span class=\"p\">.</span><span class=\"nx\">createPayment</span><span class=\"p\">(</span>\n  <span class=\"mi\">987654321</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">test@example.com</span><span class=\"dl\">\"</span>\n<span class=\"p\">);</span>\n<span class=\"nx\">onlinePaymentGateway</span><span class=\"p\">.</span><span class=\"nx\">completePayment</span><span class=\"p\">(</span><span class=\"nx\">onlinePayment</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>An this is how the client would use the physical variant:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">physicalPaymentGateway</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PhysicalPaymentGateway</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">physicalPayment</span> <span class=\"o\">=</span> <span class=\"nx\">physicalPaymentGateway</span><span class=\"p\">.</span><span class=\"nx\">createPayment</span><span class=\"p\">(</span>\n  <span class=\"mi\">123456789</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span>\n<span class=\"p\">);</span>\n<span class=\"nx\">physicalPaymentGateway</span><span class=\"p\">.</span><span class=\"nx\">completePayment</span><span class=\"p\">(</span><span class=\"nx\">physicalPayment</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"advantages\" href=\"#advantages\">\n  </a>\n  Advantages\n</h2>\n\n<ul>\n<li>Client code is <strong>decoupled</strong> from concrete implementations.</li>\n<li>\n<a href=\"https://www.jmalvarez.dev/posts/single-responsibility-principle-typescript\">Single Responsibility Principle</a>: All the object creation code is placed together.</li>\n<li>\n<a href=\"https://www.jmalvarez.dev/posts/open-closed-principle\">Open/Closed Principle</a>: New types of objects can be introduced without breaking client code.</li>\n</ul>\n\n<p>As always, make sure it makes sense to use this pattern in your application. Otherwise you could be introducing unnecessary complexity.</p>\n\n<h2>\n  <a name=\"resources\" href=\"#resources\">\n  </a>\n  Resources\n</h2>\n\n<ul>\n<li><a href=\"https://github.com/josemiguel-alvarez/design-patterns-typescript/blob/main/creational-patterns/factory-method.ts\">Example source code</a></li>\n<li><a href=\"https://refactoring.guru/design-patterns/factory-method\">Abstract Factory - refactoring.guru</a></li>\n<li><a href=\"https://www.jmalvarez.dev/posts/single-responsibility-principle-typescript\">Single Responsibility Principle</a></li>\n<li><a href=\"https://www.jmalvarez.dev/posts/open-closed-principle\">Open/Closed Principle</a></li>\n</ul>\n\n","body_markdown":"## Introduction\n\nThe factory method pattern is a creational pattern which provides an interface to create objects in a parent class. Subclasses of that class can override the method that creates the objects to change the type of object that will be created.\n\nThis way the creation of the objects is decoupled from the rest of the code.\n\n## Applicability\n\nUse the factory method pattern when:\n\n- you cannot anticipate the type of the object that will be created\n- you want to localize the creation of the objects\n- you want to provide an easy way of extending the type of objects that can be created\n\n## Implementation\n\nYou can find the full example source code [here](https://github.com/josemiguel-alvarez/design-patterns-typescript/blob/main/creational-patterns/factory-method.ts).\n\n\n![Diagram of the factory method pattern. Credit: Vanderjoe - Wikimedia Commons](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq15xw69k3dove5qzu8v.jpeg)\n\n**1.** Define an abstract interface for the object that will be created.\n\nIn the example I'm going to handle payments so I'm going to use the following interface:\n\n```ts\ninterface Payment {\n  creditCard: number;\n}\n```\n\n**2.** Define an abstract class which will have an abstract method to create the objects. In this class you can include any common logic that the objects created by the subclasses will need.\n\nIn this example, `createPayment` is the abstract method that will be implemented by the subclasses. It could also be possible to have a default implementation of this method in the abstract class if you want to have some default setup.\n\nApart from this, I'm including the method `completePayment` which will be common to all the objects created by the subclasses.\n\n```ts\nabstract class PaymentGateway {\n  public abstract createPayment(creditCard: number, ...args: any[]): Payment;\n\n  public completePayment(payment: Payment): void {\n    console.log(\n      `Payment with credit card ${payment.creditCard} successfully completed using the PaymentGateway`\n    );\n  }\n}\n```\n\n**3.** Define concreted implementations of the object interface that was defined in the first step.\n\nIn the example I will have `PhysicalPayment` and `OnlinePayment`.\n\n```ts\ninterface PhysicalPayment extends Payment {\n  storeLocation: string;\n}\n\ninterface OnlinePayment extends Payment {\n  email: string;\n}\n```\n\n**4.** Finally, define the subclasses of the abstract class that will implement the `createPayment` method.\n\nAs I have two different object types, I will create two new classes: `PhysicalPaymentGateway` and `OnlinePaymentGateway`.\n\n```ts\nclass PhysicalPaymentGateway extends PaymentGateway {\n  public createPayment(\n    creditCard: number,\n    storeLocation: string\n  ): PhysicalPayment {\n    return {\n      creditCard,\n      storeLocation,\n    };\n  }\n}\n\nclass OnlinePaymentGateway extends PaymentGateway {\n  public createPayment(creditCard: number, email: string): OnlinePayment {\n    return {\n      creditCard,\n      email,\n    };\n  }\n}\n```\n\n**5.** The factory method is now ready to be used.\n\nAn example of how client code would create objects for the online variant:\n\n```ts\nconst onlinePaymentGateway = new OnlinePaymentGateway();\nconst onlinePayment = onlinePaymentGateway.createPayment(\n  987654321,\n  \"test@example.com\"\n);\nonlinePaymentGateway.completePayment(onlinePayment);\n```\n\nAn this is how the client would use the physical variant:\n\n```ts\nconst physicalPaymentGateway = new PhysicalPaymentGateway();\nconst physicalPayment = physicalPaymentGateway.createPayment(\n  123456789,\n  \"New York\"\n);\nphysicalPaymentGateway.completePayment(physicalPayment);\n```\n\n## Advantages\n\n- Client code is **decoupled** from concrete implementations.\n- [Single Responsibility Principle](https://www.jmalvarez.dev/posts/single-responsibility-principle-typescript): All the object creation code is placed together.\n- [Open/Closed Principle](https://www.jmalvarez.dev/posts/open-closed-principle): New types of objects can be introduced without breaking client code.\n\nAs always, make sure it makes sense to use this pattern in your application. Otherwise you could be introducing unnecessary complexity.\n\n## Resources\n\n- [Example source code](https://github.com/josemiguel-alvarez/design-patterns-typescript/blob/main/creational-patterns/factory-method.ts)\n- [Abstract Factory - refactoring.guru](https://refactoring.guru/design-patterns/factory-method)\n- [Single Responsibility Principle](https://www.jmalvarez.dev/posts/single-responsibility-principle-typescript)\n- [Open/Closed Principle](https://www.jmalvarez.dev/posts/open-closed-principle)\n","user":{"name":"José Miguel Álvarez Vañó","username":"jmalvarez","twitter_username":"jmalvarezdev","github_username":"josemiguel-alvarez","user_id":367379,"website_url":"https://www.jmalvarez.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--6Xsj4xrS--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/367379/a84d28ed-66a6-4d37-8ad9-5775b10a0a95.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--qTXi2ACO--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/367379/a84d28ed-66a6-4d37-8ad9-5775b10a0a95.jpeg"}}