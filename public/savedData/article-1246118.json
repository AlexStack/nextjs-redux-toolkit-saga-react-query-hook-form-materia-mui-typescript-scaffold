{"type_of":"article","id":1246118,"title":"45-Nodejs Course 2023: Database Models: Default Values","description":"Let's move to another important section, which is the default value for the model, in that sense, we...","readable_publish_date":"Nov 7","slug":"45-nodejs-course-2023-database-models-default-values-54ll","path":"/hassanzohdy/45-nodejs-course-2023-database-models-default-values-54ll","url":"https://dev.to/hassanzohdy/45-nodejs-course-2023-database-models-default-values-54ll","comments_count":0,"public_reactions_count":0,"collection_id":20274,"published_timestamp":"2022-11-07T04:52:33Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--8qa0fkCc--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzgn0vdu9ccm0yi1qibs.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--omfUR1Zu--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzgn0vdu9ccm0yi1qibs.png","canonical_url":"https://dev.to/hassanzohdy/45-nodejs-course-2023-database-models-default-values-54ll","created_at":"2022-11-07T04:52:34Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T04:52:33Z","last_comment_at":"2022-11-07T04:52:33Z","reading_time_minutes":4,"tag_list":"node, typescript, mongodb, fastify","tags":["node","typescript","mongodb","fastify"],"body_html":"<p>Let's move to another important section, which is the default value for the model, in that sense, we want to set initial values for the model, for example, we want to set the <code>published</code> column to be <code>false</code> if the column itself does not exist.</p>\n\n<p>However, this should only be done in the <code>create</code> operation, not in the <code>update</code> operation as we might later want to remove that column from that certain document.</p>\n\n<p>Now let's go and add it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Document</span><span class=\"p\">,</span> <span class=\"nx\">ModelDocument</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./types</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"cm\">/**\n   * Define Default value data that will be merged with the models' data\n   * on the create process\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">defaultValue</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We defined an empty object here which will be used to store the default values for the model.</p>\n\n<p>Now let's update the <code>save</code> method to apply the default values.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Document</span><span class=\"p\">,</span> <span class=\"nx\">ModelDocument</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./types</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Is</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mongez/supportive-is</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">areEqual</span><span class=\"p\">,</span>\n  <span class=\"nx\">except</span><span class=\"p\">,</span>\n  <span class=\"kd\">get</span><span class=\"p\">,</span>\n  <span class=\"nx\">merge</span><span class=\"p\">,</span>\n  <span class=\"nx\">only</span><span class=\"p\">,</span>\n  <span class=\"kd\">set</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mongez/reinforcements</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">Model</span> <span class=\"kd\">extends</span> <span class=\"nx\">CrudModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * Perform saving operation either by updating or creating a new record in database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if the data contains the primary id column</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// perform an update operation</span>\n      <span class=\"c1\">// check if the data has changed</span>\n      <span class=\"c1\">// if not changed, then do not do anything</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// creating a new document in the database</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// check for default values and merge it with the data</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkDefaultValues</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/**\n   * Check for default values\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">checkDefaultValues</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// if default value is empty, then do nothing</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">Is</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">defaultValue</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// merge the data with default value</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">defaultValue</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We added in the create process a new method called <code>checkDefaultValues</code> which will be called before the data is saved to the database.</p>\n\n<p>In this method, we checked if the default value property is empty, if it is, then we do nothing, otherwise, we merge the default value with the data.</p>\n\n<p>The <a href=\"https://github.com/hassanzohdy/reinforcements#merging-objects-deeply\">merge</a> will merge data deeply, so if the data already has a column, then it will not be overridden.</p>\n\n<p>Now let's give it a try!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/app/users/models/user.ts</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Model</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">core/database</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Document</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">core/database/model/types</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">User</span> <span class=\"kd\">extends</span> <span class=\"nx\">Model</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/**\n   * Collection name\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"nx\">collectionName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">users</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/**\n   * {@inheritDoc}\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">defaultValue</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">published</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We added <code>published</code> column to be true by default.</p>\n\n<p>Now let's create a new user and see what happens.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/app/users/routes.ts</span>\n<span class=\"k\">import</span> <span class=\"nx\">User</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./models/user</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">hasan</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span> <span class=\"c1\">// {id: 1, name: 'hasan', published: true, _id: '...', createdAt: '...', updatedAt: '...'}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We'll see something like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--chNZxFuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndxaqoqoa64kq7dxln1a.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--chNZxFuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndxaqoqoa64kq7dxln1a.png\" alt=\"Success user\" loading=\"lazy\" width=\"880\" height=\"264\"></a></p>\n\n<p>And that's it!</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  🎨 Conclusion\n</h2>\n\n<p>In this section, we learned how to set default values for the model, and we also learned how to use the <code>merge</code> method to merge data deeply.</p>\n\n<h2>\n  <a name=\"project-repository\" href=\"#project-repository\">\n  </a>\n  🚀 Project Repository\n</h2>\n\n<p>You can find the latest updates of this project on <a href=\"https://github.com/hassanzohdy/nodejs-2023\">Github</a></p>\n\n<h2>\n  <a name=\"join-our-community\" href=\"#join-our-community\">\n  </a>\n  😍 Join our community\n</h2>\n\n<p>Join our community on <a href=\"https://discord.gg/pb2vmdfhGf\">Discord</a> to get help and support (Node Js 2023 Channel).</p>\n\n<h2>\n  <a name=\"video-course-arabic-voice\" href=\"#video-course-arabic-voice\">\n  </a>\n  🎞️ Video Course (Arabic Voice)\n</h2>\n\n<p>If you want to learn this course in video format, you can find it on <a href=\"https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz\">Youtube</a>, the course is in Arabic language.</p>\n\n<h2>\n  <a name=\"bonus-content\" href=\"#bonus-content\">\n  </a>\n  💰 Bonus Content 💰\n</h2>\n\n<p>You may have a look at these articles, it will definitely boost your knowledge and productivity.</p>\n\n<p>General Topics</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk\">Event Driven Architecture: A Practical Guide in Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi\">Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b\">After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n</a></li>\n</ul>\n\n<p>Packages &amp; Libraries</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15\">Collections: Your ultimate Javascript Arrays Manager</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e\">Supportive Is: an elegant utility to check types of values in JavaScript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3\">Localization: An agnostic i18n package to manage localization in your project</a></li>\n</ul>\n\n<p>React Js Packages</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9\">useFetcher: easiest way to fetch data in React Js</a></li>\n</ul>\n\n<p>Courses (Articles)</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k\">React Js: Let\"s Create File Manager With React Js and Node Js</a></li>\n</ul>\n\n","body_markdown":"---\ntitle: 45-Nodejs Course 2023: Database Models: Default Values\npublished: true\ndescription: \nseries: Nodejs Course 2023\ntags: nodejs, typescript, mongodb, fastify\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzgn0vdu9ccm0yi1qibs.png\n# Use a ratio of 100:42 for best results.\n---\n\nLet's move to another important section, which is the default value for the model, in that sense, we want to set initial values for the model, for example, we want to set the `published` column to be `false` if the column itself does not exist.\n\nHowever, this should only be done in the `create` operation, not in the `update` operation as we might later want to remove that column from that certain document.\n\nNow let's go and add it.\n\n```ts\n// src/core/database/model/model.ts\nimport { Document, ModelDocument } from \"./types\";\n\nexport default abstract class Model extends CrudModel {\n  // ...\n  /**\n   * Define Default value data that will be merged with the models' data\n   * on the create process\n   */\n  public defaultValue: Document = {};\n}\n```\n\nWe defined an empty object here which will be used to store the default values for the model.\n\nNow let's update the `save` method to apply the default values.\n\n```ts\n// src/core/database/model/model.ts\nimport { Document, ModelDocument } from \"./types\";\nimport Is from \"@mongez/supportive-is\";import {\n  areEqual,\n  except,\n  get,\n  merge,\n  only,\n  set,\n} from \"@mongez/reinforcements\";\n\nexport default abstract class Model extends CrudModel {\n  // ...\n  \n  /**\n   * Perform saving operation either by updating or creating a new record in database\n   */\n  public async save(mergedData: Document = {}) {\n    this.merge(mergedData);\n\n    // check if the data contains the primary id column\n    if (this.data._id && !this.isRestored) {\n      // perform an update operation\n      // check if the data has changed\n      // if not changed, then do not do anything\n      if (areEqual(this.originalData, this.data)) return;\n\n      this.data.updatedAt = new Date();\n\n      await queryBuilder.update(\n        this.getCollectionName(),\n        {\n          _id: this.data._id,\n        },\n        this.data,\n      );\n    } else {\n      // creating a new document in the database\n      const generateNextId =\n        this.getStaticProperty(\"generateNextId\").bind(Model);\n\n      // check for default values and merge it with the data\n      this.checkDefaultValues();\n\n      // if the column does not exist, then create it\n      if (!this.data.id) {\n        this.data.id = await generateNextId();\n      }\n\n      const now = new Date();\n\n      // if the column does not exist, then create it\n      if (!this.data.createdAt) {\n        this.data.createdAt = now;\n      }\n\n      // if the column does not exist, then create it\n      if (!this.data.updatedAt) {\n        this.data.updatedAt = now;\n      }\n\n      this.data = await queryBuilder.create(\n        this.getCollectionName(),\n        this.data,\n      );\n    }\n  }\n  \n  /**\n   * Check for default values\n   */\n  protected checkDefaultValues() {\n    // if default value is empty, then do nothing\n    if (Is.empty(this.defaultValue)) return;\n\n    // merge the data with default value\n    this.data = merge(this.defaultValue, this.data);\n  }\n}\n```\n\nWe added in the create process a new method called `checkDefaultValues` which will be called before the data is saved to the database.\n\nIn this method, we checked if the default value property is empty, if it is, then we do nothing, otherwise, we merge the default value with the data.\n\nThe [merge](https://github.com/hassanzohdy/reinforcements#merging-objects-deeply) will merge data deeply, so if the data already has a column, then it will not be overridden.\n\nNow let's give it a try!\n\n```ts\n// src/app/users/models/user.ts\n\nimport { Model } from \"core/database\";\nimport { Document } from \"core/database/model/types\";\n\nexport default class User extends Model {\n  /**\n   * Collection name\n   */\n  public static collectionName = \"users\";\n\n  /**\n   * {@inheritDoc}\n   */\n  public defaultValue: Document = {\n    published: true,\n  };\n}\n```\n\nWe added `published` column to be true by default.\n\nNow let's create a new user and see what happens.\n\n```ts\n// src/app/users/routes.ts\nimport User from './models/user';\n\nconst user = await User.create({\n  name: 'hasan',\n});\n\nconsole.log(user.data); // {id: 1, name: 'hasan', published: true, _id: '...', createdAt: '...', updatedAt: '...'}\n```\n\nWe'll see something like this:\n\n![Success user](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndxaqoqoa64kq7dxln1a.png)\n\nAnd that's it!\n\n## 🎨 Conclusion\n\nIn this section, we learned how to set default values for the model, and we also learned how to use the `merge` method to merge data deeply.\n\n## 🚀 Project Repository\n\nYou can find the latest updates of this project on [Github](https://github.com/hassanzohdy/nodejs-2023)\n\n## 😍 Join our community\n\nJoin our community on [Discord](https://discord.gg/pb2vmdfhGf) to get help and support (Node Js 2023 Channel).\n\n## 🎞️ Video Course (Arabic Voice)\n\nIf you want to learn this course in video format, you can find it on [Youtube](https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz), the course is in Arabic language.\n\n## 💰 Bonus Content 💰\n\nYou may have a look at these articles, it will definitely boost your knowledge and productivity.\n\nGeneral Topics\n\n- [Event Driven Architecture: A Practical Guide in Javascript](https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk)\n- [Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript](https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi)\n- [After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n](https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b)\n\nPackages & Libraries\n\n- [Collections: Your ultimate Javascript Arrays Manager](https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15)\n- [Supportive Is: an elegant utility to check types of values in JavaScript](https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e)\n- [Localization: An agnostic i18n package to manage localization in your project](https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3)\n\n React Js Packages\n\n- [useFetcher: easiest way to fetch data in React Js](https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9)\n\nCourses (Articles)\n\n- [React Js: Let\"s Create File Manager With React Js and Node Js](https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k)\n","user":{"name":"Hasan Zohdy","username":"hassanzohdy","twitter_username":null,"github_username":"hassanzohdy","user_id":148881,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qAfPQwU1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--a0msxQIX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg"}}