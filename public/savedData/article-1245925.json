{"type_of":"article","id":1245925,"title":"A Marketer's Take on Client-Side Routing with React Router","description":"Currently, I am learning the ins and outs of ReactJS. I have built a minimal viable product using...","readable_publish_date":"Nov 7","slug":"a-marketers-take-on-client-side-routing-with-react-router-4n1b","path":"/timtran007/a-marketers-take-on-client-side-routing-with-react-router-4n1b","url":"https://dev.to/timtran007/a-marketers-take-on-client-side-routing-with-react-router-4n1b","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T03:39:14Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1245925.png","canonical_url":"https://dev.to/timtran007/a-marketers-take-on-client-side-routing-with-react-router-4n1b","created_at":"2022-11-06T22:01:02Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T03:39:14Z","last_comment_at":"2022-11-07T03:39:14Z","reading_time_minutes":5,"tag_list":"clientsiderouting, react, reactrouter","tags":["clientsiderouting","react","reactrouter"],"body_html":"<p>Currently, I am learning the ins and outs of ReactJS. I have built a minimal viable product using React called <a href=\"https://github.com/timtran007/phase-02-project-tripsave\">TripSave</a>. It is a mock application where you can add a destination, budget, current savings and an inspiring destination image to work towards that goal of saving for that trip. </p>\n\n<p>Anyways, throughout learning React, I have been building Single-Page Applications (SPAs) as practice to get really familiar with syntax and learn how to solve common problems for features such as controlled forms, when to create states, use props, perform CRUD actions, etc. However, one thing that I have noticed while writing React code is that these SPAs do not mimic a \"traditional\" website in regards to changing the browser's URL when routing to a different portion of the application.</p>\n\n<h2>\n  <a name=\"first-of-all-what-is-routing\" href=\"#first-of-all-what-is-routing\">\n  </a>\n  First of All... What is Routing?\n</h2>\n\n<p>Routing is where users are navigated to different pages on a website.</p>\n\n<p>Normally, with web pages built with HTML, CSS and vanilla JavaScript, each page created for the website lives on a server. The website uses server-side routing in order to send a GET fetch request to the server each time users navigate to different pages and this changes the URL path in the browser's URL.</p>\n\n<p>However, with client-side routing, there is only one request sent to the server at the beginning, which pulls in all the data and code necessary to conditionally render the Single-Page-Application based on features within the web application itself. Like mentioned before, this does not change the URL.</p>\n\n<h2>\n  <a name=\"react-amp-routing\" href=\"#react-amp-routing\">\n  </a>\n  React &amp; Routing\n</h2>\n\n<p>By default, there is a lot of code and work around that would go into making client-side routing mimic server-side routing within a React application. </p>\n\n<p>We won't get into those details today...</p>\n\n<p>However, we will be talking about an awesome library that was made specifically to handle routing in React that mimics a server-side approach of changing the URL's path in the browser  that users have grown accustomed to in a traditional website, while providing a better user experience. </p>\n\n<h2>\n  <a name=\"pros-amp-cons-of-clientside-routing\" href=\"#pros-amp-cons-of-clientside-routing\">\n  </a>\n  Pros &amp; Cons of Client-Side Routing\n</h2>\n\n<p>So let's dive right into it...</p>\n\n<p>Pros: </p>\n\n<ul>\n<li>Better user experience with \"lightning fast\" speed while navigating through different components (\"pages\")</li>\n<li>Developers can create animations in between the load of components allowing users to see that data is loading in a fun way. </li>\n<li>As users navigate through the React application, there are no refreshes or reloads of the \"pages\". Components are rendered quickly and does not need to talk to the server to serve new user interfaces.</li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>The initial load time could be a bit longer, since the app is making one request server request to get all data into its components. </li>\n<li>Harder to implement web analytics tracking with Single-Page-Applications.</li>\n</ul>\n\n<p>As a marketer since 2016 exploring programming, at the end of the day, we should take into consideration the end users. Therefore in my opinion, when the circumstance is right, having the appearance of lightning fast speed across navigating the website outweighs doing more work to implement web analytics (been there and done that with Google Analytics &amp; Tag Manager). </p>\n\n<p>With that, let's dive into how to create client-side routing for a React application with React Router!</p>\n\n<h2>\n  <a name=\"introducing-react-router\" href=\"#introducing-react-router\">\n  </a>\n  Introducing React Router\n</h2>\n\n<p>React Router is a library created to deliver a better user experience for React applications by allowing users to create Route components that allows users to navigate to \"different\" portions of the application. </p>\n\n<h3>\n  <a name=\"getting-started\" href=\"#getting-started\">\n  </a>\n  Getting Started\n</h3>\n\n<p>First let's make sure you have the latest version of npm</p>\n\n<p>In terminal you could do the following you can check the version of npm by writing:<br>\n<code>npm -v</code></p>\n\n<p>If you need the latest version you can write this into terminal:<br>\n<code>npm install -g npm</code></p>\n\n<p>Assuming that you have a React project already, go ahead and type the following into terminal in order download React Router version 5 package:<br>\n<code>npm install react-router-dom@5</code></p>\n<h3>\n  <a name=\"adding-react-router-to-your-react-application\" href=\"#adding-react-router-to-your-react-application\">\n  </a>\n  Adding React Router to your React Application.\n</h3>\n\n<p>There are a few components that are important in making client-side routing with React Router with your React application: BrowserRouter, Switch, Route and NavLink(Link).</p>\n<h4>\n  <a name=\"browserrouter-component\" href=\"#browserrouter-component\">\n  </a>\n  BrowserRouter Component\n</h4>\n\n<p>The BrowserRouter component allows you to wrap the components you would like to use add routing. Usually this would be the top-level component.</p>\n\n<p>So, let's go ahead and start by importing the BrowserRouter component to your top-level component and wrapping the component around the App component.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from 'react'\nimport {BrowserRouter} from 'react-router-dom'\nimport Nav from \"./Nav\"\n\nfunction App(){\n  return(\n    &lt;BrowserRouter&gt;\n      &lt;h1&gt;Welcome to the App&lt;/h1&gt;\n      &lt;Nav /&gt;\n    &lt;/BrowserRouter&gt;\n  )\n}\n\nexport default App;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"switch-amp-route-components\" href=\"#switch-amp-route-components\">\n  </a>\n  Switch &amp; Route Components\n</h4>\n\n<p>The Switch component makes sure that we only render one Route at a time, while the Route component tells us which component will be rendered on the path that matches the URL.</p>\n\n<p>Route is one of the most important components within React Router and it requires the need for a prop called exact to exactly match the path.. </p>\n\n<p><code>&lt;Route exact path=\"/\"&gt;{Home}&lt;/Route&gt;</code></p>\n\n<p>If you do not have the exact prop attached you will not be able to route to other pages because Switch is rendering only one and the Route that matches first, so if you have a path of '/', which is home (normally), without the prop you will not be able to access '/about'.</p>\n\n<p>Let's go ahead and add the components to our code above:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Nav from './Nav'\nimport Home from './\nimport Location from './Location'\nimport About from './About'\n\nfunction App(){\n  return(\n    &lt;BrowserRouter&gt;\n      &lt;Nav /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\"&gt;{Home}&lt;/Route&gt;\n        &lt;Route path=\"/location\"&gt;{Location}&lt;/Route&gt;\n        &lt;Route path=\"/about\"&gt;{About}&lt;/Route&gt;\n      &lt;/Switch&gt; \n    &lt;/BrowserRouter&gt;\n  )\n}\n\nexport default App;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"should-i-use-the-link-or-navlink-component\" href=\"#should-i-use-the-link-or-navlink-component\">\n  </a>\n  Should I Use the Link or NavLink Component?\n</h4>\n\n<p>The Link and NavLink components act like the anchor tags and href attribute. The difference between Link and NavLink is the whether you want the selected link to be highlighted our not. </p>\n\n<p>If you do, you can use NavLink with the prop of activeClassName to see what is currently showing. Otherwise, they have the same functionality. </p>\n\n<p>So let's go ahead and add the NavLinks to our Nav.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction Nav(){\n  return(\n    &lt;nav&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/\" activeClassName=\"active\"&gt;\n          Home\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/location\" activeClassName=\"active\"&gt;\n          Location\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/about\" activeClassName=\"active\"&gt;\n          About\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>Again, client-side routing can provide an amazing experience for users navigating through a Single-Page Application with \"lightning fast\" speeds rendering various components based on routes. </p>\n\n<h2>\n  <a name=\"tldr\" href=\"#tldr\">\n  </a>\n  TLDR;\n</h2>\n\n<h3>\n  <a name=\"using-browserrouter-switch-amp-route-components\" href=\"#using-browserrouter-switch-amp-route-components\">\n  </a>\n  Using BrowserRouter, Switch &amp; Route Components\n</h3>\n\n<p>Use BrowserRouter component to wrap the top-level component where you want to use Routes.</p>\n\n<p>Use Switch and Route components to create paths for components that match what you want to see in browser's URL, while making sure it loads one Route at a time.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Nav from './Nav'\nimport Home from './\nimport Location from './Location'\nimport About from './About'\n\nfunction App(){\n  return(\n    &lt;BrowserRouter&gt;\n      &lt;Nav /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\"&gt;{Home}&lt;/Route&gt;\n        &lt;Route path=\"/location\"&gt;{Location}&lt;/Route&gt;\n        &lt;Route path=\"/about\"&gt;{About}&lt;/Route&gt;\n      &lt;/Switch&gt; \n    &lt;/BrowserRouter&gt;\n  )\n}\n\nexport default App;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"using-navlink-or-link-components\" href=\"#using-navlink-or-link-components\">\n  </a>\n  Using NavLink or Link Components\n</h3>\n\n<p>Use NavLink or Link to create \"anchor tags\" with the \"to\" prop to point where the link takes a user.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction Nav(){\n  return(\n    &lt;nav&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/\" activeClassName=\"active\"&gt;\n          Home\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/location\" activeClassName=\"active\"&gt;\n          Location\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;NavLink to=\"/about\" activeClassName=\"active\"&gt;\n          About\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","body_markdown":"Currently, I am learning the ins and outs of ReactJS. I have built a minimal viable product using React called [TripSave](https://github.com/timtran007/phase-02-project-tripsave). It is a mock application where you can add a destination, budget, current savings and an inspiring destination image to work towards that goal of saving for that trip. \n\nAnyways, throughout learning React, I have been building Single-Page Applications (SPAs) as practice to get really familiar with syntax and learn how to solve common problems for features such as controlled forms, when to create states, use props, perform CRUD actions, etc. However, one thing that I have noticed while writing React code is that these SPAs do not mimic a \"traditional\" website in regards to changing the browser's URL when routing to a different portion of the application.\n\n## First of All... What is Routing?\nRouting is where users are navigated to different pages on a website.\n\nNormally, with web pages built with HTML, CSS and vanilla JavaScript, each page created for the website lives on a server. The website uses server-side routing in order to send a GET fetch request to the server each time users navigate to different pages and this changes the URL path in the browser's URL.\n\nHowever, with client-side routing, there is only one request sent to the server at the beginning, which pulls in all the data and code necessary to conditionally render the Single-Page-Application based on features within the web application itself. Like mentioned before, this does not change the URL.\n\n## React & Routing\n\nBy default, there is a lot of code and work around that would go into making client-side routing mimic server-side routing within a React application. \n\nWe won't get into those details today...\n\nHowever, we will be talking about an awesome library that was made specifically to handle routing in React that mimics a server-side approach of changing the URL's path in the browser  that users have grown accustomed to in a traditional website, while providing a better user experience. \n\n## Pros & Cons of Client-Side Routing\nSo let's dive right into it...\n\nPros: \n- Better user experience with \"lightning fast\" speed while navigating through different components (\"pages\")\n- Developers can create animations in between the load of components allowing users to see that data is loading in a fun way. \n- As users navigate through the React application, there are no refreshes or reloads of the \"pages\". Components are rendered quickly and does not need to talk to the server to serve new user interfaces.\n\nCons:\n- The initial load time could be a bit longer, since the app is making one request server request to get all data into its components. \n- Harder to implement web analytics tracking with Single-Page-Applications.\n\nAs a marketer since 2016 exploring programming, at the end of the day, we should take into consideration the end users. Therefore in my opinion, when the circumstance is right, having the appearance of lightning fast speed across navigating the website outweighs doing more work to implement web analytics (been there and done that with Google Analytics & Tag Manager). \n\nWith that, let's dive into how to create client-side routing for a React application with React Router!\n\n## Introducing React Router\n\nReact Router is a library created to deliver a better user experience for React applications by allowing users to create Route components that allows users to navigate to \"different\" portions of the application. \n\n### Getting Started\nFirst let's make sure you have the latest version of npm\n\nIn terminal you could do the following you can check the version of npm by writing:\n`npm -v`\n\nIf you need the latest version you can write this into terminal:\n`npm install -g npm`\n\nAssuming that you have a React project already, go ahead and type the following into terminal in order download React Router version 5 package:\n`npm install react-router-dom@5`\n\n### Adding React Router to your React Application. \nThere are a few components that are important in making client-side routing with React Router with your React application: BrowserRouter, Switch, Route and NavLink(Link).\n\n#### BrowserRouter Component\nThe BrowserRouter component allows you to wrap the components you would like to use add routing. Usually this would be the top-level component.\n\nSo, let's go ahead and start by importing the BrowserRouter component to your top-level component and wrapping the component around the App component.\n\n```\nimport React from 'react'\nimport {BrowserRouter} from 'react-router-dom'\nimport Nav from \"./Nav\"\n\nfunction App(){\n  return(\n    <BrowserRouter>\n      <h1>Welcome to the App</h1>\n      <Nav />\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n```\n\n#### Switch & Route Components\nThe Switch component makes sure that we only render one Route at a time, while the Route component tells us which component will be rendered on the path that matches the URL.\n\nRoute is one of the most important components within React Router and it requires the need for a prop called exact to exactly match the path.. \n\n`<Route exact path=\"/\">{Home}</Route>`\n\nIf you do not have the exact prop attached you will not be able to route to other pages because Switch is rendering only one and the Route that matches first, so if you have a path of '/', which is home (normally), without the prop you will not be able to access '/about'.\n\nLet's go ahead and add the components to our code above:\n\n```\nimport React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Nav from './Nav'\nimport Home from './\nimport Location from './Location'\nimport About from './About'\n\nfunction App(){\n  return(\n    <BrowserRouter>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\">{Home}</Route>\n        <Route path=\"/location\">{Location}</Route>\n        <Route path=\"/about\">{About}</Route>\n      </Switch> \n    </BrowserRouter>\n  )\n}\n\nexport default App;\n```\n\n#### Should I Use the Link or NavLink Component?\nThe Link and NavLink components act like the anchor tags and href attribute. The difference between Link and NavLink is the whether you want the selected link to be highlighted our not. \n\nIf you do, you can use NavLink with the prop of activeClassName to see what is currently showing. Otherwise, they have the same functionality. \n\nSo let's go ahead and add the NavLinks to our Nav. \n\n```\nimport React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction Nav(){\n  return(\n    <nav>\n      <ul>\n        <li>\n          <NavLink to=\"/\" activeClassName=\"active\">\n          Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/location\" activeClassName=\"active\">\n          Location\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\" activeClassName=\"active\">\n          About\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n```\n\n## Conclusion\n\nAgain, client-side routing can provide an amazing experience for users navigating through a Single-Page Application with \"lightning fast\" speeds rendering various components based on routes. \n\n##TLDR;\n\n### Using BrowserRouter, Switch & Route Components\nUse BrowserRouter component to wrap the top-level component where you want to use Routes.\n\nUse Switch and Route components to create paths for components that match what you want to see in browser's URL, while making sure it loads one Route at a time.\n\n```\nimport React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Nav from './Nav'\nimport Home from './\nimport Location from './Location'\nimport About from './About'\n\nfunction App(){\n  return(\n    <BrowserRouter>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\">{Home}</Route>\n        <Route path=\"/location\">{Location}</Route>\n        <Route path=\"/about\">{About}</Route>\n      </Switch> \n    </BrowserRouter>\n  )\n}\n\nexport default App;\n```\n\n### Using NavLink or Link Components\nUse NavLink or Link to create \"anchor tags\" with the \"to\" prop to point where the link takes a user.\n\n```\nimport React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction Nav(){\n  return(\n    <nav>\n      <ul>\n        <li>\n          <NavLink to=\"/\" activeClassName=\"active\">\n          Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/location\" activeClassName=\"active\">\n          Location\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\" activeClassName=\"active\">\n          About\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n```\n\n\n\n\n\n\n","user":{"name":"Tim","username":"timtran007","twitter_username":null,"github_username":"timtran007","user_id":945193,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--m95MeUmt--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/945193/d550a4e8-7c02-43d4-b8ed-93a59f9bf4ee.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--h_ZZFwAW--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/945193/d550a4e8-7c02-43d4-b8ed-93a59f9bf4ee.jpeg"}}