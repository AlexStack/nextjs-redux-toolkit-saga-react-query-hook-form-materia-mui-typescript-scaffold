{"type_of":"article","id":1239481,"title":"Type-checking Lambda permissions with Typescript","description":"Using the Typescript compiler to catch missing Lambda permissions in a serverless CDK setup.","readable_publish_date":"Nov 4","slug":"type-checking-lambda-permissions-with-typescript-2de7","path":"/spalladino/type-checking-lambda-permissions-with-typescript-2de7","url":"https://dev.to/spalladino/type-checking-lambda-permissions-with-typescript-2de7","comments_count":0,"public_reactions_count":2,"collection_id":null,"published_timestamp":"2022-11-04T14:00:00Z","positive_reactions_count":2,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1239481.png","canonical_url":"https://dev.to/spalladino/type-checking-lambda-permissions-with-typescript-2de7","created_at":"2022-11-02T02:04:35Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-04T14:00:00Z","last_comment_at":"2022-11-04T14:00:00Z","reading_time_minutes":7,"tag_list":"serverless, cdk, typescript","tags":["serverless","cdk","typescript"],"body_html":"<h2>\n  <a name=\"tldr\" href=\"#tldr\">\n  </a>\n  TL;DR\n</h2>\n\n<p>With Typescript, we can define the permissions granted to our lambda functions in our serverless apps using types. This lets us <strong>type-check access to resources</strong>, raising at compile-time any errors caused by missing permissions.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// We define our app permissions as objects</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ProductsAccess</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">Products</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kd\">const</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">MailerAccess</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">Mailer</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kd\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// And we restrict access to any resource by requiring those permissions</span>\n<span class=\"nx\">getProductStore</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">_policy</span><span class=\"p\">:</span> <span class=\"k\">typeof</span> <span class=\"nx\">ProductsAccess</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">DynamoProductStore</span><span class=\"p\">();</span>\n<span class=\"nx\">getMailService</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">_policy</span><span class=\"p\">:</span> <span class=\"k\">typeof</span> <span class=\"nx\">MailerAccess</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">SESMailer</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Then we define the type of policies required by our lambda as an argument</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">lambdaHandler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Event</span><span class=\"p\">,</span> <span class=\"nx\">policies</span><span class=\"p\">:</span> <span class=\"k\">typeof</span> <span class=\"nx\">ProductsAccess</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// And use those policies when requesting access to a resource</span>\n  <span class=\"c1\">// so the compiler catches if we try to access a resource for which we don't have the required policy</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">getProductStore</span><span class=\"p\">(</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Next line fails to compile since our policies do not include acess to the mail service!</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">mailer</span> <span class=\"o\">=</span> <span class=\"nx\">getMailService</span><span class=\"p\">(</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And since we have defined our policies in code as part of each lambda handler, we can declare all parameters for each lambda in its handler file and <strong>use CDK to go through them and create the associated resources</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/api/get-product.ts</span>\n<span class=\"c1\">// We attach the lambda parameters to the handler function</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"nx\">makeHandler</span><span class=\"p\">(</span><span class=\"nx\">lambdaHandler</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">policies</span><span class=\"p\">:</span> <span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">,</span>\n  <span class=\"na\">httpMethod</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">logicalName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GetProductFunction</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">resourcePath</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">products/{id}</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"nx\">__filename</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// bin/stack.ts</span>\n<span class=\"c1\">// And we iterate through all handlers and create the associated lambda</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MyStack</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../lib/my-stack</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">handlers</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../src/api</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">App</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MyStack</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">MyStack</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">handler</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">(</span><span class=\"nx\">handlers</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"nx\">stack</span><span class=\"p\">.</span><span class=\"nx\">makeFunction</span><span class=\"p\">(</span><span class=\"nx\">handler</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// lib/stack.ts</span>\n<span class=\"c1\">// We build into the stack the logic to add each new lambda</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MyStack</span> <span class=\"kd\">extends</span> <span class=\"nx\">Stack</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"nx\">makeFunction</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">HandlerParams</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">NodejsFunction</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">logicalName</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">relative</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">..</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">entry</span><span class=\"p\">),</span>\n      <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getFunctionSettings</span><span class=\"p\">(),</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">grantRights</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">resourceForPath</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">resourcePath</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">addMethod</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">httpMethod</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">LambdaIntegration</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This lets us define each Lambda in our application, along with its required permissions, in the same file where we declare the handler function, and <strong>leverage the type checker to catch any missing permissions</strong>.</p>\n\n<p>So if you find this interesting, read on for the longer version, or check out <a href=\"https://github.com/spalladino/serverless-typescript-demo/\">this fork</a> of the AWS <code>serverless-typescript-demo</code> for a full code sample.</p>\n\n<h2>\n  <a name=\"the-problem-with-permissions-errors\" href=\"#the-problem-with-permissions-errors\">\n  </a>\n  The problem with permissions errors\n</h2>\n\n<p>A common error when building serverless applications is missing a permission for accessing a resource in a lambda function. These errors are particularly annoying because they show up late in the development lifecycle, since unit or local tests do not uncover permissions errors: you depend on integration tests to check that your lambdas have all the rights needed to run properly. An error here requires a full redeploy of the stack and a retest, which takes valuable developer time.</p>\n\n<p>Moving these errors to earlier in the development cycle yields a faster feedback loop. In this article, we'll explore how to catch these errors at compile time leveraging the Typescript type checker, and take it one step further by integrating our new typed permissions directly into our CDK stack definition.</p>\n\n<h2>\n  <a name=\"typing-permissions\" href=\"#typing-permissions\">\n  </a>\n  Typing permissions\n</h2>\n\n<p>Let's start by defining our application permissions as Typescript types. For the sake of the example, let's say we have a <code>Products</code> DynamoDB table in our application. We'll define two permissions, <code>ReadProducts</code> and <code>WriteProducts</code>, and use them to define a read-only and a full-access policy.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ReadOnlyProducts</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">ReadProducts</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kd\">const</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ReadWriteProducts</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">,</span> <span class=\"na\">WriteProducts</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kd\">const</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Note the <code>as const</code> in the declarations. This ensures that the type of each policy requires a <code>true</code> value for each property, and not any boolean.</p>\n\n<p>We could have defined our policies as just an enumeration of permissions instead of using an object as we did above. But using objects like this plays nicely with the type system: a policy that extends another with additional permissions will also extend it in the eyes of the compiler.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">function</span> <span class=\"nx\">listProducts</span><span class=\"p\">(</span><span class=\"nx\">policy</span><span class=\"p\">:</span> <span class=\"k\">typeof</span> <span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">requiresReadProducts</span><span class=\"p\">(</span><span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">);</span> <span class=\"c1\">// Works</span>\n<span class=\"nx\">requiresReadProducts</span><span class=\"p\">(</span><span class=\"nx\">ReadWriteProducts</span><span class=\"p\">);</span> <span class=\"c1\">// Works, since RW extends RO!</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can define whatever arbitrary permissions you need for your application. These can go about sending emails, managing users, or pushing notifications. And you can combine them freely into policies. We'll worry about converting them into actual IAM policies later.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Example of a policy needed for running a UserManager</span>\n<span class=\"kd\">const</span> <span class=\"nx\">UserManagerPolicy</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">ReadUsers</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">WriteUsers</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">SendEmails</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">PushNotifications</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kd\">const</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"checking-permissions-when-accessing-resources\" href=\"#checking-permissions-when-accessing-resources\">\n  </a>\n  Checking permissions when accessing resources\n</h2>\n\n<p>Once we have our sets of application permissions defined, we can now enforce them to request access to resources in our code.</p>\n\n<p>Going back to the example from the previous section, we can abstract access to the <code>Products</code> table behind a <code>ProductStore</code>, with a DynamoDB-based default implementation.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ProductStore</span> <span class=\"p\">{</span>\n  <span class=\"nl\">getProduct</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Product</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">getProducts</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Product</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">putProduct</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">:</span> <span class=\"nx\">Product</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">deleteProduct</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can also restrict the interface above to getter methods, which we will use if the client has read-only permissions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">ReadOnlyProductStore</span> <span class=\"o\">=</span> <span class=\"nb\">Pick</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductStore</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">getProduct</span><span class=\"dl\">'</span> <span class=\"o\">|</span> <span class=\"dl\">'</span><span class=\"s1\">getProducts</span><span class=\"dl\">'</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now is where things get interesting: we can define a function that returns a read-only or full <code>ProductStore</code> depending on the <strong>type</strong> of the policies supplied by the caller:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getProductStore</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">Policy</span> <span class=\"kd\">extends</span> <span class=\"k\">typeof</span> <span class=\"nx\">ReadOnlyProducts</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">_policy</span><span class=\"p\">:</span> <span class=\"nx\">Policy</span><span class=\"p\">):</span> \n  <span class=\"nx\">Policy</span> <span class=\"kd\">extends</span> <span class=\"k\">typeof</span> <span class=\"nx\">ReadWriteProducts</span> \n    <span class=\"p\">?</span> <span class=\"nx\">ProductStore</span> \n    <span class=\"p\">:</span> <span class=\"nx\">ReadOnlyProductStore</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">DynamoProductStore</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Note that we don't even use the policy parameter in the body of the function, since actual permissions will be checked by the AWS policies we define. What we are doing here is asking the type system to check if the user has read-only or read-write permissions on the <code>Products</code> table, and return the corresponding interface. On runtime, we just return the same implementation.</p>\n\n<p>This achieves our goal of restricting access to resources based on the <strong>type</strong> of the policies we're working with, which raises any permission errors during compile-time.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Works</span>\n<span class=\"nx\">getProductStore</span><span class=\"p\">(</span><span class=\"nx\">ReadWriteProducts</span><span class=\"p\">).</span><span class=\"nx\">putProduct</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Property 'putProduct' does not exist on type 'ReadOnlyProductStore'</span>\n<span class=\"nx\">getProductStore</span><span class=\"p\">(</span><span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">).</span><span class=\"nx\">putProduct</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Argument of type '{ readonly ReadUsers: true; }' is not assignable to parameter of type '{ readonly ReadProducts: true; }'</span>\n<span class=\"nx\">getProductStore</span><span class=\"p\">(</span><span class=\"nx\">ReadWriteUsers</span><span class=\"p\">).</span><span class=\"nx\">putProduct</span><span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"declaring-permissions-for-each-lambda\" href=\"#declaring-permissions-for-each-lambda\">\n  </a>\n  Declaring permissions for each lambda\n</h2>\n\n<p>The most straightforward way to use this pattern is to declare, for each lambda, which set of permissions we will be granting it. This serves as a documentation attached to each function, which we can use to easily determine which policies we need to define in our infra-as-code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">lambdaHandler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">APIGatewayProxyEvent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// We declare the policies for this lambda once</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">policies</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">ReadOnlyProducts</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">UserManagerPolicy</span> <span class=\"p\">};</span>\n\n  <span class=\"c1\">// And use them whenever we need to instantiate a resource</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">service</span> <span class=\"o\">=</span> <span class=\"nx\">getService</span><span class=\"p\">(</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>But since we are already defining these policies in code, we can take this an extra step and use them to actually generate the policies in our infra-as-code template. As a matter of fact, we can extend this to generate the entire function template from a single source of truth.</p>\n\n<h2>\n  <a name=\"integrating-with-cdk\" href=\"#integrating-with-cdk\">\n  </a>\n  Integrating with CDK\n</h2>\n\n<p>Our goal will be to write the policies for each lambda in a single place, and 1) have the type checker verify that we have the required policies for accessing all resources we need and 2) generate these policies in our infra-as-code template. Since we're already working with Typescript, we'll use CDK as our infra-as-code tool.</p>\n\n<p>To do this, we'll attach the policies to the exported handler function, so we can query them when building our stack from CDK.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/api/get-product.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">policies</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">ReadOnlyProducts</span> <span class=\"p\">};</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">APIGatewayProxyEvent</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">lambdaHandler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">policies</span><span class=\"p\">);</span>\n<span class=\"nx\">handler</span><span class=\"p\">.</span><span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">policies</span> <span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">handler</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So when we define our stack using CDK constructs, we can import each handler and define its IAM permissions from the ones we exported.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// lib/stack.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">handler</span> <span class=\"k\">as</span> <span class=\"nx\">getProduct</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../src/api/get-product</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// We define our resources in the stack constructor</span>\n<span class=\"kd\">const</span> <span class=\"nx\">productsTable</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Table</span><span class=\"p\">(...);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">api</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">RestApi</span><span class=\"p\">(...);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">getProductFunction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">NodejsFunction</span><span class=\"p\">(</span>\n  <span class=\"k\">this</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">GetProductsFunction</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">{</span> <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">./src/api/get-products.ts</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">settings</span> <span class=\"p\">},</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">api</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">resourceForPath</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">products/{id}</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">addMethod</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">LambdaIntegration</span><span class=\"p\">(</span><span class=\"nx\">getProductFunction</span><span class=\"p\">));</span>\n\n<span class=\"c1\">// A helper function translates from our custom policies</span>\n<span class=\"c1\">// to the actual IAM permissions to be created</span>\n<span class=\"kd\">const</span> <span class=\"nx\">grantRights</span><span class=\"p\">(</span><span class=\"nx\">lambda</span><span class=\"p\">,</span> <span class=\"nx\">policies</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">policies</span><span class=\"p\">.</span><span class=\"nx\">ReadProducts</span><span class=\"p\">)</span> <span class=\"nx\">productsTable</span><span class=\"p\">.</span><span class=\"nx\">grantReadData</span><span class=\"p\">(</span><span class=\"nx\">lambda</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">policies</span><span class=\"p\">.</span><span class=\"nx\">WriteProducts</span><span class=\"p\">)</span> <span class=\"nx\">productsTable</span><span class=\"p\">.</span><span class=\"nx\">grantWriteData</span><span class=\"p\">(</span><span class=\"nx\">lambda</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// And we repeat for each lambda in the app</span>\n<span class=\"nx\">grantRights</span><span class=\"p\">(</span><span class=\"nx\">getProductFunction</span><span class=\"p\">,</span> <span class=\"nx\">getProduct</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>But now we have split the definition for our lambda in two different places: policies are in the handler source file, and the rest of the settings are in the stack file. </p>\n\n<p>What if consolidated them into a single source of truth in the handler?</p>\n\n<h2>\n  <a name=\"taking-cdk-integration-one-step-further\" href=\"#taking-cdk-integration-one-step-further\">\n  </a>\n  Taking CDK integration one step further\n</h2>\n\n<p>Let's take the approach from the previous section one step further and inject all information relevant to the lambda when declaring its handler function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/api/get-product.ts</span>\n<span class=\"kd\">const</span> <span class=\"nx\">policies</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">ReadOnlyProducts</span> <span class=\"p\">};</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">APIGatewayProxyEvent</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">lambdaHandler</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">policies</span><span class=\"p\">);</span>\n<span class=\"nx\">handler</span><span class=\"p\">.</span><span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span> \n  <span class=\"nx\">policies</span><span class=\"p\">,</span>\n  <span class=\"na\">httpMethod</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GET</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">logicalName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GetProductFunction</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">resourcePath</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">products/{id}</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"nx\">__filename</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">handler</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now we can add a function to our stack that accepts this set of parameters and creates a new lambda, connects it to the API gateway, and grants it the set of permissions defined in the policies:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// lib/stack.ts</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MyStack</span> <span class=\"kd\">extends</span> <span class=\"nx\">Stack</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"nx\">makeFunction</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">HandlerParams</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">NodejsFunction</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">logicalName</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">relative</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">..</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">entry</span><span class=\"p\">),</span>\n      <span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getFunctionSettings</span><span class=\"p\">(),</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">grantRights</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">policies</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">resourceForPath</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">resourcePath</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">addMethod</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">httpMethod</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">LambdaIntegration</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And we just invoke it for each handler in our application when constructing the stack:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// bin/stack.ts</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">handlers</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../src/api</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">App</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MyStack</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">MyStack</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">handler</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">(</span><span class=\"nx\">handlers</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"nx\">stack</span><span class=\"p\">.</span><span class=\"nx\">makeFunction</span><span class=\"p\">(</span><span class=\"nx\">handler</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This way, we have the definitions of the main resources of the application in our <code>lib/stack.ts</code> file, while each function is declared in its own individual file, along with its associated permissions - which get type checked when requesting access to any resource!</p>\n\n<h2>\n  <a name=\"full-example\" href=\"#full-example\">\n  </a>\n  Full example\n</h2>\n\n<p>You can check a full code sample of the pattern above in <a href=\"https://github.com/spalladino/serverless-typescript-demo/\"><code>spalladino/serverless-typescript-demo</code></a>, which is a fork of the <a href=\"https://github.com/aws-samples/serverless-typescript-demo\"><code>aws-samples/serverless-typescript-demo</code></a> that showcases a products CRUD built using Typescript and CDK.</p>\n\n","body_markdown":"---\ntitle: Type-checking Lambda permissions with Typescript\npublished: true\ndescription: Using the Typescript compiler to catch missing Lambda permissions in a serverless CDK setup.\ntags: serverless, cdk, typescript\npublished_at: 2022-11-04 14:00 +0000\n---\n\n## TL;DR\n\nWith Typescript, we can define the permissions granted to our lambda functions in our serverless apps using types. This lets us **type-check access to resources**, raising at compile-time any errors caused by missing permissions.\n\n```typescript\n// We define our app permissions as objects\nconst ProductsAccess = { Products: true } as const;\nconst MailerAccess = { Mailer: true } as const;\n\n// And we restrict access to any resource by requiring those permissions\ngetProductStore = (_policy: typeof ProductsAccess) => new DynamoProductStore();\ngetMailService = (_policy: typeof MailerAccess) => new SESMailer();\n\n// Then we define the type of policies required by our lambda as an argument\nasync function lambdaHandler(event: Event, policies: typeof ProductsAccess): Promise<Result> {\n  // And use those policies when requesting access to a resource\n  // so the compiler catches if we try to access a resource for which we don't have the required policy\n  const store = getProductStore(policies);\n\n  // Next line fails to compile since our policies do not include acess to the mail service!\n  const mailer = getMailService(policies);\n}\n```\n\nAnd since we have defined our policies in code as part of each lambda handler, we can declare all parameters for each lambda in its handler file and **use CDK to go through them and create the associated resources**.\n\n```typescript\n// src/api/get-product.ts\n// We attach the lambda parameters to the handler function\nexport const handler = makeHandler(lambdaHandler, {\n  policies: ReadOnlyProducts,\n  httpMethod: 'GET',\n  logicalName: 'GetProductFunction',\n  resourcePath: 'products/{id}',\n  entry: __filename,\n});\n```\n\n```typescript\n// bin/stack.ts\n// And we iterate through all handlers and create the associated lambda\nimport { MyStack } from '../lib/my-stack';\nimport * as handlers from '../src/api';\n\nconst app = new cdk.App();\nconst stack = new MyStack(app, 'MyStack', { ... });\n\nfor (const handler of Object.values(handlers)) {\n  stack.makeFunction(handler.params);\n}\n```\n\n```typescript\n// lib/stack.ts\n// We build into the stack the logic to add each new lambda\nexport class MyStack extends Stack {\n  public makeFunction(params: HandlerParams) {\n    const fn = new NodejsFunction(this, params.logicalName, {\n      entry: path.relative(path.resolve(__dirname, '..'), params.entry),\n      ...this.getFunctionSettings(),\n    });\n\n    this.grantRights(fn, params.policies);\n    this.api.root.resourceForPath(params.resourcePath)\n      .addMethod(params.httpMethod, new LambdaIntegration(fn));\n  }\n}\n```\n\nThis lets us define each Lambda in our application, along with its required permissions, in the same file where we declare the handler function, and **leverage the type checker to catch any missing permissions**.\n\nSo if you find this interesting, read on for the longer version, or check out [this fork](https://github.com/spalladino/serverless-typescript-demo/) of the AWS `serverless-typescript-demo` for a full code sample.\n\n## The problem with permissions errors\n\nA common error when building serverless applications is missing a permission for accessing a resource in a lambda function. These errors are particularly annoying because they show up late in the development lifecycle, since unit or local tests do not uncover permissions errors: you depend on integration tests to check that your lambdas have all the rights needed to run properly. An error here requires a full redeploy of the stack and a retest, which takes valuable developer time.\n\nMoving these errors to earlier in the development cycle yields a faster feedback loop. In this article, we'll explore how to catch these errors at compile time leveraging the Typescript type checker, and take it one step further by integrating our new typed permissions directly into our CDK stack definition.\n\n## Typing permissions\n\nLet's start by defining our application permissions as Typescript types. For the sake of the example, let's say we have a `Products` DynamoDB table in our application. We'll define two permissions, `ReadProducts` and `WriteProducts`, and use them to define a read-only and a full-access policy.\n\n```typescript\nconst ReadOnlyProducts = { ReadProducts: true } as const;\nconst ReadWriteProducts = { ...ReadOnlyProducts, WriteProducts: true } as const;\n```\n\nNote the `as const` in the declarations. This ensures that the type of each policy requires a `true` value for each property, and not any boolean.\n\nWe could have defined our policies as just an enumeration of permissions instead of using an object as we did above. But using objects like this plays nicely with the type system: a policy that extends another with additional permissions will also extend it in the eyes of the compiler.\n\n```typescript\nfunction listProducts(policy: typeof ReadOnlyProducts) {\n  // ...\n};\n\nrequiresReadProducts(ReadOnlyProducts); // Works\nrequiresReadProducts(ReadWriteProducts); // Works, since RW extends RO!\n```\n\nYou can define whatever arbitrary permissions you need for your application. These can go about sending emails, managing users, or pushing notifications. And you can combine them freely into policies. We'll worry about converting them into actual IAM policies later.\n\n```typescript\n// Example of a policy needed for running a UserManager\nconst UserManagerPolicy = {\n  ReadUsers: true,\n  WriteUsers: true,\n  SendEmails: true,\n  PushNotifications: true,\n} as const;\n```\n\n## Checking permissions when accessing resources\n\nOnce we have our sets of application permissions defined, we can now enforce them to request access to resources in our code.\n\nGoing back to the example from the previous section, we can abstract access to the `Products` table behind a `ProductStore`, with a DynamoDB-based default implementation.\n\n```typescript\nexport interface ProductStore {\n  getProduct: (id: string) => Promise<Product | undefined>;\n  getProducts: () => Promise<Product[]>;\n  putProduct: (product: Product) => Promise<void>;\n  deleteProduct: (id: string) => Promise<void>;\n}\n```\n\nWe can also restrict the interface above to getter methods, which we will use if the client has read-only permissions:\n\n```typescript\nexport type ReadOnlyProductStore = Pick<ProductStore, 'getProduct' | 'getProducts'>;\n```\n\nNow is where things get interesting: we can define a function that returns a read-only or full `ProductStore` depending on the **type** of the policies supplied by the caller:\n\n```typescript\nexport function getProductStore\n  <Policy extends typeof ReadOnlyProducts>(_policy: Policy): \n  Policy extends typeof ReadWriteProducts \n    ? ProductStore \n    : ReadOnlyProductStore {\n  return new DynamoProductStore();\n}\n```\n\nNote that we don't even use the policy parameter in the body of the function, since actual permissions will be checked by the AWS policies we define. What we are doing here is asking the type system to check if the user has read-only or read-write permissions on the `Products` table, and return the corresponding interface. On runtime, we just return the same implementation.\n\nThis achieves our goal of restricting access to resources based on the **type** of the policies we're working with, which raises any permission errors during compile-time.\n\n```typescript\n// Works\ngetProductStore(ReadWriteProducts).putProduct(product);\n\n// Property 'putProduct' does not exist on type 'ReadOnlyProductStore'\ngetProductStore(ReadOnlyProducts).putProduct(product);\n\n// Argument of type '{ readonly ReadUsers: true; }' is not assignable to parameter of type '{ readonly ReadProducts: true; }'\ngetProductStore(ReadWriteUsers).putProduct(product);\n```\n\n## Declaring permissions for each lambda\n\nThe most straightforward way to use this pattern is to declare, for each lambda, which set of permissions we will be granting it. This serves as a documentation attached to each function, which we can use to easily determine which policies we need to define in our infra-as-code.\n\n```typescript\nasync function lambdaHandler(event: APIGatewayProxyEvent) {\n  // We declare the policies for this lambda once\n  const policies = { ...ReadOnlyProducts, ...UserManagerPolicy };\n  \n  // And use them whenever we need to instantiate a resource\n  const service = getService(policies);\n}\n```\n\nBut since we are already defining these policies in code, we can take this an extra step and use them to actually generate the policies in our infra-as-code template. As a matter of fact, we can extend this to generate the entire function template from a single source of truth.\n\n## Integrating with CDK\n\nOur goal will be to write the policies for each lambda in a single place, and 1) have the type checker verify that we have the required policies for accessing all resources we need and 2) generate these policies in our infra-as-code template. Since we're already working with Typescript, we'll use CDK as our infra-as-code tool.\n\nTo do this, we'll attach the policies to the exported handler function, so we can query them when building our stack from CDK.\n\n```typescript\n// src/api/get-product.ts\nconst policies = { ...ReadOnlyProducts };\nconst handler = (event: APIGatewayProxyEvent) => lambdaHandler(event, policies);\nhandler.params = { policies };\n\nexport { handler };\n```\n\nSo when we define our stack using CDK constructs, we can import each handler and define its IAM permissions from the ones we exported.\n\n```typescript\n// lib/stack.ts\nimport { handler as getProduct } from '../src/api/get-product';\n\n// We define our resources in the stack constructor\nconst productsTable = new Table(...);\nconst api = new RestApi(...);\n\nconst getProductFunction = new NodejsFunction(\n  this,\n  \"GetProductsFunction\",\n  { entry: \"./src/api/get-products.ts\", ...settings },\n);\n\napi.root.resourceForPath('products/{id}')\n  .addMethod('GET', new LambdaIntegration(getProductFunction));\n\n// A helper function translates from our custom policies\n// to the actual IAM permissions to be created\nconst grantRights(lambda, policies) => {\n  if (policies.ReadProducts) productsTable.grantReadData(lambda);\n  if (policies.WriteProducts) productsTable.grantWriteData(lambda);\n};\n\n// And we repeat for each lambda in the app\ngrantRights(getProductFunction, getProduct.params.policies);\n```\n\nBut now we have split the definition for our lambda in two different places: policies are in the handler source file, and the rest of the settings are in the stack file. \n\nWhat if consolidated them into a single source of truth in the handler?\n\n## Taking CDK integration one step further\n\nLet's take the approach from the previous section one step further and inject all information relevant to the lambda when declaring its handler function:\n\n```typescript\n// src/api/get-product.ts\nconst policies = { ...ReadOnlyProducts };\nconst handler = (event: APIGatewayProxyEvent) => lambdaHandler(event, policies);\nhandler.params = { \n  policies,\n  httpMethod: 'GET',\n  logicalName: 'GetProductFunction',\n  resourcePath: 'products/{id}',\n  entry: __filename,\n};\n\nexport { handler };\n```\n\nNow we can add a function to our stack that accepts this set of parameters and creates a new lambda, connects it to the API gateway, and grants it the set of permissions defined in the policies:\n\n```typescript\n// lib/stack.ts\nclass MyStack extends Stack {\n  public makeFunction(params: HandlerParams) {\n    const fn = new NodejsFunction(this, params.logicalName, {\n      entry: path.relative(path.resolve(__dirname, '..'), params.entry),\n      ...this.getFunctionSettings(),\n    });\n\n    this.grantRights(fn, params.policies);\n    this.api.root.resourceForPath(params.resourcePath)\n      .addMethod(params.httpMethod, new LambdaIntegration(fn));\n  }\n}\n```\n\nAnd we just invoke it for each handler in our application when constructing the stack:\n\n```typescript\n// bin/stack.ts\nimport * as handlers from '../src/api';\n\nconst app = new cdk.App();\nconst stack = new MyStack(app, 'MyStack', { ... });\n\nfor (const handler of Object.values(handlers)) {\n  stack.makeFunction(handler.params);\n}\n```\n\nThis way, we have the definitions of the main resources of the application in our `lib/stack.ts` file, while each function is declared in its own individual file, along with its associated permissions - which get type checked when requesting access to any resource!\n\n## Full example\n\nYou can check a full code sample of the pattern above in [`spalladino/serverless-typescript-demo`](https://github.com/spalladino/serverless-typescript-demo/), which is a fork of the [`aws-samples/serverless-typescript-demo`](https://github.com/aws-samples/serverless-typescript-demo) that showcases a products CRUD built using Typescript and CDK.","user":{"name":"Santiago Palladino","username":"spalladino","twitter_username":"smpalladino","github_username":"spalladino","user_id":1436,"website_url":"https://palla.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--zzXdrxc2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1436/39e1b060-9c17-43c1-9ca7-205d6908aa73.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--yI7cqmC7--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1436/39e1b060-9c17-43c1-9ca7-205d6908aa73.png"}}