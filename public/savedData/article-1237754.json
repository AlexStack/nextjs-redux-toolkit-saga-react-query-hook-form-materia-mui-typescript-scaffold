{"type_of":"article","id":1237754,"title":"Google OAuth with Firebase in React Native","description":"by Joseph Chege  Authentication is a process where a user has to prove their identity in an...","readable_publish_date":"Oct 31","slug":"google-oauth-with-firebase-in-react-native-5fl4","path":"/asayerio_techblog/google-oauth-with-firebase-in-react-native-5fl4","url":"https://dev.to/asayerio_techblog/google-oauth-with-firebase-in-react-native-5fl4","comments_count":0,"public_reactions_count":5,"collection_id":null,"published_timestamp":"2022-10-31T23:54:34Z","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--PODTFeZm--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eva78gmveip4f7rdyqj6.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--s7teyAJ3--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eva78gmveip4f7rdyqj6.png","canonical_url":"https://blog.openreplay.com/google-oauth-with-firebase-in-react-native/","created_at":"2022-10-31T23:54:34Z","edited_at":null,"crossposted_at":null,"published_at":"2022-10-31T23:54:34Z","last_comment_at":"2022-10-31T23:54:34Z","reading_time_minutes":8,"tag_list":"authentication, reactnative, firebase","tags":["authentication","reactnative","firebase"],"body_html":"<p>by <a href=\"https://blog.openreplay.com/authors/joseph-chege\">Joseph Chege</a></p>\n\n<p><a href=\"https://www.techtarget.com/searchsecurity/definition/authentication\">Authentication</a> is a process where a user has to prove their identity in an application to gain access to a particular resource. There are many authentication strategies. However, the most notable ones provide one-click signups and logins for web and native mobile apps.</p>\n\n<p><a href=\"https://oauth.net/\">OAuth</a> stands out as one-time click authentication without the need to provide passwords. OAuth is an open-source convention for using tokens for authentication and authorization. You can implement many OAuth providers in your apps, including Google, Facebook, Twitter, and GitHub.</p>\n\n<p>These providers are well-packaged with cloud-hosted platforms such as Firebase. Firebase SDK supports Google sign-in, making it extremely easy to implement one-click authentications.</p>\n\n<p>In this article, we will build a <a href=\"https://reactnative.dev/\">React Native</a> application that will have <a href=\"https://developers.google.com/identity/protocols/oauth2\">Google OAuth</a> using <a href=\"https://firebase.google.com/\">Firebase</a>.</p>\n\n<p>To follow along with this tutorial, it is important to have the following:</p>\n\n<ul>\n<li>\n<a href=\"https://nodejs.org/en/\">Node.js</a> installed on your computer.</li>\n<li>React Native <a href=\"https://reactnative.dev/docs/environment-setup\">development setup</a> done.</li>\n<li>Basic knowledge of working with JavaScript.</li>\n</ul>\n\n<h2>\n  <a name=\"setting-up-the-application\" href=\"#setting-up-the-application\">\n  </a>\n  Setting up the application\n</h2>\n\n<p>Let's dive and create a React Native application using Command Line Interface. React Native provides a <a href=\"https://reactnative.dev/docs/environment-setup\">built-in CLI</a> to create an application. In this guide, we will use <a href=\"https://docs.npmjs.com/cli/v7/commands/npx/\">NPX</a> to scaffold the project.</p>\n\n<p>From your preferred directory, run the following command to initialize the React Native project:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx react-native init react_native_googleauth\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Note: while using this command and still you have a specific version of the CLI globally on your computer, you may run into unexpected issues. To avoid that, ensure you have the global CLI installed. You can run the following command to do so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm uninstall -g react-native-cli @react-native-community/cli\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We need some packages to be able to communicate between Firebase and React Native. These include:</p>\n\n<ul>\n<li>\n<a href=\"https://rnfirebase.io/\">@react-native-firebase/app</a>: Firebase package</li>\n<li>\n<a href=\"https://dev.toreact-native-google-signin/google-signin\">@react-native-firebase/auth</a>: Firebase authentication package</li>\n<li>\n<a href=\"https://www.npmjs.com/package/@react-native-google-signin/google-signin\">@react-native-google-signin/google-signin</a>: Google sign-in package</li>\n</ul>\n\n<p>We will use the above packages to access Firebase and execute Google OAuth on a React Native front end. To install them navigate to the newly created project directory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd react_native_googleauth\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm i @react-native-firebase/app @react-native-firebase/auth @react-native-google-signin/google-signin\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"setting-up-firebase\" href=\"#setting-up-firebase\">\n  </a>\n  Setting up Firebase\n</h2>\n\n<p>To implement this application, we need a working Firebase project. We just have a few steps. Let's dive in and set up Firebase.</p>\n\n<ul>\n<li>Proceed to your Firebase console from <a href=\"https://console.firebase.google.com/\">here</a>\n</li>\n<li>Click on the new project card.</li>\n<li>Enter the application name, i.e., react_native_auth_app</li>\n<li>Check the confirmation check box, then click on <strong>Continue</strong>.</li>\n</ul>\n\n<p>Feel free to toggle between enabling or disabling google analytics in the project.</p>\n\n<ul>\n<li>The project will be created in the next step. Once it is done, click on continue.</li>\n<li>Once done, you will be directed to the dashboard page:</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s---f478Lkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image01.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---f478Lkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image01.png\" alt=\"1 dashboard\" loading=\"lazy\" width=\"880\" height=\"432\"></a></p>\n\n<ul>\n<li>Click on the Android icon to set up the application.</li>\n</ul>\n\n<p>For <strong>Android package name</strong>, check your <code>android/app/src/main/AndroidManifest.xml</code> file in your React Native project and enter the package name as such:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--N9363CWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image02.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--N9363CWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image02.png\" alt=\"2 android_package_name\" loading=\"lazy\" width=\"651\" height=\"106\"></a></p>\n\n<p>Feel free to enter any application nickname.</p>\n\n<ul>\n<li>Generate a signing certificate by running the following command from the terminal on your React Native project folder:\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd android &amp;&amp; ./gradlew signingReport\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li><p>On the generated certificates, Copy the <strong>SHA-1</strong> that has: Task labeled as <code>:app:signingReport</code>, Variant as <code>debugAndroidTest</code>, and Config as <code>debug</code>.</p></li>\n<li><p>Paste it in the certificate field, then click <strong>Register app</strong>.</p></li>\n<li><p>Download the <code>google-services.json</code> file and place it under the <code>android/app</code> directory of React Native project.</p></li>\n<li><p>From there, click on <strong>Next</strong> and then continue to the console.</p></li>\n<li><p>From the application dashboard, click on authentication:</p></li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bJu3Qr6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image03.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bJu3Qr6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image03.png\" alt=\"3 app_dashboard\" loading=\"lazy\" width=\"880\" height=\"429\"></a></p>\n\n<ul>\n<li><p>On the resulting page, click on Get Started.</p></li>\n<li><p>In the <strong>Sign in method</strong> tab, select <strong>Google</strong> as an additional provider:</p></li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cWXB3ba1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image04.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cWXB3ba1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image04.png\" alt=\"4 additional_providers\" loading=\"lazy\" width=\"880\" height=\"521\"></a></p>\n\n<ul>\n<li>On the resulting page, click on <strong>enable</strong>:</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iSGvznnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image05.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iSGvznnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image05.png\" alt=\"5 enable_google_auth\" loading=\"lazy\" width=\"880\" height=\"522\"></a></p>\n\n<ul>\n<li>Select a project support email. Then click <strong>Save</strong>.</li>\n</ul>\n\n<h2>\n  <a name=\"configuring-firebase-with-react-native\" href=\"#configuring-firebase-with-react-native\">\n  </a>\n  Configuring Firebase with React Native\n</h2>\n\n<p>Once Firebase is set, first, add the <code>google-services</code> plugin as a dependency in <code>android/build.gradle</code> as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>buildscript {\n    dependencies {\n        // ... the other dependencies\n        classpath' com.google.gms:google-services:4.3.3'\n    }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then add the following properties on your <code>android/app/build.gradle</code> file to execute the 'google-services' plugin:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>apply plugin: \"com.android.application\"\napply plugin: 'com.google.gms.google-services'      \n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, define the authentication module as a dependency:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>dependencies {\n    // add the following\n    implementation platform('com.google.firebase:firebase-bom:26.3.0')\n    implementation' com.google.firebase:firebase-auth'\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"setting-up-the-app-screens\" href=\"#setting-up-the-app-screens\">\n  </a>\n  Setting up the app screens\n</h2>\n\n<p>We have Firebase ready and configured with React Native. Let's create screens to handle Google Oauth.</p>\n\n<p>In the project root folder, create a <code>screens</code> directory. Here we will create two screens:</p>\n\n<ul>\n<li>For handling authentication. In the <code>screens</code> directory, create an <code>Authenticate.js' file: we will log in a user here. Go ahead and create a button using</code>GoogleSigninButton` as follows:</li>\n</ul>\n\n<p><code></code>`javascript<br>\nimport React from 'react';<br>\nimport { StyleSheet, View, Text } from 'react-native';<br>\nimport { GoogleSigninButton } from '@react-native-google-signin/google-signin';</p>\n\n<p>export default function Authenticate(props) {<br>\n    return (<br>\n        <br>\n            Google OAuth<br>\n            <br>\n        <br>\n    )<br>\n}<br>\nconst styles = StyleSheet.create({<br>\n    screen: {<br>\n        display: 'flex',<br>\n        flex: 1,<br>\n        justifyContent: 'center',<br>\n        alignItems: 'center'<br>\n    },<br>\n    title: {<br>\n        fontSize: 25,<br>\n        marginBottom: 30<br>\n    }<br>\n})<br>\n`<code></code></p>\n\n<ul>\n<li>Handling authenticated user screen. Once a user is signed in, we will show details of the authenticated user and log out. In the <code>screens</code> directory, create an <code>Authenticated.js</code> and add the following component to display user details.</li>\n</ul>\n\n<p><code></code>`javascript<br>\nimport React from \"react\";<br>\nimport { StyleSheet, Text, View, Image, Button } from 'react-native';<br>\nimport auth from '@react-native-firebase/auth';</p>\n\n<p>export default function Authenticated() {<br>\n    const user = auth().currentUser;<br>\n    return (<br>\n        <br>\n            You have logged in successfully<br>\n            <br>\n            {user?.displayName}<br>\n            {user?.email}<br>\n            <br>\n                <br>\n            <br>\n        <br>\n    )<br>\n}</p>\n\n<p>const styles = StyleSheet.create({<br>\n    screen: {<br>\n        flex: 1,<br>\n        justifyContent: \"center\",<br>\n        alignItems: \"center\",<br>\n        backgroundColor: \"#ffc2c2\",<br>\n    },<br>\n    title: {<br>\n        fontSize: 25,<br>\n        marginBottom: 30,<br>\n    },<br>\n    image: {<br>\n        height: 150,<br>\n        width: 150,<br>\n        borderRadius: 150,<br>\n        marginBottom: 20,<br>\n    },<br>\n    text: {<br>\n        fontSize: 20,<br>\n    },<br>\n});<br>\n`<code></code></p>\n\n<h2>Open Source Session Replay</h2> \n\n<p><em><a href=\"https://github.com/openreplay/openreplay\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data.</em></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" alt=\"OpenReplay\" loading=\"lazy\" width=\"768\" height=\"400\"></a></p>\n\n<p><em>Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\">start using OpenReplay for free</a>.</em></p>\n\n<h2>\n  <a name=\"handling-google-signin-authentication\" href=\"#handling-google-signin-authentication\">\n  </a>\n  Handling Google Sign-in Authentication\n</h2>\n\n<p>To handle user sign-in, navigate to <code>App.js</code> and import the necessary modules.</p>\n\n<p><code></code><code>javascript<br>\nimport React,{useState} from 'react';<br>\nimport auth from '@react-native-firebase/auth';<br>\nimport { GoogleSignin } from '@react-native-google-signin/google-signin'<br>\nimport Authenticate from './screens/Authenticate';<br>\nimport Authenticated from './screens/Authenticated';<br>\n</code><code></code></p>\n\n<p>Configure <em>GoogleSignin</em> with your webClientId:</p>\n\n<p><code></code><code>javascript<br>\nGoogleSignin.configure({<br>\n    webClientId: \"your_webclient_id\"<br>\n});<br>\n</code><code></code></p>\n\n<p>To get your <code>WebClient</code> id, click on <strong>Authentication</strong> from your Firebase app dashboard from the left pane. Click on the <strong>Sign-in method</strong>. Click on <strong>Google</strong>. Under <strong>Web SDK configuration</strong>, the <strong>Web client ID</strong> is a form field with a value in it. Copy the value and paste it in the above <code>GoogleSignIn</code> configuration as your <code>your_webclient_id</code>.</p>\n\n<p>Define a state for checking whether the user is authenticated or not:</p>\n\n<p><code></code><code>javascript<br>\nconst App = () =&gt; {<br>\n    const [authenticated,setAuthenticated] = useState(false);<br>\n}<br>\n</code><code></code></p>\n\n<p>Define a listener for checking whether the user is logged in or not:</p>\n\n<p><code></code><code>javascript<br>\nauth().onAuthStateChanged((user) =&gt; {<br>\n    if (user) {<br>\n        setAuthenticated(true);<br>\n    } else {<br>\n        setAuthenticated(false);<br>\n    }<br>\n});<br>\n</code><code></code></p>\n\n<p>Define a function for handling sign-in:</p>\n\n<p><code></code><code>javascript<br>\nasync function handleGoogleButtonPress() {<br>\n    try {<br>\n        // get the user id token<br>\n        const { idToken } = await GoogleSignin.signIn();<br>\n        // create a credential using the token<br>\n        const googleCredential = auth.GoogleAuthProvider.credential(idToken);<br>\n        // authenticate the user using the credential<br>\n        return auth().signInWithCredential(googleCredential);<br>\n    } catch (error) {<br>\n        console.log(\"error\", error);<br>\n    }<br>\n}<br>\n</code><code></code></p>\n\n<p>Render the appropriate screen if the user is authenticated or not:</p>\n\n<p><code></code><code>javascript<br>\nif (authenticated) {<br>\n    return &lt;Authenticated /&gt;<br>\n}<br>\nreturn &lt;Authenticate handleGoogleButtonPress={handleGoogleButtonPress} /&gt;<br>\n</code><code></code></p>\n\n<h2>\n  <a name=\"handling-google-signout-authentication\" href=\"#handling-google-signout-authentication\">\n  </a>\n  Handling Google Sign-out Authentication\n</h2>\n\n<p>To handle user Sign-out, navigate to the <code>screens/Authenticated.js</code> file and add <code>auth().signOut()</code> handler to your component. Here, ensure you import Firebase auth package:</p>\n\n<p><code></code><code>javascript<br>\nimport auth from '@react-native-firebase/auth';<br>\n</code><code></code></p>\n\n<p>Then update the <code>Authenticated</code> component as follows:</p>\n\n<p><code></code><code>javascript<br>\nexport default function Authenticated() {<br>\n    const user = auth().currentUser;<br>\n    return (<br>\n        &lt;View style={styles.screen}&gt;<br>\n            &lt;Text style={styles.title}&gt;You have logged in successfully&lt;/Text&gt;<br>\n            &lt;Image source={{ uri: user?.photoURL }} style={styles.image} /&gt;<br>\n            &lt;Text style={styles.text}&gt;{user?.displayName}&lt;/Text&gt;<br>\n            &lt;Text style={styles.text}&gt;{user?.email}&lt;/Text&gt;<br>\n            &lt;View style={{ marginTop: 30 }}&gt;<br>\n                &lt;Button title=\"Log out\" onPress={() =&gt; {<br>\n                    auth().signOut();<br>\n                }} /&gt;<br>\n            &lt;/View&gt;<br>\n        &lt;/View&gt;<br>\n    )<br>\n}<br>\n</code><code></code></p>\n\n<h2>\n  <a name=\"combining-the-signin-and-sign-out\" href=\"#combining-the-signin-and-sign-out\">\n  </a>\n  Combining the sign-in and sign out\n</h2>\n\n<p>At this point, your application should be ready. Go ahead and ensure your <code>App.js</code> file reflects as such:</p>\n\n<p><code></code>`javascript<br>\nimport React, { useState } from 'react';<br>\nimport auth from '@react-native-firebase/auth';<br>\nimport { GoogleSignin } from '@react-native-google-signin/google-signin'<br>\nimport Authenticate from './screens/Authenticate';<br>\nimport Authenticated from './screens/Authenticated';</p>\n\n<p>GoogleSignin.configure({<br>\n    webClientId: \"your_webclient_id\"<br>\n});</p>\n\n<p>const App = () =&gt; {<br>\n    const [authenticated, setAuthenticated] = useState(false);</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>auth().onAuthStateChanged((user) =&gt; {\n    if (user) {\n        setAuthenticated(true);\n    } else {\n        setAuthenticated(false);\n    }\n});\n\n\nasync function handleGoogleButtonPress() {\n    try {\n        // get the user id token\n        const { idToken } = await GoogleSignin.signIn();\n        // create a credential using the token\n        const googleCredential = auth.GoogleAuthProvider.credential(idToken);\n        // authenticate the user using the credential\n        return auth().signInWithCredential(googleCredential);\n    } catch (error) {\n        console.log(\"error\", error);\n    }\n}\n\nif (authenticated) {\n    return &lt;Authenticated /&gt;\n}\nreturn &lt;Authenticate handleGoogleButtonPress={handleGoogleButtonPress} /&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<p>};</p>\n\n<p>export default App;<br>\n`<code></code></p>\n\n<h2>\n  <a name=\"testing-the-app\" href=\"#testing-the-app\">\n  </a>\n  Testing the app\n</h2>\n\n<p>The application is now ready. Start the development server using the following command:</p>\n\n<p><code></code>`</p>\n\n<h1>\n  <a name=\"using-metro-bundler\" href=\"#using-metro-bundler\">\n  </a>\n  using Metro Bundler\n</h1>\n\n<p>npx react-native start</p>\n\n<h1>\n  <a name=\"start-the-app-on-an-android-emulator\" href=\"#start-the-app-on-an-android-emulator\">\n  </a>\n  Start the app on an Android emulator\n</h1>\n\n<p>npm run android<br>\n`<code></code></p>\n\n<p>Note: Run the application base on the React Native setup configured on your computer. For additional configurations, such as Target OS, <a href=\"https://reactnative.dev/docs/environment-setup#target-os\">check this guide for iOS setup</a>.</p>\n\n<p>Once the application is up and running, you will be served with the Sign-in screen as follows:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kZt07J4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image06.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kZt07J4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image06.jpg\" alt=\"6 login_screen\" loading=\"lazy\" width=\"658\" height=\"1280\"></a></p>\n\n<p>Once the user is authenticated, the Authenticated screen will display the user details and button to handle Sign out as follows:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RVlcs_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image07.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RVlcs_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image07.jpg\" alt=\"7 authenticated_screen\" loading=\"lazy\" width=\"658\" height=\"1280\"></a></p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>This guide helped you handle user authentication using Google OAuth provider. For any code references, check the application on this <a href=\"https://github.com/kimkimani/Firebase-Google-OAuth-using-in-React-Native\">GitHub repository</a>.</p>\n\n<p>I hope you found this helpful. Happy coding!</p>\n\n<blockquote>\n<p>A TIP FROM THE EDITOR: For another case study on authentication, don't miss our <a href=\"https://blog.openreplay.com/authentication-in-react-18-using-firebase-v9/\">Authentication In React 18 Using Firebase V9</a> article.</p>\n</blockquote>\n\n<p><a href=\"https://newsletter.openreplay.com/\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gxR3i5E2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/newsletter_Z1P0UIP.png\" alt=\"newsletter\" loading=\"lazy\" width=\"880\" height=\"137\"></a> </p>\n\n","body_markdown":"by [Joseph Chege](https://blog.openreplay.com/authors/joseph-chege)\n\n\n[Authentication](https://www.techtarget.com/searchsecurity/definition/authentication) is a process where a user has to prove their identity in an application to gain access to a particular resource. There are many authentication strategies. However, the most notable ones provide one-click signups and logins for web and native mobile apps.\n\n[OAuth](https://oauth.net/) stands out as one-time click authentication without the need to provide passwords. OAuth is an open-source convention for using tokens for authentication and authorization. You can implement many OAuth providers in your apps, including Google, Facebook, Twitter, and GitHub.\n\nThese providers are well-packaged with cloud-hosted platforms such as Firebase. Firebase SDK supports Google sign-in, making it extremely easy to implement one-click authentications.\n\nIn this article, we will build a [React Native](https://reactnative.dev/) application that will have [Google OAuth](https://developers.google.com/identity/protocols/oauth2) using [Firebase](https://firebase.google.com/).\n\nTo follow along with this tutorial, it is important to have the following:\n\n- [Node.js](https://nodejs.org/en/) installed on your computer.\n- React Native [development setup](https://reactnative.dev/docs/environment-setup) done.\n- Basic knowledge of working with JavaScript.\n\n\n## Setting up the application\n\nLet's dive and create a React Native application using Command Line Interface. React Native provides a [built-in CLI](https://reactnative.dev/docs/environment-setup) to create an application. In this guide, we will use [NPX](https://docs.npmjs.com/cli/v7/commands/npx/) to scaffold the project.\n\nFrom your preferred directory, run the following command to initialize the React Native project:\n\n```\nnpx react-native init react_native_googleauth\n```\n\nNote: while using this command and still you have a specific version of the CLI globally on your computer, you may run into unexpected issues. To avoid that, ensure you have the global CLI installed. You can run the following command to do so:\n\n```\nnpm uninstall -g react-native-cli @react-native-community/cli\n```\n\nWe need some packages to be able to communicate between Firebase and React Native. These include:\n\n- [@react-native-firebase/app](https://rnfirebase.io/): Firebase package\n- [@react-native-firebase/auth](react-native-google-signin/google-signin): Firebase authentication package\n- [@react-native-google-signin/google-signin](https://www.npmjs.com/package/@react-native-google-signin/google-signin): Google sign-in package\n\nWe will use the above packages to access Firebase and execute Google OAuth on a React Native front end. To install them navigate to the newly created project directory:\n\n```\ncd react_native_googleauth\n```\n\nThen run:\n\n```\nnpm i @react-native-firebase/app @react-native-firebase/auth @react-native-google-signin/google-signin\n```\n\n## Setting up Firebase\n\nTo implement this application, we need a working Firebase project. We just have a few steps. Let's dive in and set up Firebase.\n\n- Proceed to your Firebase console from [here](https://console.firebase.google.com/)\n- Click on the new project card.\n- Enter the application name, i.e., react_native_auth_app\n- Check the confirmation check box, then click on **Continue**.\n\nFeel free to toggle between enabling or disabling google analytics in the project.\n\n- The project will be created in the next step. Once it is done, click on continue.\n- Once done, you will be directed to the dashboard page:\n\n![1 dashboard](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image01.png)\n\n\n- Click on the Android icon to set up the application.\n\nFor **Android package name**, check your `android/app/src/main/AndroidManifest.xml` file in your React Native project and enter the package name as such:\n\n![2 android_package_name](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image02.png)\n\nFeel free to enter any application nickname.\n\n- Generate a signing certificate by running the following command from the terminal on your React Native project folder:\n\n```\ncd android && ./gradlew signingReport\n```\n\n- On the generated certificates, Copy the **SHA-1** that has: Task labeled as `:app:signingReport`, Variant as `debugAndroidTest`, and Config as `debug`.\n\n- Paste it in the certificate field, then click **Register app**.\n\n- Download the `google-services.json` file and place it under the `android/app` directory of React Native project.\n\n- From there, click on **Next** and then continue to the console.\n\n- From the application dashboard, click on authentication:\n\n![3 app_dashboard](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image03.png)\n\n\n- On the resulting page, click on Get Started.\n\n- In the **Sign in method** tab, select **Google** as an additional provider:\n\n![4 additional_providers](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image04.png)\n\n- On the resulting page, click on **enable**:\n\n![5 enable_google_auth](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image05.png)\n\n\n- Select a project support email. Then click **Save**.\n\n## Configuring Firebase with React Native\n\nOnce Firebase is set, first, add the `google-services` plugin as a dependency in `android/build.gradle` as follows:\n\n```\nbuildscript {\n    dependencies {\n        // ... the other dependencies\n        classpath' com.google.gms:google-services:4.3.3'\n    }\n}\n```\n\nThen add the following properties on your `android/app/build.gradle` file to execute the 'google-services' plugin:\n\n```\napply plugin: \"com.android.application\"\napply plugin: 'com.google.gms.google-services'      \n```\n\nFinally, define the authentication module as a dependency:\n\n```\ndependencies {\n    // add the following\n    implementation platform('com.google.firebase:firebase-bom:26.3.0')\n    implementation' com.google.firebase:firebase-auth'\n}\n```\n\n## Setting up the app screens\n\nWe have Firebase ready and configured with React Native. Let's create screens to handle Google Oauth.\n\nIn the project root folder, create a `screens` directory. Here we will create two screens:\n\n- For handling authentication. In the `screens` directory, create an `Authenticate.js' file: we will log in a user here. Go ahead and create a button using `GoogleSigninButton` as follows:\n\n```javascript\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport { GoogleSigninButton } from '@react-native-google-signin/google-signin';\n\nexport default function Authenticate(props) {\n    return (\n        <View style={styles.screen}>\n            <Text style={styles.title}>Google OAuth</Text>\n            <GoogleSigninButton onPress={props.handleGoogleButtonPress} />\n        </View>\n    )\n}\nconst styles = StyleSheet.create({\n    screen: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    title: {\n        fontSize: 25,\n        marginBottom: 30\n    }\n})\n```\n\n- Handling authenticated user screen. Once a user is signed in, we will show details of the authenticated user and log out. In the `screens` directory, create an `Authenticated.js` and add the following component to display user details.\n\n```javascript\nimport React from \"react\";\nimport { StyleSheet, Text, View, Image, Button } from 'react-native';\nimport auth from '@react-native-firebase/auth';\n\nexport default function Authenticated() {\n    const user = auth().currentUser;\n    return (\n        <View style={styles.screen}>\n            <Text style={styles.title}>You have logged in successfully</Text>\n            <Image source={{ uri: user?.photoURL }} style={styles.image} />\n            <Text style={styles.text}>{user?.displayName}</Text>\n            <Text style={styles.text}>{user?.email}</Text>\n            <View style={{ marginTop: 30 }}>\n                <Button title= \"Log out\"/>\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#ffc2c2\",\n    },\n    title: {\n        fontSize: 25,\n        marginBottom: 30,\n    },\n    image: {\n        height: 150,\n        width: 150,\n        borderRadius: 150,\n        marginBottom: 20,\n    },\n    text: {\n        fontSize: 20,\n    },\n});\n```\n\n\n\n\n<h2>Open Source Session Replay</h2> \n\n_<a href=\"https://github.com/openreplay/openreplay\" target=\"_blank\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data._\n\n![OpenReplay](https://blog.openreplay.com/banner-blog_1oYPGT.png)\n\n_Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\" >start using OpenReplay for free</a>._\n\n\n\n\n\n## Handling Google Sign-in Authentication\n\nTo handle user sign-in, navigate to `App.js` and import the necessary modules.\n\n```javascript\nimport React,{useState} from 'react';\nimport auth from '@react-native-firebase/auth';\nimport { GoogleSignin } from '@react-native-google-signin/google-signin'\nimport Authenticate from './screens/Authenticate';\nimport Authenticated from './screens/Authenticated';\n```\n\nConfigure *GoogleSignin* with your webClientId:\n\n```javascript\nGoogleSignin.configure({\n    webClientId: \"your_webclient_id\"\n});\n```\n\nTo get your `WebClient` id, click on **Authentication** from your Firebase app dashboard from the left pane. Click on the **Sign-in method**. Click on **Google**. Under **Web SDK configuration**, the **Web client ID** is a form field with a value in it. Copy the value and paste it in the above `GoogleSignIn` configuration as your `your_webclient_id`.\n\nDefine a state for checking whether the user is authenticated or not:\n\n```javascript\nconst App = () => {\n    const [authenticated,setAuthenticated] = useState(false);\n}\n```\n\nDefine a listener for checking whether the user is logged in or not:\n\n```javascript\nauth().onAuthStateChanged((user) => {\n    if (user) {\n        setAuthenticated(true);\n    } else {\n        setAuthenticated(false);\n    }\n});\n```\n\nDefine a function for handling sign-in:\n\n```javascript\nasync function handleGoogleButtonPress() {\n    try {\n        // get the user id token\n        const { idToken } = await GoogleSignin.signIn();\n        // create a credential using the token\n        const googleCredential = auth.GoogleAuthProvider.credential(idToken);\n        // authenticate the user using the credential\n        return auth().signInWithCredential(googleCredential);\n    } catch (error) {\n        console.log(\"error\", error);\n    }\n}\n```\n\nRender the appropriate screen if the user is authenticated or not:\n\n```javascript\nif (authenticated) {\n    return <Authenticated />\n}\nreturn <Authenticate handleGoogleButtonPress={handleGoogleButtonPress} />\n```\n\n## Handling Google Sign-out Authentication\n\nTo handle user Sign-out, navigate to the `screens/Authenticated.js` file and add `auth().signOut()` handler to your component. Here, ensure you import Firebase auth package:\n\n```javascript\nimport auth from '@react-native-firebase/auth';\n```\n\nThen update the `Authenticated` component as follows:\n\n```javascript\nexport default function Authenticated() {\n    const user = auth().currentUser;\n    return (\n        <View style={styles.screen}>\n            <Text style={styles.title}>You have logged in successfully</Text>\n            <Image source={{ uri: user?.photoURL }} style={styles.image} />\n            <Text style={styles.text}>{user?.displayName}</Text>\n            <Text style={styles.text}>{user?.email}</Text>\n            <View style={{ marginTop: 30 }}>\n                <Button title=\"Log out\" onPress={() => {\n                    auth().signOut();\n                }} />\n            </View>\n        </View>\n    )\n}\n```\n\n## Combining the sign-in and sign out\n\nAt this point, your application should be ready. Go ahead and ensure your `App.js` file reflects as such:\n\n```javascript\nimport React, { useState } from 'react';\nimport auth from '@react-native-firebase/auth';\nimport { GoogleSignin } from '@react-native-google-signin/google-signin'\nimport Authenticate from './screens/Authenticate';\nimport Authenticated from './screens/Authenticated';\n\nGoogleSignin.configure({\n    webClientId: \"your_webclient_id\"\n});\n\nconst App = () => {\n    const [authenticated, setAuthenticated] = useState(false);\n\n    auth().onAuthStateChanged((user) => {\n        if (user) {\n            setAuthenticated(true);\n        } else {\n            setAuthenticated(false);\n        }\n    });\n\n\n    async function handleGoogleButtonPress() {\n        try {\n            // get the user id token\n            const { idToken } = await GoogleSignin.signIn();\n            // create a credential using the token\n            const googleCredential = auth.GoogleAuthProvider.credential(idToken);\n            // authenticate the user using the credential\n            return auth().signInWithCredential(googleCredential);\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    if (authenticated) {\n        return <Authenticated />\n    }\n    return <Authenticate handleGoogleButtonPress={handleGoogleButtonPress} />\n};\n\nexport default App;\n```\n\n## Testing the app\n\nThe application is now ready. Start the development server using the following command:\n\n```\n# using Metro Bundler\nnpx react-native start\n# Start the app on an Android emulator\nnpm run android\n```\n\nNote: Run the application base on the React Native setup configured on your computer. For additional configurations, such as Target OS, [check this guide for iOS setup](https://reactnative.dev/docs/environment-setup#target-os).\n\nOnce the application is up and running, you will be served with the Sign-in screen as follows:\n\n![6 login_screen](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image06.jpg)\n\nOnce the user is authenticated, the Authenticated screen will display the user details and button to handle Sign out as follows:\n\n![7 authenticated_screen](https://blog.openreplay.com/images/google-oauth-with-firebase-in-react-native/images/image07.jpg)\n\n## Conclusion\n\nThis guide helped you handle user authentication using Google OAuth provider. For any code references, check the application on this [GitHub repository](https://github.com/kimkimani/Firebase-Google-OAuth-using-in-React-Native).\n\nI hope you found this helpful. Happy coding!\n\n\n> A TIP FROM THE EDITOR: For another case study on authentication, don't miss our [Authentication In React 18 Using Firebase V9](https://blog.openreplay.com/authentication-in-react-18-using-firebase-v9/) article.\n\n\n[![newsletter](https://blog.openreplay.com/newsletter_Z1P0UIP.png)](https://newsletter.openreplay.com/) \n\n\n","user":{"name":"OpenReplay Tech Blog","username":"asayerio_techblog","twitter_username":"asayerio","github_username":"fkereki-OR","user_id":571683,"website_url":"https://blog.openreplay.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cmJLpv_K--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--IJigyy1u--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png"}}