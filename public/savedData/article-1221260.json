{"type_of":"article","id":1221260,"title":"React Native animated donut pie chart (reanimated + svg)","description":"Hey folks! As the title said we will build a circular chart with react-native-svg and...","readable_publish_date":"Nov 6","slug":"react-native-animated-donut-pie-chart-reanimated-svg-32od","path":"/dimaportenko/react-native-animated-donut-pie-chart-reanimated-svg-32od","url":"https://dev.to/dimaportenko/react-native-animated-donut-pie-chart-reanimated-svg-32od","comments_count":0,"public_reactions_count":2,"collection_id":null,"published_timestamp":"2022-11-06T20:20:42Z","positive_reactions_count":2,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--DwOkEG33--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyps7ilyx35c3g1jcbi1.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--GzB6_SEk--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyps7ilyx35c3g1jcbi1.png","canonical_url":"https://dev.to/dimaportenko/react-native-animated-donut-pie-chart-reanimated-svg-32od","created_at":"2022-10-16T13:57:33Z","edited_at":"2022-11-06T20:49:11Z","crossposted_at":null,"published_at":"2022-11-06T20:20:42Z","last_comment_at":"2022-11-06T20:20:42Z","reading_time_minutes":4,"tag_list":"reactnative, svg, reanimated","tags":["reactnative","svg","reanimated"],"body_html":"<p>Hey folks! As the title said we will build a circular chart with <code>react-native-svg</code> and <code>react-native-reanimated</code>. Our final result will look like</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4MK4oIcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4MK4oIcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif\" loading=\"lazy\" width=\"800\" height=\"800\" data-animated=\"true\"></a></p>\n\n<p>On refresh action, we're generating random data for our chart and showing it in an animated manner.</p>\n\n<p>Let's start with the <a href=\"https://github.com/dimaportenko/react-native-animated-chart-tutorial/tree/template\">template</a> which has code generating random chart data.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">PieChartData</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">percent</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}[]</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Since we have data we can start working on it's visualisation. Let's draw circle with <code>react-native-svg</code> first.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">Svg</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">Circle</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-native-svg</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">strokeWidth</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">center</span> <span class=\"o\">=</span> <span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">radius</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">-</span> <span class=\"nx\">strokeWidth</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">Svg</span> <span class=\"nx\">viewBox</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`0 0 </span><span class=\"p\">${</span><span class=\"nx\">size</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">size</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">Circle</span>\n    <span class=\"nx\">cx</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n    <span class=\"nx\">cy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n    <span class=\"nx\">r</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">radius</span><span class=\"p\">}</span>\n    <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">strokeWidth</span><span class=\"p\">}</span>\n    <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"dl\">'</span><span class=\"s1\">blue</span><span class=\"dl\">'</span><span class=\"p\">}</span>\n  <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span><span class=\"o\">&lt;</span><span class=\"sr\">/Svg</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7ltvJFXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aewn2m0bp54r6lqzj8w5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7ltvJFXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aewn2m0bp54r6lqzj8w5.png\" loading=\"lazy\" width=\"717\" height=\"718\"></a></p>\n\n<p>So we added the root <code>Svg</code> component with <code>viewBox</code> of 200 x 200 size. And <code>Circle</code> inside with center, radius, stroke width, and color. </p>\n\n<p>For the pie chart, we will need just a segment of a circle. We can archive it with <code>strokeDashoffset</code> and <code>strokeDasharray</code> params.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">circumference</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span> <span class=\"o\">*</span> <span class=\"nx\">radius</span><span class=\"p\">;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">Circle</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"nx\">strokeDashoffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"mf\">0.25</span><span class=\"p\">)}</span> <span class=\"c1\">// 25% circle segment</span>\n  <span class=\"nx\">strokeDasharray</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span><span class=\"p\">}</span>\n<span class=\"sr\">/</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XyzgDxb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w99wcjzd1bryicrva3ke.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XyzgDxb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w99wcjzd1bryicrva3ke.png\" loading=\"lazy\" width=\"800\" height=\"800\"></a></p>\n\n<p>First of all, we calculate the <code>circumference</code>. And if we want a circle segment length of 25% then the rest 75% suppose to be <code>strokeDashoffset</code> like <code>circumference * (1 - 0.25)</code>.</p>\n\n<p>Now we can loop over our data and draw all the chart segments.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Svg</span> <span class=\"nx\">viewBox</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`0 0 </span><span class=\"p\">${</span><span class=\"nx\">size</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">size</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Circle</span>\n      <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">color</span><span class=\"p\">}</span><span class=\"s2\">-</span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">}</span>\n      <span class=\"nx\">cx</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">cy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">r</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">radius</span><span class=\"p\">}</span>\n      <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">strokeWidth</span><span class=\"p\">}</span>\n      <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">color</span><span class=\"p\">}</span>\n      <span class=\"nx\">strokeDashoffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">percent</span><span class=\"p\">)}</span>\n      <span class=\"nx\">strokeDasharray</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span><span class=\"p\">}</span>\n    <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">))}</span>\n<span class=\"o\">&lt;</span><span class=\"sr\">/Svg</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7BVEqPmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tih58jsj2gb5isrm5c5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7BVEqPmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tih58jsj2gb5isrm5c5.png\" loading=\"lazy\" width=\"800\" height=\"800\"></a></p>\n\n<p>We drew segments but they place on top of each other. To fix this we can rotate each segment on a sum of the angles of previous segments.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">startAngles</span><span class=\"p\">,</span> <span class=\"nx\">setStartAngles</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">([]);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">refresh</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">generatedData</span> <span class=\"o\">=</span> <span class=\"nx\">generatePieChartData</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">let</span> <span class=\"nx\">angle</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"na\">angles</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"nx\">generatedData</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">angles</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">angle</span><span class=\"p\">);</span>\n    <span class=\"nx\">angle</span> <span class=\"o\">+=</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">percent</span> <span class=\"o\">*</span> <span class=\"mi\">360</span><span class=\"p\">;</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">setData</span><span class=\"p\">(</span><span class=\"nx\">generatedData</span><span class=\"p\">);</span>\n  <span class=\"nx\">setStartAngles</span><span class=\"p\">(</span><span class=\"nx\">angles</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"o\">&lt;</span><span class=\"nx\">Circle</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"nx\">originX</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n  <span class=\"nx\">originY</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n  <span class=\"nx\">rotation</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">startAngles</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">]}</span>\n<span class=\"sr\">/</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lyo_CFVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tte68c7x3bv8ej8jugl5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lyo_CFVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tte68c7x3bv8ej8jugl5.png\" loading=\"lazy\" width=\"800\" height=\"800\"></a></p>\n\n<p>To get an angle for a segment we need to multiply 360 (degrees in a circle) by the chart item percent. To rotate each segment around the center we also need to specify <code>originX</code> and <code>originY</code>. </p>\n\n<p>Ok, now we have a circle chart. Before starting animating it let's do small refactoring and move segment drawing in the separated component.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">PieChartSegment</span><span class=\"p\">:</span> <span class=\"nx\">FC</span><span class=\"o\">&lt;</span><span class=\"p\">{</span>\n  <span class=\"na\">center</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">radius</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">strokeWidth</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">circumference</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">angle</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">percent</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"nx\">center</span><span class=\"p\">,</span> <span class=\"nx\">radius</span><span class=\"p\">,</span> <span class=\"nx\">strokeWidth</span><span class=\"p\">,</span> <span class=\"nx\">circumference</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"p\">,</span> <span class=\"nx\">angle</span><span class=\"p\">,</span> <span class=\"nx\">percent</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Circle</span>\n      <span class=\"nx\">cx</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">cy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">r</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">radius</span><span class=\"p\">}</span>\n      <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">strokeWidth</span><span class=\"p\">}</span>\n      <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">color</span><span class=\"p\">}</span>\n      <span class=\"nx\">strokeDashoffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nx\">percent</span><span class=\"p\">)}</span>\n      <span class=\"nx\">strokeDasharray</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">circumference</span><span class=\"p\">}</span>\n      <span class=\"nx\">originX</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">originY</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">center</span><span class=\"p\">}</span>\n      <span class=\"nx\">rotation</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">angle</span><span class=\"p\">}</span>\n    <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, let's use the reanimated library. Create <code>AnimatedCircle</code> component and use instead <code>Circle</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">Animated</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-native-reanimated</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">AnimatedCircle</span> <span class=\"o\">=</span> <span class=\"nx\">Animated</span><span class=\"p\">.</span><span class=\"nx\">createAnimatedComponent</span><span class=\"p\">(</span><span class=\"nx\">Circle</span><span class=\"p\">);</span>\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then we add animated value <code>progress</code>. Pass <code>progress</code> to the <code>PieChartSegment</code> and animate it with <code>withTiming</code> in the <code>refresh</code> function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">Animated</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">useSharedValue</span><span class=\"p\">,</span> <span class=\"nx\">withTiming</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-native-reanimated</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">PieChart</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">strokeWidth</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">}:</span> <span class=\"nx\">PieChartProps</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">progress</span> <span class=\"o\">=</span> <span class=\"nx\">useSharedValue</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">refresh</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n\n    <span class=\"nx\">progress</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"nx\">progress</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">withTiming</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">duration</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"c1\">// ...</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">PieChartSegment</span>\n        <span class=\"c1\">// ...</span>\n        <span class=\"nx\">progress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">progress</span><span class=\"p\">}</span>\n      <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"c1\">// ...</span>\n  <span class=\"p\">)</span>\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And in the <code>PieChartSegment</code> component, let's animate the segment length from 0 to its actual length.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">animatedProps</span> <span class=\"o\">=</span> <span class=\"nx\">useAnimatedProps</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">strokeDashoffset</span> <span class=\"o\">=</span> <span class=\"nx\">interpolate</span><span class=\"p\">(</span>\n    <span class=\"nx\">progress</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"nx\">circumference</span><span class=\"p\">,</span> <span class=\"nx\">circumference</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nx\">percent</span><span class=\"p\">)],</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">strokeDashoffset</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">AnimatedCircle</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"nx\">animatedProps</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">animatedProps</span><span class=\"p\">}</span>\n  <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--P8HOMFbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jipnqsrcwcfxif2il035.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--P8HOMFbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jipnqsrcwcfxif2il035.gif\" loading=\"lazy\" width=\"800\" height=\"800\" data-animated=\"true\"></a></p>\n\n<p>Basically, we created <code>animatedProps</code> with <code>strokeDashoffset</code> interpolated value. </p>\n\n<p>And the last step I want to do here is to animate the start position of each segment. Unfortunately, we can't simply interpolate <code>rotation</code> property (tbh I don't know why it just isn't working as I expect it). But we can't use the usual React Native transform styles.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">animatedProps</span> <span class=\"o\">=</span> <span class=\"nx\">useAnimatedProps</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">rotateAngle</span> <span class=\"o\">=</span> <span class=\"nx\">interpolate</span><span class=\"p\">(</span><span class=\"nx\">progress</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">angle</span><span class=\"p\">]);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">strokeDashoffset</span><span class=\"p\">,</span>\n    <span class=\"na\">transform</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span><span class=\"na\">translateX</span><span class=\"p\">:</span> <span class=\"nx\">center</span><span class=\"p\">},</span>\n      <span class=\"p\">{</span><span class=\"na\">translateY</span><span class=\"p\">:</span> <span class=\"nx\">center</span><span class=\"p\">},</span>\n      <span class=\"p\">{</span><span class=\"na\">rotate</span><span class=\"p\">:</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">rotateAngle</span><span class=\"p\">}</span><span class=\"s2\">deg`</span><span class=\"p\">},</span>\n      <span class=\"p\">{</span><span class=\"na\">translateX</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"nx\">center</span><span class=\"p\">},</span>\n      <span class=\"p\">{</span><span class=\"na\">translateY</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"nx\">center</span><span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">AnimatedCircle</span>\n    <span class=\"c1\">// ..</span>\n    <span class=\"c1\">// rotation={angle}</span>\n    <span class=\"c1\">// @ts-ignore</span>\n    <span class=\"nx\">animatedProps</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">animatedProps</span><span class=\"p\">}</span>\n  <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4MK4oIcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4MK4oIcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif\" loading=\"lazy\" width=\"800\" height=\"800\" data-animated=\"true\"></a></p>\n\n<p>Tricky part here is that you have to translate segment to the center, make rotation and then translate it back. </p>\n\n<p>That's it. Final code is available on <a href=\"https://github.com/dimaportenko/react-native-animated-chart-tutorial\">github</a>. If you like it, please support me with likes and shares. Feel free to ask me anything in the comments. </p>\n\n","body_markdown":"Hey folks! As the title said we will build a circular chart with `react-native-svg` and `react-native-reanimated`. Our final result will look like\n\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif' style=\"width:375px;\" />\n<!-- ![final result image](./result.gif) -->\n\nOn refresh action, we're generating random data for our chart and showing it in an animated manner.\n\nLet's start with the [template](https://github.com/dimaportenko/react-native-animated-chart-tutorial/tree/template) which has code generating random chart data. \n\n```typescript\nexport type PieChartData = {\n  color: string;\n  percent: number;\n}[]\n```\n\nSince we have data we can start working on it's visualisation. Let's draw circle with `react-native-svg` first. \n\n```typescript\nimport Svg, {Circle} from 'react-native-svg';\n\nconst strokeWidth = 20;\nconst size = 200;\nconst center = size / 2;\nconst radius = (size - strokeWidth) / 2;\n\n<Svg viewBox={`0 0 ${size} ${size}`}>\n  <Circle\n    cx={center}\n    cy={center}\n    r={radius}\n    strokeWidth={strokeWidth}\n    stroke={'blue'}\n  />\n</Svg>\n```\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aewn2m0bp54r6lqzj8w5.png' style=\"width:375px;\" />\n\nSo we added the root `Svg` component with `viewBox` of 200 x 200 size. And `Circle` inside with center, radius, stroke width, and color. \n\nFor the pie chart, we will need just a segment of a circle. We can archive it with `strokeDashoffset` and `strokeDasharray` params.  \n\n```typescript\nconst circumference = 2 * Math.PI * radius;\n\n<Circle\n  // ...\n  strokeDashoffset={circumference * (1 - 0.25)} // 25% circle segment\n  strokeDasharray={circumference}\n/>\n```\n\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w99wcjzd1bryicrva3ke.png' style=\"width:375px;\" />\n\nFirst of all, we calculate the `circumference`. And if we want a circle segment length of 25% then the rest 75% suppose to be `strokeDashoffset` like `circumference * (1 - 0.25)`.\n\nNow we can loop over our data and draw all the chart segments.\n\n```typescript\n<Svg viewBox={`0 0 ${size} ${size}`}>\n  {data.map((item, index) => (\n    <Circle\n      key={`${item.color}-${index}`}\n      cx={center}\n      cy={center}\n      r={radius}\n      strokeWidth={strokeWidth}\n      stroke={item.color}\n      strokeDashoffset={circumference * (1 - item.percent)}\n      strokeDasharray={circumference}\n    />\n  ))}\n</Svg>\n```\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tih58jsj2gb5isrm5c5.png' style=\"width:375px;\" />\n\nWe drew segments but they place on top of each other. To fix this we can rotate each segment on a sum of the angles of previous segments. \n\n```typescript\nconst [startAngles, setStartAngles] = React.useState<number[]>([]);\n\nconst refresh = () => {\n  const generatedData = generatePieChartData();\n\n  let angle = 0;\n  const angles: number[] = [];\n  generatedData.forEach(item => {\n    angles.push(angle);\n    angle += item.percent * 360;\n  });\n\n  setData(generatedData);\n  setStartAngles(angles);\n};\n\n\n<Circle\n  // ...\n  originX={center}\n  originY={center}\n  rotation={startAngles[index]}\n/>\n```\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tte68c7x3bv8ej8jugl5.png' style=\"width:375px;\" />\n\nTo get an angle for a segment we need to multiply 360 (degrees in a circle) by the chart item percent. To rotate each segment around the center we also need to specify `originX` and `originY`. \n\nOk, now we have a circle chart. Before starting animating it let's do small refactoring and move segment drawing in the separated component. \n\n```typescript\nexport const PieChartSegment: FC<{\n  center: number;\n  radius: number;\n  strokeWidth: number;\n  color: string;\n  circumference: number;\n  angle: number;\n  percent: number;\n}> = ({center, radius, strokeWidth, circumference, color, angle, percent}) => {\n  return (\n    <Circle\n      cx={center}\n      cy={center}\n      r={radius}\n      strokeWidth={strokeWidth}\n      stroke={color}\n      strokeDashoffset={circumference * (1 - percent)}\n      strokeDasharray={circumference}\n      originX={center}\n      originY={center}\n      rotation={angle}\n    />\n  );\n};\n\n```\n\nFinally, let's use the reanimated library. Create `AnimatedCircle` component and use instead `Circle`.\n\n```typescript\nimport Animated from 'react-native-reanimated';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\n```\n\nThen we add animated value `progress`. Pass `progress` to the `PieChartSegment` and animate it with `withTiming` in the `refresh` function.\n\n```typescript\nimport Animated, {useSharedValue, withTiming} from 'react-native-reanimated';\n\n\nexport const PieChart = ({size = 200, strokeWidth = 20}: PieChartProps) => {\n  const progress = useSharedValue(0);\n  // ...\n\n  const refresh = () => {\n    // ...\n\n    progress.value = 0;\n    progress.value = withTiming(1, {\n      duration: 1000,\n    });\n  };\n\n  return (\n    // ...\n      <PieChartSegment\n        // ...\n        progress={progress}\n      />\n    // ...\n  )\n\n```\n\nAnd in the `PieChartSegment` component, let's animate the segment length from 0 to its actual length. \n\n```typescript \nconst animatedProps = useAnimatedProps(() => {\n  const strokeDashoffset = interpolate(\n    progress.value,\n    [0, 1],\n    [circumference, circumference * (1 - percent)],\n  );\n\n  return {\n    strokeDashoffset,\n  };\n});\n\nreturn (\n  <AnimatedCircle\n    // ...\n    animatedProps={animatedProps}\n  />\n);\n```\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jipnqsrcwcfxif2il035.gif' style=\"width:375px;\" />\n\n\nBasically, we created `animatedProps` with `strokeDashoffset` interpolated value. \n\nAnd the last step I want to do here is to animate the start position of each segment. Unfortunately, we can't simply interpolate `rotation` property (tbh I don't know why it just isn't working as I expect it). But we can't use the usual React Native transform styles. \n\n```typescript\nconst animatedProps = useAnimatedProps(() => {\n  // ...\n  const rotateAngle = interpolate(progress.value, [0, 1], [0, angle]);\n\n  return {\n    strokeDashoffset,\n    transform: [\n      {translateX: center},\n      {translateY: center},\n      {rotate: `${rotateAngle}deg`},\n      {translateX: -center},\n      {translateY: -center},\n    ],\n  };\n});\n\nreturn (\n  <AnimatedCircle\n    // ..\n    // rotation={angle}\n    // @ts-ignore\n    animatedProps={animatedProps}\n  />\n);\n```\n\n<img src='https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d5c2nhbihcbrt4ar7pj.gif' style=\"width:375px;\" />\n\nTricky part here is that you have to translate segment to the center, make rotation and then translate it back. \n\nThat's it. Final code is available on [github](https://github.com/dimaportenko/react-native-animated-chart-tutorial). If you like it, please support me with likes and shares. Feel free to ask me anything in the comments. \n\n","user":{"name":"Dima Portenko","username":"dimaportenko","twitter_username":"dimaportenko","github_username":"dimaportenko","user_id":691205,"website_url":"https://www.youtube.com/channel/UCReKeeIMZywvQoaZPZKzQbQ","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--dKxPg7Nx--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/691205/5920a71b-41d2-4e57-9790-46b85ef46f9a.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--cqLI6z_2--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/691205/5920a71b-41d2-4e57-9790-46b85ef46f9a.jpg"}}