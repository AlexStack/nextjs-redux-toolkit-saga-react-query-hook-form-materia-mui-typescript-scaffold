{"type_of":"article","id":1243416,"title":"Find out how Rapid Development with Serverless is like Lego!","description":"Many don't understand how to use a Rapid Development approach in Serverless. Even in the broader...","readable_publish_date":"Nov 4","slug":"find-out-how-rapid-development-with-serverless-is-like-lego-307d","path":"/serverlessedge/find-out-how-rapid-development-with-serverless-is-like-lego-307d","url":"https://dev.to/serverlessedge/find-out-how-rapid-development-with-serverless-is-like-lego-307d","comments_count":0,"public_reactions_count":1,"collection_id":null,"published_timestamp":"2022-11-04T14:31:56Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1243416.png","canonical_url":"https://theserverlessedge.com/find-out-how-rapid-development-with-serverless-is-like-lego/","created_at":"2022-11-04T14:31:56Z","edited_at":"2022-11-04T14:32:23Z","crossposted_at":null,"published_at":"2022-11-04T14:31:56Z","last_comment_at":"2022-11-04T14:31:56Z","reading_time_minutes":2,"tag_list":"serverless, cloud, aws, architecture","tags":["serverless","cloud","aws","architecture"],"body_html":"<p>Many don't understand how to use a Rapid Development approach in Serverless. Even in the broader architecture community. Adrian Cockroft has produced excellent talks on the subject. This short six minute video is a great example of one:</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/5siD210Grr4\" allowfullscreen loading=\"lazy\">\n</iframe>\n</p>\n\n<p>What is Rapid Development with Serverless? And why as an Architect is it an important to understand it compared to traditional methods?</p>\n\n<h2>\n  <a name=\"serverless-is-like-building-with-interoperable-lego-blocks\" href=\"#serverless-is-like-building-with-interoperable-lego-blocks\">\n  </a>\n  Serverless is like building with interoperable Lego Blocks\n</h2>\n\n<p>Adrian talks about Cloud Providers taking common industry patterns and needs, like ‘gateways’, compute, storage. And creating Managed Services that cater for the needs of teams. In AWS, your serverless gateway option would be an API Gateway. For Serverless Compute you might have Lambda. And for persistence you could have DynamoDB or Aurora.</p>\n\n<p>These Managed Services are the ‘lego blocks’. Within the Cloud Provider these blocks are highly interoperable, abstract in nature (you won’t know the inner workings) and usually highly configurable to your needs. You are able to put these building blocks together for higher order functions eg. business application. You could use an API Gateway Block integrated with a Lambda Function to run logic. And you could integrate with DynamoDB for persistence.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--D41l_ai2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hckwi1j9m4e2izlerjxs.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--D41l_ai2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hckwi1j9m4e2izlerjxs.png\" alt=\"Image description\" loading=\"lazy\" width=\"582\" height=\"381\"></a></p>\n\n<h2>\n  <a name=\"get-feedback-quickly\" href=\"#get-feedback-quickly\">\n  </a>\n  Get feedback quickly\n</h2>\n\n<p>Adrian is correct. A team can produce a working system within hours. Let’s examine this more deeply. The idea is that Serverless teams have a bias for action. They put lego blocks together. And put solutions in place, through rapid development.</p>\n\n<p>You need to understand that a serverless ecosystem is geared towards rapid experimentation and feedback. Test and Release cycles can be short, as in literally minutes. And as there is no provisioned physical infrastructure (that the team owns). Costs are accommodating and low.</p>\n\n<p>Serverless teams will favour a product mindset and be much more able to react and pivot to directional shifts from the business. Traditional cycles are not as accommodating to experimentation and rapid feedback driven approaches.</p>\n\n<h2>\n  <a name=\"embracing-the-enabling-constraints\" href=\"#embracing-the-enabling-constraints\">\n  </a>\n  Embracing the Enabling Constraints\n</h2>\n\n<p>Serverless provides team’s with constraints that guide their designs and how they assemble their architectures. In traditional architecture approaches there may be investment in working out interoperability and compatibility with Open Source and COTS solutions. Serverless-First and enabling constraints simply speed up the decision making process and allow for rapid development. These constraints guide the serverless architecture patterns of which there are many, that teams can adopt.</p>\n\n<p>The Rapid Development Approach using Serverless provides teams with access to useable building blocks. Teams can benefit from the principles of interoperability, abstraction, optimised ops and costs.</p>\n\n<p>And they can leverage it in a continuous development style workflow. This workflow will change how the industry thinks about software. And will ultimately help evolve it towards a Serverless-First industry.</p>\n\n<h2>\n  <a name=\"traditional-v-rapid-development\" href=\"#traditional-v-rapid-development\">\n  </a>\n  Traditional v Rapid Development\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Poel_vpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvf0tasym63gllrka5a6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Poel_vpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvf0tasym63gllrka5a6.png\" alt=\"Image description\" loading=\"lazy\" width=\"861\" height=\"494\"></a></p>\n\n","body_markdown":"Many don't understand how to use a Rapid Development approach in Serverless. Even in the broader architecture community. Adrian Cockroft has produced excellent talks on the subject. This short six minute video is a great example of one:\n\n{% embed https://www.youtube.com/watch?v=5siD210Grr4 %}\n\nWhat is Rapid Development with Serverless? And why as an Architect is it an important to understand it compared to traditional methods?\n\n## Serverless is like building with interoperable Lego Blocks\nAdrian talks about Cloud Providers taking common industry patterns and needs, like ‘gateways’, compute, storage. And creating Managed Services that cater for the needs of teams. In AWS, your serverless gateway option would be an API Gateway. For Serverless Compute you might have Lambda. And for persistence you could have DynamoDB or Aurora.\n\nThese Managed Services are the ‘lego blocks’. Within the Cloud Provider these blocks are highly interoperable, abstract in nature (you won’t know the inner workings) and usually highly configurable to your needs. You are able to put these building blocks together for higher order functions eg. business application. You could use an API Gateway Block integrated with a Lambda Function to run logic. And you could integrate with DynamoDB for persistence.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hckwi1j9m4e2izlerjxs.png)\n\n## Get feedback quickly\nAdrian is correct. A team can produce a working system within hours. Let’s examine this more deeply. The idea is that Serverless teams have a bias for action. They put lego blocks together. And put solutions in place, through rapid development.\n\nYou need to understand that a serverless ecosystem is geared towards rapid experimentation and feedback. Test and Release cycles can be short, as in literally minutes. And as there is no provisioned physical infrastructure (that the team owns). Costs are accommodating and low.\n\nServerless teams will favour a product mindset and be much more able to react and pivot to directional shifts from the business. Traditional cycles are not as accommodating to experimentation and rapid feedback driven approaches.\n\n## Embracing the Enabling Constraints\nServerless provides team’s with constraints that guide their designs and how they assemble their architectures. In traditional architecture approaches there may be investment in working out interoperability and compatibility with Open Source and COTS solutions. Serverless-First and enabling constraints simply speed up the decision making process and allow for rapid development. These constraints guide the serverless architecture patterns of which there are many, that teams can adopt.\n\nThe Rapid Development Approach using Serverless provides teams with access to useable building blocks. Teams can benefit from the principles of interoperability, abstraction, optimised ops and costs.\n\nAnd they can leverage it in a continuous development style workflow. This workflow will change how the industry thinks about software. And will ultimately help evolve it towards a Serverless-First industry.\n\n## Traditional v Rapid Development\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvf0tasym63gllrka5a6.png)\n","user":{"name":"The Serverless Edge","username":"serverlessedge","twitter_username":"ServerlessEdge","github_username":null,"user_id":749570,"website_url":"https://theserverlessedge.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--2AASGwpN--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/749570/0acfd448-75de-42b6-8107-297e396a3e43.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--qhErxjWb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/749570/0acfd448-75de-42b6-8107-297e396a3e43.jpg"}}