{"type_of":"article","id":1228820,"title":"Client-side Routing without the JavaScript","description":"It's been a while since I wrote a piece about a SolidJS technology innovation. It's been two years...","readable_publish_date":"Nov 7","slug":"client-side-routing-without-the-javascript-3k1i","path":"/this-is-learning/client-side-routing-without-the-javascript-3k1i","url":"https://dev.to/this-is-learning/client-side-routing-without-the-javascript-3k1i","comments_count":3,"public_reactions_count":68,"collection_id":null,"published_timestamp":"2022-11-07T16:17:37Z","positive_reactions_count":68,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--TaGVrRTZ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tsoaj9wss1h9ahpll3n.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--1n1i-vTO--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tsoaj9wss1h9ahpll3n.png","canonical_url":"https://dev.to/this-is-learning/client-side-routing-without-the-javascript-3k1i","created_at":"2022-10-24T23:32:03Z","edited_at":"2022-11-07T17:25:11Z","crossposted_at":null,"published_at":"2022-11-07T16:17:37Z","last_comment_at":"2022-11-07T21:13:25Z","reading_time_minutes":6,"tag_list":"javascript, solidjs, webdev, performance","tags":["javascript","solidjs","webdev","performance"],"body_html":"<p>It's been a while since I wrote a piece about a <a href=\"https://www.solidjs.com\">SolidJS</a> technology innovation. It's been two years now since we added Suspense on the server with Streaming SSR. And even longer to go back to when we first introduced Suspense for data fetching and concurrent rendering back in 2019. </p>\n\n<p>While React had introduced these concepts, implementing them for a fine-grained reactive system was a whole other sort of beast. Requiring a little imagination and completely different solutions that avoided diffing.</p>\n\n<p>And that is a similar feeling to the exploration we've been doing recently. Inspired equal parts from <a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\">React Server Components</a> and Island solutions like <a href=\"https://markojs.com/\">Marko</a> and <a href=\"https://astro.build/\">Astro</a>, Solid has made it's first steps into <a href=\"https://dev.to/this-is-learning/why-efficient-hydration-in-javascript-frameworks-is-so-challenging-1ca3\">Partial Hydration</a>. (<em>comparison at the bottom</em>)</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"solidstart\" href=\"#solidstart\">\n  </a>\n  SolidStart\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y4T0vuml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4mgz83hkkst75m5be6.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y4T0vuml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4mgz83hkkst75m5be6.jpeg\" alt=\"Image description\" loading=\"lazy\" width=\"612\" height=\"408\"></a></p>\n\n<p>Since releasing Solid 1.0 I've been kinda swamped. Between keeping open issues down and trying to check off more boxes for adoption I definitely have felt spread thin. Everything pointed to the need for a SSR meta-framework, an effort I started even before the 1.0 release.</p>\n\n<p>The community stepped up to help. But ultimately, for getting the beta out the door I would become the blocker. And Nikhil Saraf, never one to sit still, having recently been introduced to <a href=\"https://fresh.deno.dev/\">Fresh</a> wanted to see if he couldn't just add Islands to SolidStart.</p>\n\n<p>Wanting to keep things focused on a release, I agreed but told him to time-box it as I'd need his help the next day. The next day he showed me a demo where he did not only add Islands, recreating the Fresh experience, but he had added client-side routing.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"accidental-islands\" href=\"#accidental-islands\">\n  </a>\n  Accidental Islands\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--27O4Yc5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xc5lnbxuu1qnwg6xvu9.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--27O4Yc5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xc5lnbxuu1qnwg6xvu9.jpeg\" alt=\"Image description\" loading=\"lazy\" width=\"880\" height=\"495\"></a></p>\n\n<p>Now the demo was rough, but it was impressive. He'd taken one of my Hackernews demos and re-implemented the recursive Islands. What are recursive Islands.. that's when you project Islands in Islands:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">MyServerComponent</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;&gt;</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">&amp;&amp;</span> \n    <span class=\"o\">&lt;</span><span class=\"nx\">MyClientIsland</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">MyServerComponent</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">childData</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/MyClientIsland</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span><span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Why would you want this? Well, there is a rule with Islands that you cannot import and use Server only components in them. The reason is you don't want the client to be able to pass state to them. Why? Well if the client could pass state to them then they'd need to be able to update and since the idea is to not send this JavaScript to the browser this wouldn't work. Luckily <code>props.children</code> enforces this boundary pretty well. (Assuming you disallow passing render functions/render props across Island boundaries).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">MyClientIsland</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">setState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">createSignal</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// can't pass props to the children</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span><span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>How was he able to make this demo in such short order? Well, it was by chance. Solid's hydration works off of matching hierarchical IDs to templates instantiated in the DOM. They look something like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">data-hk=</span><span class=\"s\">\"0-0-1-0-2\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Each template increments a count and each nested component adds another digit. This is essential for our single-pass hydration. After all JSX can be created in any order and Suspense boundaries resolved at any time.</p>\n\n<p>But at a given depth all ids will be assigned in the same order client or server.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">Component</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">anotherDiv</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">hk</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span> <span class=\"o\">/&gt;</span> \n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">hk</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">anotherDiv</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span><span class=\"p\">}</span>\n\n<span class=\"c1\">// output</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">hk</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">hk</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Additionally, I had added a <code>&lt;NoHydration&gt;</code> component to suppress these IDs so that we could skip hydrating assets like links and stylesheets in the head. Things that only ran on the server and didn't need to run in the browser.</p>\n\n<p>And also unrelated, working on the Solid integration with Astro, I had added a mechanism to set a prefix for hydration roots to prevent the duplication of these IDs for unrelated islands.</p>\n\n<p>It just never occurred to me that we could feed our own IDs in as the prefix. And since it would just append on the end we could hydrate a Server rendered Solid page starting at any point on the page. With <code>&lt;NoHydration&gt;</code> we could stop hydrating at any point to isolate the children as server-only.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"hybrid-routing\" href=\"#hybrid-routing\">\n  </a>\n  Hybrid Routing\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ts_e_XJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl6otfhzrza38udsto3k.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ts_e_XJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl6otfhzrza38udsto3k.png\" alt=\"Image description\" loading=\"lazy\" width=\"880\" height=\"370\"></a></p>\n\n<p>For all the benefits of Islands and Partial Hydration, to not ship all the JavaScript, you need to not require that code in the browser. The moment you need to client render pages you need all the code to render the next page.</p>\n\n<p>While Technologies like <a href=\"https://turbo.hotwired.dev/\">Turbo</a> have been used to fetch and replace the HTML without fully reloading the page, people have noted this often felt clunky.</p>\n\n<p>But we had an idea a while back that we could take our nested routing and only replace HTML partials. Back in March, Ryan Turnquist(co-creator of Solid Router) made <a href=\"https://server-nested-routing-mk2.rturnq.workers.dev/\">this demo</a>. While not much of a visual demo it proved we could have this sort of functionality with only 1.3kb of JavaScript.</p>\n\n<p>The trick was that through event delegation of click events we could trigger a client router without hydrating the page. From there we could use AJAX to request the next page and pass along the previous page and the server would know from the route definition exactly what nested parts of the page it needed to render. With the returned HTML the client-side router could swap in the content.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"completing-the-picture\" href=\"#completing-the-picture\">\n  </a>\n  Completing the Picture\n</h2>\n\n<p>The original demo was rough, but it showed a lot of promise. It was still had the double data problem for server-only content and this was something we needed to address in the core. So we added detection for when a Solid Resource was created under a server-only portion of the page. We knew that if what would trigger the data fetching could only happen on the server there was no need to serialize it all. Islands already serialized their props passed in.</p>\n\n<p>We also took this opportunity to create a mechanism to pass reactive context through <code>hydrate</code> calls allowing Context to work in the browser between Islands seperated by server content.</p>\n\n<p>With those in place, we were ready for the recursive Hackernews comments demo:</p>\n\n\n<blockquote class=\"ltag__twitter-tweet\" data-url=\"https://twitter.com/ryancarniato/status/1578108737968971776\">\n\n  <div class=\"ltag__twitter-tweet__main\" data-url=\"https://twitter.com/ryancarniato/status/1578108737968971776\">\n    <div class=\"ltag__twitter-tweet__header\">\n      <img class=\"ltag__twitter-tweet__profile-image\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uEZUe6bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1200928608295849984/1A6owPq-_normal.jpg\" alt=\"Ryan Carniato profile image\" loading=\"lazy\">\n      <div class=\"ltag__twitter-tweet__full-name\">\n        Ryan Carniato\n      </div>\n      <div class=\"ltag__twitter-tweet__username\">\n        @ryancarniato\n      </div>\n      <div class=\"ltag__twitter-tweet__twitter-logo\">\n        <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg\" alt=\"twitter logo\" loading=\"lazy\">\n      </div>\n    </div>\n    <div class=\"ltag__twitter-tweet__body\">\n      Time for a different sort of Island's Hackernews Demo. <br><br>🚀<a href=\"https://twitter.com/solid_js\">@solid_js</a> + TypeScript + JSX<br>⚡️Built with SolidStart on <a href=\"https://twitter.com/vite_js\">@vite_js</a><br>🏝️Recursive Islands<br>🚫No duplicated data serialization<br>😎Server Nested Routing without Reload<br>🔥~5kb JS Payload<br><br><a href=\"https://t.co/c0xy4l9qzl\">solid-hn-islands.netlify.app</a>\n    </div>\n    <div class=\"ltag__twitter-tweet__date\">\n      19:43 PM - 06 Oct 2022\n    </div>\n\n\n    <div class=\"ltag__twitter-tweet__actions\">\n      <a href=\"https://twitter.com/intent/tweet?in_reply_to=1578108737968971776\" class=\"ltag__twitter-tweet__actions__button\">\n        <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg\" alt=\"Twitter reply action\" loading=\"lazy\">\n      </a>\n      <a href=\"https://twitter.com/intent/retweet?tweet_id=1578108737968971776\" class=\"ltag__twitter-tweet__actions__button\">\n        <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg\" alt=\"Twitter retweet action\" loading=\"lazy\">\n      </a>\n      <a href=\"https://twitter.com/intent/like?tweet_id=1578108737968971776\" class=\"ltag__twitter-tweet__actions__button\">\n        <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg\" alt=\"Twitter like action\" loading=\"lazy\">\n      </a>\n    </div>\n  </div>\n</blockquote>\n\n\n<p>But there was one thing we were missing. Swapping HTML was all good for new navigations but what about when you need to refresh part of the page? You wouldn't want to lose client state, input focus etc... Nikhil managed a version that did that. But ultimately we ended up using <a href=\"https://github.com/natemoo-re/micromorph\">micromorph</a> a light DOM diff written by Nate Moore (of <a href=\"https://astro.build/\">Astro</a>).</p>\n\n<p>And with that, we have ported the Taste movie app demo in its 13kb of JS glory. (Thanks to a gentle nudge from Addy Osmani, and the great work of Nikhil, David, and several members of the Solid community: dev-rb, Muhammad Zaki, Paolo Ricciuti, and others).</p>\n\n<p>The search page especially shows off reloading without losing client state. As you type the input doesn't lose focus even though it needs to update that whole nested panel.</p>\n\n<p><a href=\"https://solid-movies.app/\">Solid Movies Demo</a><br>\nAnd on <a href=\"https://github.com/solidjs/solid-start/tree/movies/examples/movies\">Github</a></p>\n\n<p>Just to give you an idea of how absurdly small this is. This is the total JavaScript navigating between two movie listings pages, then navigating into a movie in various frameworks with client-side routing from <a href=\"https://tastejs.com/movies/\">https://tastejs.com/movies/</a>.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Framework</th>\n<th>Demo</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Next</td>\n<td><a href=\"https://next-movies-zeta.vercel.app/\">https://next-movies-zeta.vercel.app/</a></td>\n<td>190kb</td>\n</tr>\n<tr>\n<td>Nuxt</td>\n<td><a href=\"https://movies.nuxt.space/\">https://movies.nuxt.space/</a></td>\n<td>90.8kb</td>\n</tr>\n<tr>\n<td>Angular</td>\n<td><a href=\"https://angular-movies-a12d3.web.app/\">https://angular-movies-a12d3.web.app/</a></td>\n<td>121kb</td>\n</tr>\n<tr>\n<td>SvelteKit</td>\n<td><a href=\"https://sveltekit-movies.netlify.app/\">https://sveltekit-movies.netlify.app/</a></td>\n<td>34.8kb</td>\n</tr>\n<tr>\n<td>Lit</td>\n<td><a href=\"https://lit-movies.netlify.app/\">https://lit-movies.netlify.app/</a></td>\n<td>108kb</td>\n</tr>\n<tr>\n<td>QwikCity</td>\n<td><a href=\"https://qwik-city-movies-wm.netlify.app/\">https://qwik-city-movies-wm.netlify.app/</a></td>\n<td>57.3kb</td>\n</tr>\n<tr>\n<td>SolidStart (experimental)</td>\n<td><a href=\"https://solid-movies.app\">https://solid-movies.app</a></td>\n<td>13.2kb</td>\n</tr>\n</tbody>\n</table></div>\n\n<blockquote>\n<p><strong>Note</strong>: Only the Solid demo is using server rendered partials so it is a bit of an unequal comparison. But the point is to emphasize the difference in size. Other frameworks are working on similar solutions, things like RSCs in <a href=\"https://nextjs.org/\">Next</a> and Containers in <a href=\"https://qwik.builder.io/\">Qwik</a>, but these are the demos that are available today.</p>\n</blockquote>\n\n\n<hr>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>The more apps we build this way, the more excited I am about the technology. It feels like a Single Page App in every way yet it's considerably smaller. Honestly, I surprise myself every time I open the network tab.</p>\n\n<p>We're still working on moving this out of experimental and solidifying the APIs. And there is more room to optimize on the server rendering side, but we think there are all the makings of a new sort of architecture here. And that's pretty cool.</p>\n\n<p>Follow our progress on this feature <a href=\"https://github.com/solidjs/solid-start/issues/400\">here</a>.</p>\n\n","body_markdown":"It's been a while since I wrote a piece about a [SolidJS](https://www.solidjs.com) technology innovation. It's been two years now since we added Suspense on the server with Streaming SSR. And even longer to go back to when we first introduced Suspense for data fetching and concurrent rendering back in 2019. \n\nWhile React had introduced these concepts, implementing them for a fine-grained reactive system was a whole other sort of beast. Requiring a little imagination and completely different solutions that avoided diffing.\n\nAnd that is a similar feeling to the exploration we've been doing recently. Inspired equal parts from [React Server Components](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html) and Island solutions like [Marko](https://markojs.com/) and [Astro](https://astro.build/), Solid has made it's first steps into [Partial Hydration](https://dev.to/this-is-learning/why-efficient-hydration-in-javascript-frameworks-is-so-challenging-1ca3). (*comparison at the bottom*)\n\n------------------\n\n## SolidStart\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4mgz83hkkst75m5be6.jpeg)\n\nSince releasing Solid 1.0 I've been kinda swamped. Between keeping open issues down and trying to check off more boxes for adoption I definitely have felt spread thin. Everything pointed to the need for a SSR meta-framework, an effort I started even before the 1.0 release.\n\nThe community stepped up to help. But ultimately, for getting the beta out the door I would become the blocker. And Nikhil Saraf, never one to sit still, having recently been introduced to [Fresh](https://fresh.deno.dev/) wanted to see if he couldn't just add Islands to SolidStart.\n\nWanting to keep things focused on a release, I agreed but told him to time-box it as I'd need his help the next day. The next day he showed me a demo where he did not only add Islands, recreating the Fresh experience, but he had added client-side routing.\n\n----------------------\n\n## Accidental Islands\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xc5lnbxuu1qnwg6xvu9.jpeg)\n\nNow the demo was rough, but it was impressive. He'd taken one of my Hackernews demos and re-implemented the recursive Islands. What are recursive Islands.. that's when you project Islands in Islands:\n\n```js\nfunction MyServerComponent(props) {\n  return <>{ props.data && \n    <MyClientIsland>\n      <MyServerComponent data={props.data.childData} />\n    </MyClientIsland>\n  }</>\n}\n```\nWhy would you want this? Well, there is a rule with Islands that you cannot import and use Server only components in them. The reason is you don't want the client to be able to pass state to them. Why? Well if the client could pass state to them then they'd need to be able to update and since the idea is to not send this JavaScript to the browser this wouldn't work. Luckily `props.children` enforces this boundary pretty well. (Assuming you disallow passing render functions/render props across Island boundaries).\n\n```js\nfunction MyClientIsland() {\n  const [state, setState] = createSignal();\n\n  // can't pass props to the children\n  return <div>{props.children}</div>\n}\n```\n\nHow was he able to make this demo in such short order? Well, it was by chance. Solid's hydration works off of matching hierarchical IDs to templates instantiated in the DOM. They look something like this:\n\n```html\n<div data-hk=\"0-0-1-0-2\" />\n```\n\nEach template increments a count and each nested component adds another digit. This is essential for our single-pass hydration. After all JSX can be created in any order and Suspense boundaries resolved at any time.\n\nBut at a given depth all ids will be assigned in the same order client or server.\n\n```js\nfunction Component() {\n  const anotherDiv = <div data-hk=\"1\" /> \n  return <div data-hk=\"2\">{anotherDiv}</div>\n}\n\n// output\n<div data-hk=\"2\">\n  <div data-hk=\"1\" />\n</div>\n```\n\nAdditionally, I had added a `<NoHydration>` component to suppress these IDs so that we could skip hydrating assets like links and stylesheets in the head. Things that only ran on the server and didn't need to run in the browser.\n\nAnd also unrelated, working on the Solid integration with Astro, I had added a mechanism to set a prefix for hydration roots to prevent the duplication of these IDs for unrelated islands.\n\nIt just never occurred to me that we could feed our own IDs in as the prefix. And since it would just append on the end we could hydrate a Server rendered Solid page starting at any point on the page. With `<NoHydration>` we could stop hydrating at any point to isolate the children as server-only.\n\n----------------------\n\n## Hybrid Routing\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl6otfhzrza38udsto3k.png)\n\nFor all the benefits of Islands and Partial Hydration, to not ship all the JavaScript, you need to not require that code in the browser. The moment you need to client render pages you need all the code to render the next page.\n\nWhile Technologies like [Turbo](https://turbo.hotwired.dev/) have been used to fetch and replace the HTML without fully reloading the page, people have noted this often felt clunky.\n\nBut we had an idea a while back that we could take our nested routing and only replace HTML partials. Back in March, Ryan Turnquist(co-creator of Solid Router) made [this demo](https://server-nested-routing-mk2.rturnq.workers.dev/). While not much of a visual demo it proved we could have this sort of functionality with only 1.3kb of JavaScript.\n\nThe trick was that through event delegation of click events we could trigger a client router without hydrating the page. From there we could use AJAX to request the next page and pass along the previous page and the server would know from the route definition exactly what nested parts of the page it needed to render. With the returned HTML the client-side router could swap in the content.\n\n-----------------\n\n## Completing the Picture\n\nThe original demo was rough, but it showed a lot of promise. It was still had the double data problem for server-only content and this was something we needed to address in the core. So we added detection for when a Solid Resource was created under a server-only portion of the page. We knew that if what would trigger the data fetching could only happen on the server there was no need to serialize it all. Islands already serialized their props passed in.\n\nWe also took this opportunity to create a mechanism to pass reactive context through `hydrate` calls allowing Context to work in the browser between Islands seperated by server content.\n\nWith those in place, we were ready for the recursive Hackernews comments demo:\n\n{% twitter 1578108737968971776 %}\n\nBut there was one thing we were missing. Swapping HTML was all good for new navigations but what about when you need to refresh part of the page? You wouldn't want to lose client state, input focus etc... Nikhil managed a version that did that. But ultimately we ended up using [micromorph](https://github.com/natemoo-re/micromorph) a light DOM diff written by Nate Moore (of [Astro](https://astro.build/)).\n\nAnd with that, we have ported the Taste movie app demo in its 13kb of JS glory. (Thanks to a gentle nudge from Addy Osmani, and the great work of Nikhil, David, and several members of the Solid community: dev-rb, Muhammad Zaki, Paolo Ricciuti, and others).\n\nThe search page especially shows off reloading without losing client state. As you type the input doesn't lose focus even though it needs to update that whole nested panel.\n\n[Solid Movies Demo](https://solid-movies.app/)\nAnd on [Github](https://github.com/solidjs/solid-start/tree/movies/examples/movies)\n\nJust to give you an idea of how absurdly small this is. This is the total JavaScript navigating between two movie listings pages, then navigating into a movie in various frameworks with client-side routing from https://tastejs.com/movies/.\n\n| Framework | Demo        | Size        |\n|-----------|-------------|-------------|\n| Next      | https://next-movies-zeta.vercel.app/ | 190kb |\n| Nuxt      | https://movies.nuxt.space/ | 90.8kb |\n| Angular   | https://angular-movies-a12d3.web.app/ | 121kb |\n| SvelteKit | https://sveltekit-movies.netlify.app/ | 34.8kb |\n| Lit       | https://lit-movies.netlify.app/ | 108kb |\n| QwikCity  | https://qwik-city-movies-wm.netlify.app/ | 57.3kb |\n| SolidStart (experimental) | https://solid-movies.app | 13.2kb |\n\n> **Note**: Only the Solid demo is using server rendered partials so it is a bit of an unequal comparison. But the point is to emphasize the difference in size. Other frameworks are working on similar solutions, things like RSCs in [Next](https://nextjs.org/) and Containers in [Qwik](https://qwik.builder.io/), but these are the demos that are available today.\n\n-----------------\n\n## Conclusion\n\nThe more apps we build this way, the more excited I am about the technology. It feels like a Single Page App in every way yet it's considerably smaller. Honestly, I surprise myself every time I open the network tab.\n\nWe're still working on moving this out of experimental and solidifying the APIs. And there is more room to optimize on the server rendering side, but we think there are all the makings of a new sort of architecture here. And that's pretty cool.\n\nFollow our progress on this feature [here](https://github.com/solidjs/solid-start/issues/400).\n","user":{"name":"Ryan Carniato","username":"ryansolid","twitter_username":"RyanCarniato","github_username":"ryansolid","user_id":186199,"website_url":"https://solidjs.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Bssq7IfD--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--alnzraxa--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg"},"organization":{"name":"This is Learning","username":"this-is-learning","slug":"this-is-learning","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Y_qiuPkj--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--YUtYH_M_--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png"}}