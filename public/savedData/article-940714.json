{"type_of":"article","id":940714,"title":"Component System with Material UI: Theme¬†API","description":"Material UI (now Mui) provides an arrange of React components ready to be used on any project, but...","readable_publish_date":"Jan 3","slug":"component-system-with-material-ui-theme-api-3e0h","path":"/gonzavic/component-system-with-material-ui-theme-api-3e0h","url":"https://dev.to/gonzavic/component-system-with-material-ui-theme-api-3e0h","comments_count":0,"public_reactions_count":3,"collection_id":16090,"published_timestamp":"2022-01-03T16:44:58Z","positive_reactions_count":3,"cover_image":null,"social_image":"https://dev.to/social_previews/article/940714.png","canonical_url":"https://dev.to/gonzavic/component-system-with-material-ui-theme-api-3e0h","created_at":"2021-12-30T20:01:14Z","edited_at":"2022-01-03T18:30:15Z","crossposted_at":null,"published_at":"2022-01-03T16:44:58Z","last_comment_at":"2022-01-03T16:44:58Z","reading_time_minutes":3,"tag_list":"react, mui, systems, design","tags":["react","mui","systems","design"],"body_html":"<p>Material UI (now Mui) provides an arrange of React components ready to be used on any project, but the true power of Mui comes when creating a Component System that maps any Design System using the theme api.</p>\n\n\n<hr>\n\n<p>This is the first post from a series which will attempt to create a Component System that maps an already created Design System: <a href=\"https://www.figma.com/file/a94lX91ZmYGIDBxvb8shwLn8/00.-Styleguide---Library?node-id=3671%3A30728\">VTEX Design Sistem</a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Q51SBCtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p7ddgnvsq2i1qxrfzrx.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Q51SBCtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p7ddgnvsq2i1qxrfzrx.png\" alt=\"Figma Preview\" loading=\"lazy\" width=\"880\" height=\"498\"></a></p>\n\n<p>There is something more than just the ability to create components system on top of the already created mui components that makes Material UI an awesome library to work with: <strong>High standards on how components works, and accessibility</strong></p>\n\n<p>I have taken the path to create a components system from scratch using any other styling method, and there is a point where some components are using some props and some others are using kind of the same ones, but slightly different, and this is a problem.</p>\n\n<p>Since Mui has a well defined way on how components should work and what props they should receive, you don't have to worry about maintaining the components abstraction.</p>\n\n<p>In order to create a component system first I'll explain some definitions that will help understand how it works‚Ä¶</p>\n\n<ul>\n<li><p><strong>Variant</strong>: A variant is an UI representation for a specific component state. For example: the already existing Mui Button variants:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NVh3PmoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0urt5s5fsw9sodgv9v0.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NVh3PmoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0urt5s5fsw9sodgv9v0.png\" alt=\"Mui buttons variants\" loading=\"lazy\" width=\"880\" height=\"83\"></a></p></li>\n<li><p><strong>createTheme</strong>: is a function Mui provides to overrides and create variants for the Mui components. </p></li>\n</ul>\n\n<h2>\n  <a name=\"how-to-setup-a-theme-in%C2%A0mui\" href=\"#how-to-setup-a-theme-in%C2%A0mui\">\n  </a>\n  How to setup a theme in¬†Mui\n</h2>\n\n<p>Mui provides a <code>createTheme</code> function and a <code>&lt;ThemeProvider /&gt;</code>component, which allows us to wrap our React app with the ThemeProvider component and pass it down a prop called <code>theme={createTheme({})}</code>, so that way, any Mui component rendered within this ThemeProvider is going to use the styles set before on the theme.</p>\n\n<p>The <strong>createTheme</strong> receives an object where you can override/create the styles for the already existing component variants or, create new ones.</p>\n\n<p>The &lt;<strong>ThemeProdiver</strong> /&gt; is a React component which wraps the whole application so all Mui children components can access the theme and therefore use the theme styling.</p>\n\n<p>Here is an example:</p>\n\n\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/GonzAVic/ca8e183b3e1e5ea741653f923024a2f7.js\"></script>\n</div>\n\n\n<p>You can see in the example above the object passed to the <code>createTheme</code> function has a well defined structure. It has a component property where you can list all supported Mui component with a \"Mui\" prefix.</p>\n\n<p>Then, the <code>stylesOverrides</code> and <code>variants</code> is where (how the name suggests) you can override the styles and create new variants.</p>\n\n<p>I'm going to explain how to override each Mui components and create new variants on the next posts. For now, I'm just going to set the colors and spacing‚Ä¶</p>\n\n<h2>\n  <a name=\"setting-the-color-palette%C2%A0\" href=\"#setting-the-color-palette%C2%A0\">\n  </a>\n  Setting the color palette¬†üë®üèª‚Äçüé®\n</h2>\n\n<p>Understanding the color configuration is crucial for styling correctly the Mui components. But anyway, remember you can always override that configuration for each Mui component later.</p>\n\n<p>Mui has a default set of colors, <a href=\"https://mui.com/customization/palette/#palette-colors\">you can check more info about this in here</a>.</p>\n\n<p>I'm creating the next example to add the Design System color guide into the Mui theme api.</p>\n\n\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/GonzAVic/ff62e149b517f12b2a9a2a47ef82fa40.js\"></script>\n</div>\n\n\n<p>In the example above I'm overriding all Mui defaults color values, and also I'm creating a new one: \"newColor\". You can see how it would be applied to the buttons components on the example below.</p>\n\n<p><iframe src=\"https://codesandbox.io/embed/9eim9?initialpath=/buttons&amp;module=/src/Buttons.js\" style=\"width:100%; height:calc(300px + 8vw); border:0; border-radius: 4px; overflow:hidden;\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" loading=\"lazy\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\">\n</iframe>\n</p>\n\n<p>Also, you can manage the color configuration for the light and dark mode in this palette object. But I'll dig more on that on another post.</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>Use the <code>&lt;ThemeProvider theme={createTheme({...})} /&gt;</code> to set the color values Mui components are going to use when they are rendered.</p>\n\n<p>Override and create more color palette values to set the design system color guide into the Mui component system.</p>\n\n","body_markdown":"Material UI (now Mui) provides an arrange of React components ready to be used on any project, but the true power of Mui comes when creating a Component System that maps any Design System using the theme api.\n\n---\n\nThis is the first post from a series which will attempt to create a Component System that maps an already created Design System: [VTEX Design Sistem](https://www.figma.com/file/a94lX91ZmYGIDBxvb8shwLn8/00.-Styleguide---Library?node-id=3671%3A30728)\n\n![Figma Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p7ddgnvsq2i1qxrfzrx.png)\n\nThere is something more than just the ability to create components system on top of the already created mui components that makes Material UI an awesome library to work with: **High standards on how components works, and accessibility**\n\nI have taken the path to create a components system from scratch using any other styling method, and there is a point where some components are using some props and some others are using kind of the same ones, but slightly different, and this is a problem.\n\nSince Mui has a well defined way on how components should work and what props they should receive, you don't have to worry about maintaining the components abstraction.\n\nIn order to create a component system first I'll explain some definitions that will help understand how it works‚Ä¶\n\n- **Variant**: A variant is an UI representation for a specific component state. For example: the already existing Mui Button variants:\n![Mui buttons variants](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0urt5s5fsw9sodgv9v0.png)\n\n- **createTheme**: is a function Mui provides to overrides and create variants for the Mui components. \n\n\n## How to setup a theme in¬†Mui\nMui provides a `createTheme` function and a `<ThemeProvider /> `component, which allows us to wrap our React app with the ThemeProvider component and pass it down a prop called `theme={createTheme({})}`, so that way, any Mui component rendered within this ThemeProvider is going to use the styles set before on the theme.\n\nThe **createTheme** receives an object where you can override/create the styles for the already existing component variants or, create new ones.\n\nThe <**ThemeProdiver** /> is a React component which wraps the whole application so all Mui children components can access the theme and therefore use the theme styling.\n\nHere is an example:\n\n{% gist https://gist.github.com/GonzAVic/ca8e183b3e1e5ea741653f923024a2f7 %}\n\nYou can see in the example above the object passed to the `createTheme` function has a well defined structure. It has a component property where you can list all supported Mui component with a \"Mui\" prefix.\n\nThen, the `stylesOverrides` and `variants` is where (how the name suggests) you can override the styles and create new variants.\n\nI'm going to explain how to override each Mui components and create new variants on the next posts. For now, I'm just going to set the colors and spacing‚Ä¶\n\n## Setting the color palette¬†üë®üèª‚Äçüé®\nUnderstanding the color configuration is crucial for styling correctly the Mui components. But anyway, remember you can always override that configuration for each Mui component later.\n\nMui has a default set of colors, [you can check more info about this in here](https://mui.com/customization/palette/#palette-colors).\n\nI'm creating the next example to add the Design System color guide into the Mui theme api.\n\n{% gist https://gist.github.com/GonzAVic/ff62e149b517f12b2a9a2a47ef82fa40 %}\n\nIn the example above I'm overriding all Mui defaults color values, and also I'm creating a new one: \"newColor\". You can see how it would be applied to the buttons components on the example below.\n\n{% codesandbox 9eim9 initialpath=/buttons module=/src/Buttons.js %}\n\nAlso, you can manage the color configuration for the light and dark mode in this palette object. But I'll dig more on that on another post.\n\n\n## Conclusion\nUse the `<ThemeProvider theme={createTheme({...})} />` to set the color values Mui components are going to use when they are rendered.\n\nOverride and create more color palette values to set the design system color guide into the Mui component system.\n\n\n\n\n\n\n\n\n\n\n\n","user":{"name":"Victor Gonzalez","username":"gonzavic","twitter_username":"Vic_E_Gonzalez","github_username":"GonzAVic","user_id":783300,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UyipG34E--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/783300/d3a769e3-aa29-45c6-84a5-9c0f809a4718.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--0G1jGJ8O--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/783300/d3a769e3-aa29-45c6-84a5-9c0f809a4718.jpg"}}