{"type_of":"article","id":1246602,"title":"De HTML a PDF","description":"Para todo aquel que esté necesitando crear archivos PDF de forma programática en base a contenido...","readable_publish_date":"Nov 7","slug":"de-html-a-pdf-2gmb","path":"/ajest/de-html-a-pdf-2gmb","url":"https://dev.to/ajest/de-html-a-pdf-2gmb","comments_count":0,"public_reactions_count":2,"collection_id":null,"published_timestamp":"2022-11-07T14:13:48Z","positive_reactions_count":2,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1246602.png","canonical_url":"https://dev.to/ajest/de-html-a-pdf-2gmb","created_at":"2022-11-07T14:05:26Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T14:13:48Z","last_comment_at":"2022-11-07T14:13:48Z","reading_time_minutes":5,"tag_list":"javascript, html, webdev, php","tags":["javascript","html","webdev","php"],"body_html":"<p>Para todo aquel que esté necesitando crear archivos PDF de forma programática en base a contenido dinámico en un navegador web o con una API, comparto mi experiencia y las conclusiones que fui sacando en base a la rápida investigación que realicé y en las prueba que hice.</p>\n\n<p>Podemos decir que este problema se puede resolver de varias formas:</p>\n\n<ol>\n<li>\"Imprimir\" la página entera que queremos transformar en PDF (del lado del cliente).</li>\n<li>Utilizar una librería llamada html2pdf (del lado del cliente).</li>\n<li>Utilizar una librería llamada jsPDF (del lado del cliente y del servidor)</li>\n<li>Utilizar un paquete de PHP llamado DOMPDF (del lado del servidor)</li>\n</ol>\n\n<p>Analicemos estas posibles soluciones y sus pros y contras:</p>\n\n<h2>\n  <a name=\"1-imprimir\" href=\"#1-imprimir\">\n  </a>\n  1.- Imprimir\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p3x2OP3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fn9kpu995q7h694j9r0.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p3x2OP3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fn9kpu995q7h694j9r0.png\" alt=\"Ejemplo de Mercado Libre \" loading=\"lazy\" width=\"880\" height=\"545\"></a></p>\n\n<p>El primer enfoque quizás pueda ser el más fácil. Podemos maquetar la página con la tecnología que se nos ocurra para que luego el navegador y su opción de \"Guardar como PDF\" haga el resto.</p>\n\n<p>Pros:</p>\n\n<ul>\n<li>No necesitamos instalar ninguna dependencia</li>\n<li>El navegador intentará \"renderizar\" aquello que es texto como tal (etiquetas a, p, h1, h2, etc)</li>\n</ul>\n\n<p>Contras:</p>\n\n<ul>\n<li>Los sistemas operativos brindarán distintas opciones a la hora de elegir esta opción, esto significa que incluso puede no aparecer la opción \"Guardar como PDF\"</li>\n<li>Muchas veces el menú de \"Imprimir\" ofrecerá distintos tamaños de hoja, lo que hará que nuestra maqueta tenga que adaptarse a muchos tipos de tamaño si queremos evitar que alguien cree un archivo PDF que se rompa. Los tamaños pueden ser muy variados</li>\n<li>Si bien mencionamos como un punto a favor la capacidad del navegador de entender qué es un texto y renderizarlo como tal, esta funcionalidad no es perfecta. Se verá afectada por las reglas CSS que estemos usando</li>\n<li>El menú de imprimir no es un mini navegador, es decir que interpretará las instrucciones CSS de forma distinta que nuestra navegador, y esto incluso variará de navegador a navegador, así que hacerlo compatible requerirá de que trabajemos con muchos navegadores relevantes para nosotros</li>\n<li>Esta funcionalidad es del lado del cliente y requiere que estemos en la página en sí, no podemos automatizarlo de forma sencilla, quizás habría que utilizar alguna herramienta del tipo Puppeteer o Playwright o levantar un popup de html</li>\n<li>Requiere dos o tres clicks hasta obtener el resultado deseado lo cual puede ser molesto e incluso imposible de entender para algunos usuarios</li>\n</ul>\n\n<p>Por último, se debe mencionar que ya que el menú de imprimir no interpretará de forma perfecta nuestro CSS, lo más posible es que tengamos que crear otro documento de CSS especialmente diseñado para imprimir. Esto no es necesariamente algo negativo, por eso no está dentro del listado de contras, pero sí que generará la necesidad de hacer algo de trabajo extra.</p>\n\n<h2>\n  <a name=\"2-html2pdf\" href=\"#2-html2pdf\">\n  </a>\n  2.- html2pdf\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fhubhDj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf1z2dyfmern2rkjc8qs.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fhubhDj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf1z2dyfmern2rkjc8qs.png\" alt=\"html2pdf\" loading=\"lazy\" width=\"880\" height=\"375\"></a></p>\n\n<p>Esta librería escrita en Javascript está disponible en <em>npmjs</em> (<a href=\"https://www.npmjs.com/package/html2pdf.js/v/0.9.0\">https://www.npmjs.com/package/html2pdf.js/v/0.9.0</a>). Es en una herramienta para tomar lo que aparece en la página y exportarla a PDF. La técnica que usa es, dicho de forma coloquial, sacarle una \"foto\" a la página utilizando canvas, crear una imagen e incrustarla en el archivo PDF resultante.</p>\n\n<p>Pros:</p>\n\n<ul>\n<li>Podemos usar la maqueta y tecnología que más nos guste ya que esta librería se encargará de que llegue al PDF de forma idéntica. (Hay excepciones)</li>\n</ul>\n\n<p>Contras:</p>\n\n<ul>\n<li>Al ser una suerte de imagen incrustada en el archivo PDF, las piezas de nuestra composición que sean TEXTO no se renderizará como tal, con todo lo que eso implica, por ejemplo que se pixelará al hacer Zoom. (Los links sí funcionan)</li>\n<li>Si bien el concepto es bastante simple, se requiere entender y ajustar las opciones de configuración de esta librería para obtener el resultado deseado.</li>\n<li>Las imágenes deben contemplar el problema de CORS, para lo cual muchos sencillamente optan por utilizar imágenes vía base64</li>\n</ul>\n\n<h2>\n  <a name=\"3-jspdf\" href=\"#3-jspdf\">\n  </a>\n  3.- jsPDF\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UmaQscp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jiz1fx8ev0qnnj993.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UmaQscp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jiz1fx8ev0qnnj993.png\" alt=\"jsPDF\" loading=\"lazy\" width=\"588\" height=\"267\"></a></p>\n\n<p>Otra librería para la creación de documentos PDF, pero en este caso no solo depende de una página sino que también se puede crear un documento de forma programática utilizando la API provista. (<a href=\"https://parall.ax/products/jspdf\">https://parall.ax/products/jspdf</a>).</p>\n\n<p>Pros:</p>\n\n<ul>\n<li>Permite dos enfoques para resolver el mismo problema, lo cuál puede ser conveniente en algún caso</li>\n<li>Podemos usar la maqueta y tecnología que más nos guste ya que esta librería se encargará de que llegue al PDF de forma idéntica, ya que tiene la capacidad de utilizar la misma técnica de convertir la página a CANVAS para luego crear el documento deseado</li>\n<li>Es una librería muy utilizada y tiene buen soporte, está vigente</li>\n<li>Tiene una opción que intenta resolver el problema de textos cortados a la mitad cuando pasamos de una página a otra</li>\n<li>Se puede utilizar en Node.js</li>\n</ul>\n\n<p>Contras:</p>\n\n<ul>\n<li>Si se decide utilizar la funcionalidad de crear el documento en base a la API provista, no será tan fácil crear composiciones complejas que quizás con tecnologías web sí es más sencillo de resolver</li>\n</ul>\n\n<h2>\n  <a name=\"4-dompdf\" href=\"#4-dompdf\">\n  </a>\n  4.- DOMPDF\n</h2>\n\n<p>Ya que hablamos de tecnologías web, hablemos de PHP. Si necesitamos una solución similar a la de jsPDF pero del lado del servidor y con PHP, este es el paquete a elegir. Incluso tiene una adaptación para que se instale sin problemas en Laravel. Este es el sitio oficial: <a href=\"https://dompdf.github.io/\">https://dompdf.github.io/</a><br>\nEste paquete puede ser utilizando con dos enfoques: Crear el documento con la API que nos provee (similar a jsPDF) ó crearlo en base a un HTML que le proveamos, no convertirá el HTML en canvas pero intentará resolver las piezas visuales  que aparezcan.</p>\n\n<p>Pros:</p>\n\n<ul>\n<li>Permite dos enfoques para resolver el mismo problema, lo cuál puede ser conveniente en algún caso</li>\n<li>Es una librería muy utilizada y tiene buen soporte, está vigente</li>\n<li>La transformación de HTML a PDF contempla el correcto renderizado de los textos excepto para elementos de formularios (inputs, textareas, etc)</li>\n<li>Puede resolver el problema de textos cortados a la mitad cuando pasamos de una página a otra</li>\n</ul>\n\n<p>Contras:</p>\n\n<ul>\n<li>La compatibilidad con CSS es oficialmente la de CSS 2.1 y no de CSS3, aunque es cierto que sí interpreta bien algunas cosas de CSS3.</li>\n<li>Si se decide utilizar la funcionalidad de crear el documento en base a la API provista, no será tan fácil crear composiciones complejas que quizás con tecnologías web sí es más sencillo de resolver</li>\n</ul>\n\n<h2>\n  <a name=\"conclusi%C3%B3n\" href=\"#conclusi%C3%B3n\">\n  </a>\n  Conclusión\n</h2>\n\n<p>Quizás la conclusión más sencilla sería la de utilizar jsPDF, pero eso dependerá más factores relacionados con el scope y características del proyecto en el que estamos trabajando.<br>\nEspero que este breve artículo pueda ser útil para aquel que esté necesitando una guía rápida y sencilla de esta funcionalidad.<br>\nOtro buen recurso es una pregunta que hicieron en stackoverflow (en inglés): <a href=\"https://stackoverflow.com/questions/18191893/generate-pdf-from-html-in-div-using-javascript\">https://stackoverflow.com/questions/18191893/generate-pdf-from-html-in-div-using-javascript</a><br>\nEste recurso tiene incluso algunos ejemplos de implementación y técnicas para evitar algunos problema de las soluciones antes mencionadas. </p>\n\n","body_markdown":"Para todo aquel que esté necesitando crear archivos PDF de forma programática en base a contenido dinámico en un navegador web o con una API, comparto mi experiencia y las conclusiones que fui sacando en base a la rápida investigación que realicé y en las prueba que hice.\n\nPodemos decir que este problema se puede resolver de varias formas:\n\n1. \"Imprimir\" la página entera que queremos transformar en PDF (del lado del cliente).\n2. Utilizar una librería llamada html2pdf (del lado del cliente).\n3. Utilizar una librería llamada jsPDF (del lado del cliente y del servidor)\n4. Utilizar un paquete de PHP llamado DOMPDF (del lado del servidor)\n\nAnalicemos estas posibles soluciones y sus pros y contras:\n\n\n## 1.- Imprimir\n![Ejemplo de Mercado Libre ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fn9kpu995q7h694j9r0.png)\n\nEl primer enfoque quizás pueda ser el más fácil. Podemos maquetar la página con la tecnología que se nos ocurra para que luego el navegador y su opción de \"Guardar como PDF\" haga el resto.\n\nPros:\n\n- No necesitamos instalar ninguna dependencia\n- El navegador intentará \"renderizar\" aquello que es texto como tal (etiquetas a, p, h1, h2, etc)\n\nContras:\n\n- Los sistemas operativos brindarán distintas opciones a la hora de elegir esta opción, esto significa que incluso puede no aparecer la opción \"Guardar como PDF\"\n- Muchas veces el menú de \"Imprimir\" ofrecerá distintos tamaños de hoja, lo que hará que nuestra maqueta tenga que adaptarse a muchos tipos de tamaño si queremos evitar que alguien cree un archivo PDF que se rompa. Los tamaños pueden ser muy variados\n- Si bien mencionamos como un punto a favor la capacidad del navegador de entender qué es un texto y renderizarlo como tal, esta funcionalidad no es perfecta. Se verá afectada por las reglas CSS que estemos usando\n- El menú de imprimir no es un mini navegador, es decir que interpretará las instrucciones CSS de forma distinta que nuestra navegador, y esto incluso variará de navegador a navegador, así que hacerlo compatible requerirá de que trabajemos con muchos navegadores relevantes para nosotros\n- Esta funcionalidad es del lado del cliente y requiere que estemos en la página en sí, no podemos automatizarlo de forma sencilla, quizás habría que utilizar alguna herramienta del tipo Puppeteer o Playwright o levantar un popup de html\n- Requiere dos o tres clicks hasta obtener el resultado deseado lo cual puede ser molesto e incluso imposible de entender para algunos usuarios\n\nPor último, se debe mencionar que ya que el menú de imprimir no interpretará de forma perfecta nuestro CSS, lo más posible es que tengamos que crear otro documento de CSS especialmente diseñado para imprimir. Esto no es necesariamente algo negativo, por eso no está dentro del listado de contras, pero sí que generará la necesidad de hacer algo de trabajo extra.\n\n\n## 2.- html2pdf\n![html2pdf](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf1z2dyfmern2rkjc8qs.png)\n\nEsta librería escrita en Javascript está disponible en *npmjs* (https://www.npmjs.com/package/html2pdf.js/v/0.9.0). Es en una herramienta para tomar lo que aparece en la página y exportarla a PDF. La técnica que usa es, dicho de forma coloquial, sacarle una \"foto\" a la página utilizando canvas, crear una imagen e incrustarla en el archivo PDF resultante.\n\nPros:\n\n- Podemos usar la maqueta y tecnología que más nos guste ya que esta librería se encargará de que llegue al PDF de forma idéntica. (Hay excepciones)\n\nContras:\n\n- Al ser una suerte de imagen incrustada en el archivo PDF, las piezas de nuestra composición que sean TEXTO no se renderizará como tal, con todo lo que eso implica, por ejemplo que se pixelará al hacer Zoom. (Los links sí funcionan)\n- Si bien el concepto es bastante simple, se requiere entender y ajustar las opciones de configuración de esta librería para obtener el resultado deseado.\n- Las imágenes deben contemplar el problema de CORS, para lo cual muchos sencillamente optan por utilizar imágenes vía base64\n\n\n## 3.- jsPDF\n![jsPDF](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jiz1fx8ev0qnnj993.png)\n\nOtra librería para la creación de documentos PDF, pero en este caso no solo depende de una página sino que también se puede crear un documento de forma programática utilizando la API provista. (https://parall.ax/products/jspdf).\n\nPros:\n\n- Permite dos enfoques para resolver el mismo problema, lo cuál puede ser conveniente en algún caso\n- Podemos usar la maqueta y tecnología que más nos guste ya que esta librería se encargará de que llegue al PDF de forma idéntica, ya que tiene la capacidad de utilizar la misma técnica de convertir la página a CANVAS para luego crear el documento deseado\n- Es una librería muy utilizada y tiene buen soporte, está vigente\n- Tiene una opción que intenta resolver el problema de textos cortados a la mitad cuando pasamos de una página a otra\n- Se puede utilizar en Node.js\n\nContras:\n\n- Si se decide utilizar la funcionalidad de crear el documento en base a la API provista, no será tan fácil crear composiciones complejas que quizás con tecnologías web sí es más sencillo de resolver\n\n\n## 4.- DOMPDF\n\nYa que hablamos de tecnologías web, hablemos de PHP. Si necesitamos una solución similar a la de jsPDF pero del lado del servidor y con PHP, este es el paquete a elegir. Incluso tiene una adaptación para que se instale sin problemas en Laravel. Este es el sitio oficial: https://dompdf.github.io/\nEste paquete puede ser utilizando con dos enfoques: Crear el documento con la API que nos provee (similar a jsPDF) ó crearlo en base a un HTML que le proveamos, no convertirá el HTML en canvas pero intentará resolver las piezas visuales  que aparezcan.\n\nPros:\n\n- Permite dos enfoques para resolver el mismo problema, lo cuál puede ser conveniente en algún caso\n- Es una librería muy utilizada y tiene buen soporte, está vigente\n- La transformación de HTML a PDF contempla el correcto renderizado de los textos excepto para elementos de formularios (inputs, textareas, etc)\n- Puede resolver el problema de textos cortados a la mitad cuando pasamos de una página a otra\n\nContras:\n\n- La compatibilidad con CSS es oficialmente la de CSS 2.1 y no de CSS3, aunque es cierto que sí interpreta bien algunas cosas de CSS3.\n- Si se decide utilizar la funcionalidad de crear el documento en base a la API provista, no será tan fácil crear composiciones complejas que quizás con tecnologías web sí es más sencillo de resolver\n\n## Conclusión\n\nQuizás la conclusión más sencilla sería la de utilizar jsPDF, pero eso dependerá más factores relacionados con el scope y características del proyecto en el que estamos trabajando.\nEspero que este breve artículo pueda ser útil para aquel que esté necesitando una guía rápida y sencilla de esta funcionalidad.\nOtro buen recurso es una pregunta que hicieron en stackoverflow (en inglés): https://stackoverflow.com/questions/18191893/generate-pdf-from-html-in-div-using-javascript\nEste recurso tiene incluso algunos ejemplos de implementación y técnicas para evitar algunos problema de las soluciones antes mencionadas. ","user":{"name":"Pablo Fumarola","username":"ajest","twitter_username":null,"github_username":"ajest","user_id":446788,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--w5StRqtB--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/446788/336532e8-7244-471a-b387-f419c8c5b9af.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Po5BfHQT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/446788/336532e8-7244-471a-b387-f419c8c5b9af.jpeg"}}