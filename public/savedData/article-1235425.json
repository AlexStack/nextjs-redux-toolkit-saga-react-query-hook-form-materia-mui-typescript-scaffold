{"type_of":"article","id":1235425,"title":"ESLint in 2022, from a beginner's point of view ;)","description":"Hey, there. In quick work, it's important to say that I'm a beginner dev and this is my first post,...","readable_publish_date":"Oct 29","slug":"eslint-in-2022-from-a-beginners-point-of-view--4b2a","path":"/daniel__bernardino/eslint-in-2022-from-a-beginners-point-of-view--4b2a","url":"https://dev.to/daniel__bernardino/eslint-in-2022-from-a-beginners-point-of-view--4b2a","comments_count":0,"public_reactions_count":3,"collection_id":null,"published_timestamp":"2022-10-29T14:32:49Z","positive_reactions_count":3,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--epMjIhDM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r04p6zstbgwd5mud8s4.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0jJGGT3q--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r04p6zstbgwd5mud8s4.png","canonical_url":"https://dev.to/daniel__bernardino/eslint-in-2022-from-a-beginners-point-of-view--4b2a","created_at":"2022-10-29T14:32:50Z","edited_at":"2022-10-29T14:47:59Z","crossposted_at":null,"published_at":"2022-10-29T14:32:49Z","last_comment_at":"2022-10-29T14:32:49Z","reading_time_minutes":6,"tag_list":"prettier, tutorial, productivity, eslint","tags":["prettier","tutorial","productivity","eslint"],"body_html":"<p><em>Hey, there. In quick work, it's important to say that I'm a beginner dev and this is my first post, and maybe I have a little \"naive\" view of Linters. In that case, I hope for your help in the comments. Let's get to the point.</em></p>\n\n<h2>\n  <a name=\"installation\" href=\"#installation\">\n  </a>\n  Installation\n</h2>\n\n<p>If you know a little about package managers, any installation will be easy, look in the <a href=\"https://eslint.org/docs/latest/user-guide/getting-started\">eslint</a> documentation.</p>\n\n<p>Anyway, I'll leave below the list of commands for you to do this, but try the documentation, because it can update, well, anytime.</p>\n\n<h3>\n  <a name=\"first-of-all\" href=\"#first-of-all\">\n  </a>\n  First of all,\n</h3>\n\n<p>We are in a situation where, in your code editor <em>(I'm using vscode)</em>, you don't have <strong>any extensions or settings already changed</strong> by you to use linters. Please pay attention to this.</p>\n\n<p>And you need to start your project, It could be an <code>npm init</code>, it could be <code>npm init -y</code>, it could be a <code>create-react-app</code>, <code>vite</code>, it doesn't matter so much.</p>\n\n<p>Start it however you feel comfortable.</p>\n\n<h3>\n  <a name=\"now-yes-install-eslint\" href=\"#now-yes-install-eslint\">\n  </a>\n  Now yes, install eslint\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm init @eslint/config\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This command will already create a <code>.eslintrc</code> folder (where you configure eslint) and will ask you some questions. You're free to answer each one because it depends on your type of project and your desire as well.</p>\n\n<p>I choose these options:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? How would you like to use ESLint? … \n  To check syntax only\n  To check syntax and find problems\n▸ To check syntax, find problems, and enforce code style\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Choosing a code style already gives you a set of rules that a lot of people use, in all cases, it's good to use.</p>\n\n<p>Next question.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? What type of modules does your project use? … \n▸ JavaScript modules (import/export)\n  CommonJS (require/exports)\n  None of these\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Understand this part as the way you import and export things. requise are already going out of fashion, so to speak, usually, your choice will be the first option.</p>\n\n<p>Next.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? Which framework does your project use? … \n▸ React\n  Vue.js\n  None of these\n\n? Does your project use TypeScript? ‣ No / Yes\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I'm using React and in this project, there's no need to apply Typescript</p>\n\n<p>We're just starting!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? Where does your code run? …  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n✔ Browser\n✔ Node\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Normally you will leave both options checked, but feel free to choose where your code will run.</p>\n\n<p>Next!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? How would you like to define a style for your project? … \n▸ Use a popular style guide\n  Answer questions about your style\n\n? Which style guide do you want to follow? … \n▸ Airbnb: https://github.com/airbnb/javascript\n  Standard: https://github.com/standard/standard\n  Google: https://github.com/google/eslint-config-google\n  XO: https://github.com/xojs/eslint-config-xo\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I chose Airbnb to demo and it's also the one I use the most, but feel free to inquire about other famous style guides</p>\n\n<p>More one!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? What format do you want your config file to be in? … \n  JavaScript\n  YAML\n▸ JSON\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I like to use JSON format because normally the other settings, by default, come in JSON. The difference between them is very little.</p>\n\n<p>Next question!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>? Would you like to install them now? ‣ No / Yes\n\n? Which package manager do you want to use? … \n▸ npm\n  yarn\n  pnpm\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I don't know what happens if you don't install it now, you might have to do it all over again, but anyway, if we started all this to install, let's go all the way. I use NPM as a package manager.</p>\n\n<p>Finally, it's over... just kidding, </p>\n\n<p>This is the part we do in the terminal, now you can open your file, and I'll use the <code>code .</code> command to open my code editor.</p>\n\n<h3>\n  <a name=\"in-your-code-editor\" href=\"#in-your-code-editor\">\n  </a>\n  In your code editor,\n</h3>\n\n<p>Now, you have installed your first linter. Congratulations!!!<br>\nLet's take a look at your editor, it'll look like this:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K8vHrb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hbiqkq9espdsuc288kt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K8vHrb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hbiqkq9espdsuc288kt.png\" alt=\"config-eslint-opened\" loading=\"lazy\" width=\"880\" height=\"422\"></a></p>\n\n<p>The most important parts you need to understand in eslint settings are <strong>extends</strong>, <strong>plugins</strong>, and <strong>rules</strong>.</p>\n<h2>\n  <a name=\"extends\" href=\"#extends\">\n  </a>\n  Extends:\n</h2>\n\n<p>Roughly speaking, Extends are files full of rules already configured. Downloading one you like and adding it to the array, it's ready to use.</p>\n\n<p>Nothing prevents you from installing several extends, but there is an important detail that will define the conflicts that your file may have.</p>\n\n<p>If you add your extends outside the array, they might conflict, because that means you're applying the two entire extends to your file. </p>\n\n<p>Your code editor will warn you that this is impossible to do, semantic errors of an object. That's why you should put it <strong>inside an array</strong> if you're using <strong>more than one extension</strong>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1kGL6nHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhocllkqtwkk42vk4nu.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1kGL6nHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhocllkqtwkk42vk4nu.png\" alt=\"object-array-extends\" loading=\"lazy\" width=\"880\" height=\"255\"></a></p>\n\n<p>Inside an array, your extends will inherit the characteristics of the previous extends.</p>\n\n<p>For example, looking at the image above, I can say that if there is an equal rule between the two extensions, the Airbnb rule will prevail.</p>\n\n<p>If I added another extends and it also had conflict then this one would take priority.</p>\n\n<p><strong>The order of priority is descending: from the last item in the array, to the first.</strong></p>\n<h2>\n  <a name=\"plugins\" href=\"#plugins\">\n  </a>\n  Plugins:\n</h2>\n\n<p>Plugins are different, they are like a file that you install and leave in your project. It won't do anything until you give the command.</p>\n\n<p>It will make your rules available for you to use.</p>\n\n<p>The extends apply them the moment you add them, the plugins, even adding, don't apply your rules, just make them available for you to use.</p>\n<h2>\n  <a name=\"rules\" href=\"#rules\">\n  </a>\n  Rules:\n</h2>\n\n<p>Now I'm going to create an <code>index.js</code> and make my first React component, let's see if our linter is working. To do this I will go to the terminal and put an <code>npx eslint .</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const MyComponent = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello, dev.to&lt;/h1&gt;\n      &lt;p&gt;Please like this post!!!&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default MyComponent;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fMHRLTVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3fxkn4zn34ehgoyihmi.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fMHRLTVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3fxkn4zn34ehgoyihmi.png\" alt=\"first-errors-in-terminal\" loading=\"lazy\" width=\"880\" height=\"186\"></a></p>\n\n<p>Wow, I thought that everything was ready, it seems that there are a lot of mistakes here and some very important ones.</p>\n\n<p>In my case, my first mistake is to use React, without even installing it in my application, what a big mistake. But there are also some minor bugs like the lack of semicolons.</p>\n\n<p>My Airbnb extends is telling me all these errors, I can change it if I want by changing the rule value. The basic values ​​that exist are: <strong>error</strong>, <strong>warn</strong>, <strong>off</strong>;</p>\n\n<p>The rule can be considered an error, a warning, or it can be disabled.</p>\n\n<p>Let's disable the semicolon problem and also the newline that was reported by eslint;</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E3xzYbjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm13b7k638oskd0mhutc.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E3xzYbjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm13b7k638oskd0mhutc.png\" alt=\"changed-rules-in-config\" loading=\"lazy\" width=\"718\" height=\"444\"></a><br>\nNotice that at least now those silly errors are no longer being warned.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9sU3J_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv1r8pa7vo1czsb0zt9q.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9sU3J_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv1r8pa7vo1czsb0zt9q.png\" alt=\"second-erros-in-terminal\" loading=\"lazy\" width=\"880\" height=\"151\"></a></p>\n\n<p>And that's how rules work, you can write rule changes however you want, even applying an extends or plugin. We have other errors being shown but will be explained later.</p>\n<h2>\n  <a name=\"last-but-not-least\" href=\"#last-but-not-least\">\n  </a>\n  Last but not least\n</h2>\n\n<p>Now you understand how your linter extends work, how you can use plugins, and also how to see your errors.</p>\n\n<p>But let's make it easier. </p>\n\n<p>As I am using vscode, I will install the ESLint Extension, click on the configuration option, and click on add to Workspace recommendation. Doing so will create a folder called <code>.vscode</code> with a file inside about the extension you just recommended.</p>\n\n<p>This means that every time someone downloads your project, vscode will recommend that they install this extension. It's practical, isn't it?</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eLvtaFd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eitzszz1143t1mff0tak.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eLvtaFd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eitzszz1143t1mff0tak.png\" alt=\"eslint-extension-vscode\" loading=\"lazy\" width=\"880\" height=\"617\"></a></p>\n\n<p>Now your errors will be indicated by vscode itself, there is no need to run the command <code>npx eslint .</code></p>\n<h2>\n  <a name=\"bonus\" href=\"#bonus\">\n  </a>\n  Bonus\n</h2>\n\n<p>ESlint also gives you the option to fix these errors, if you noticed the terminal errors, it suggests that we use the <code>--fix</code> command.</p>\n\n<p>To do this you need to have your files saved and run the command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx eslint . --fix\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The simplest errors will format themselves, but some will persist and you must pay attention to them.</p>\n\n<h3>\n  <a name=\"formatting-when-saving\" href=\"#formatting-when-saving\">\n  </a>\n  Formatting when saving\n</h3>\n\n<p>Remember when vscode created a <code>.vscode</code> folder?</p>\n\n<p>We can use this same folder to define the vscode settings in the project.</p>\n\n<p>This means that these settings won't change other projects and if someone downloads it, they won't need to change any settings in their code editor.</p>\n\n<p>Create a file called <code>settings.json</code> and add the following code to it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You will be telling your vscode:<br>\n<strong>When you save a file, use eslint to format errors;</strong></p>\n\n<p>In this case, you will be using your ESLint, not only as a Linter but as a Formatter.</p>\n\n<p>I'll leave this topic of formatters for another post. But it is important that you understand the processes I mentioned and how you have the freedom to use them however you want.</p>\n\n<p>That was it for today, I hope you enjoyed reading and that you tried to practice.</p>\n\n<p>See you later.</p>\n\n","body_markdown":"_Hey, there. In quick work, it's important to say that I'm a beginner dev and this is my first post, and maybe I have a little \"naive\" view of Linters. In that case, I hope for your help in the comments. Let's get to the point._\n\n## Installation\n\nIf you know a little about package managers, any installation will be easy, look in the [eslint](https://eslint.org/docs/latest/user-guide/getting-started) documentation.\n\nAnyway, I'll leave below the list of commands for you to do this, but try the documentation, because it can update, well, anytime.\n\n### First of all,\n\nWe are in a situation where, in your code editor _(I'm using vscode)_, you don't have **any extensions or settings already changed** by you to use linters. Please pay attention to this.\n\nAnd you need to start your project, It could be an `npm init`, it could be `npm init -y`, it could be a `create-react-app`, `vite`, it doesn't matter so much.\n\nStart it however you feel comfortable.\n\n### Now yes, install eslint\n\n```\nnpm init @eslint/config\n\n```\n\nThis command will already create a `.eslintrc` folder (where you configure eslint) and will ask you some questions. You're free to answer each one because it depends on your type of project and your desire as well.\n\nI choose these options:\n```\n? How would you like to use ESLint? … \n  To check syntax only\n  To check syntax and find problems\n▸ To check syntax, find problems, and enforce code style\n```\nChoosing a code style already gives you a set of rules that a lot of people use, in all cases, it's good to use.\n\nNext question.\n```\n? What type of modules does your project use? … \n▸ JavaScript modules (import/export)\n  CommonJS (require/exports)\n  None of these\n```\nUnderstand this part as the way you import and export things. requise are already going out of fashion, so to speak, usually, your choice will be the first option.\n\nNext.\n```\n? Which framework does your project use? … \n▸ React\n  Vue.js\n  None of these\n\n? Does your project use TypeScript? ‣ No / Yes\n```\nI'm using React and in this project, there's no need to apply Typescript\n\nWe're just starting!\n```\n? Where does your code run? …  (Press <space> to select, <a> to toggle all, <i> to invert selection)\n✔ Browser\n✔ Node\n```\nNormally you will leave both options checked, but feel free to choose where your code will run.\n\nNext!\n```\n? How would you like to define a style for your project? … \n▸ Use a popular style guide\n  Answer questions about your style\n\n? Which style guide do you want to follow? … \n▸ Airbnb: https://github.com/airbnb/javascript\n  Standard: https://github.com/standard/standard\n  Google: https://github.com/google/eslint-config-google\n  XO: https://github.com/xojs/eslint-config-xo\n```\nI chose Airbnb to demo and it's also the one I use the most, but feel free to inquire about other famous style guides\n\nMore one!\n```\n? What format do you want your config file to be in? … \n  JavaScript\n  YAML\n▸ JSON\n```\nI like to use JSON format because normally the other settings, by default, come in JSON. The difference between them is very little.\n\nNext question!\n```\n? Would you like to install them now? ‣ No / Yes\n\n? Which package manager do you want to use? … \n▸ npm\n  yarn\n  pnpm\n```\nI don't know what happens if you don't install it now, you might have to do it all over again, but anyway, if we started all this to install, let's go all the way. I use NPM as a package manager.\n\nFinally, it's over... just kidding, \n\nThis is the part we do in the terminal, now you can open your file, and I'll use the `code .` command to open my code editor.\n\n### In your code editor,\n\nNow, you have installed your first linter. Congratulations!!!\nLet's take a look at your editor, it'll look like this:\n![config-eslint-opened](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hbiqkq9espdsuc288kt.png)\n\nThe most important parts you need to understand in eslint settings are **extends**, **plugins**, and **rules**.\n\n## Extends:\n\nRoughly speaking, Extends are files full of rules already configured. Downloading one you like and adding it to the array, it's ready to use.\n\nNothing prevents you from installing several extends, but there is an important detail that will define the conflicts that your file may have.\n\nIf you add your extends outside the array, they might conflict, because that means you're applying the two entire extends to your file. \n\nYour code editor will warn you that this is impossible to do, semantic errors of an object. That's why you should put it **inside an array** if you're using **more than one extension**.\n\n![object-array-extends](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhocllkqtwkk42vk4nu.png)\n\nInside an array, your extends will inherit the characteristics of the previous extends.\n\nFor example, looking at the image above, I can say that if there is an equal rule between the two extensions, the Airbnb rule will prevail.\n\nIf I added another extends and it also had conflict then this one would take priority.\n\n**The order of priority is descending: from the last item in the array, to the first.**\n\n## Plugins:\n\nPlugins are different, they are like a file that you install and leave in your project. It won't do anything until you give the command.\n\nIt will make your rules available for you to use.\n\nThe extends apply them the moment you add them, the plugins, even adding, don't apply your rules, just make them available for you to use.\n\n## Rules:\n\nNow I'm going to create an `index.js` and make my first React component, let's see if our linter is working. To do this I will go to the terminal and put an `npx eslint .`\n```\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>Hello, dev.to</h1>\n      <p>Please like this post!!!</p>\n    </div>\n  )\n}\n\nexport default MyComponent;\n```\n\n![first-errors-in-terminal](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3fxkn4zn34ehgoyihmi.png)\n\nWow, I thought that everything was ready, it seems that there are a lot of mistakes here and some very important ones.\n\nIn my case, my first mistake is to use React, without even installing it in my application, what a big mistake. But there are also some minor bugs like the lack of semicolons.\n\nMy Airbnb extends is telling me all these errors, I can change it if I want by changing the rule value. The basic values ​​that exist are: **error**, **warn**, **off**;\n\nThe rule can be considered an error, a warning, or it can be disabled.\n\nLet's disable the semicolon problem and also the newline that was reported by eslint;\n\n![changed-rules-in-config](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm13b7k638oskd0mhutc.png)\nNotice that at least now those silly errors are no longer being warned.\n![second-erros-in-terminal](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv1r8pa7vo1czsb0zt9q.png)\n\nAnd that's how rules work, you can write rule changes however you want, even applying an extends or plugin. We have other errors being shown but will be explained later.\n\n## Last but not least\n\nNow you understand how your linter extends work, how you can use plugins, and also how to see your errors.\n\nBut let's make it easier. \n\nAs I am using vscode, I will install the ESLint Extension, click on the configuration option, and click on add to Workspace recommendation. Doing so will create a folder called `.vscode` with a file inside about the extension you just recommended.\n\nThis means that every time someone downloads your project, vscode will recommend that they install this extension. It's practical, isn't it?\n\n![eslint-extension-vscode](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eitzszz1143t1mff0tak.png)\n\nNow your errors will be indicated by vscode itself, there is no need to run the command `npx eslint .`\n\n## Bonus\n\nESlint also gives you the option to fix these errors, if you noticed the terminal errors, it suggests that we use the `--fix` command.\n\n\nTo do this you need to have your files saved and run the command:\n```\nnpx eslint . --fix\n```\nThe simplest errors will format themselves, but some will persist and you must pay attention to them.\n\n### Formatting when saving\n\nRemember when vscode created a `.vscode` folder?\n\nWe can use this same folder to define the vscode settings in the project.\n\nThis means that these settings won't change other projects and if someone downloads it, they won't need to change any settings in their code editor.\n\nCreate a file called `settings.json` and add the following code to it:\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  }\n}\n```\n\nYou will be telling your vscode:\n**When you save a file, use eslint to format errors;**\n\nIn this case, you will be using your ESLint, not only as a Linter but as a Formatter.\n\nI'll leave this topic of formatters for another post. But it is important that you understand the processes I mentioned and how you have the freedom to use them however you want.\n\nThat was it for today, I hope you enjoyed reading and that you tried to practice.\n\nSee you later.\n\n\n\n\n\n\n\n","user":{"name":"Daniel Bernardino","username":"daniel__bernardino","twitter_username":null,"github_username":"daniel-bernardino747","user_id":957488,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--m3kDnBh7--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/957488/4d9316b8-b2ad-4a17-9a74-40559289be01.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--ANCXVAVg--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/957488/4d9316b8-b2ad-4a17-9a74-40559289be01.jpeg"}}