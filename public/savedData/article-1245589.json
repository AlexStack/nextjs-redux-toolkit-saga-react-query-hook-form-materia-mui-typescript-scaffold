{"type_of":"article","id":1245589,"title":"43-Nodejs Course 2023: Database Models: Created At And Updated At Columns","description":"So we saw how we can save our data in the model, but we need to add more details about the saving...","readable_publish_date":"Nov 6","slug":"43-nodejs-course-2023-database-models-created-at-and-updated-at-columns-5gai","path":"/hassanzohdy/43-nodejs-course-2023-database-models-created-at-and-updated-at-columns-5gai","url":"https://dev.to/hassanzohdy/43-nodejs-course-2023-database-models-created-at-and-updated-at-columns-5gai","comments_count":0,"public_reactions_count":0,"collection_id":20274,"published_timestamp":"2022-11-06T15:15:54Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--edFVZWwd--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n3rmym76n5rhfloo41h.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--oe6-2CSj--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n3rmym76n5rhfloo41h.png","canonical_url":"https://dev.to/hassanzohdy/43-nodejs-course-2023-database-models-created-at-and-updated-at-columns-5gai","created_at":"2022-11-06T15:15:54Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-06T15:15:54Z","last_comment_at":"2022-11-06T15:15:54Z","reading_time_minutes":5,"tag_list":"node, typescript, mongodb, fastify","tags":["node","typescript","mongodb","fastify"],"body_html":"<p>So we saw how we can save our data in the model, but we need to add more details about the saving process like when the document has been created and when it has been updated.</p>\n\n<p>So let's do it.</p>\n\n<h2>\n  <a name=\"create-method\" href=\"#create-method\">\n  </a>\n  Create Method\n</h2>\n\n<p>In our static class <code>CrudModel</code> we've the <code>create</code> and <code>update</code> methods, the <code>create</code> method generates a new id before saving the data and returns a new instance of the model.</p>\n\n<p>But what about if we reverse it? we create a new instance with the data and then we just save it!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/crud-model.ts</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">CrudModel</span> <span class=\"kd\">extends</span> <span class=\"nx\">BaseModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * Create a new record in the database for the current model (child class of this one)\n   * and return a new instance of it with the created data and the new generated id\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">create</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nx\">Document</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nb\">self</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>See, much cleaner and easier, also it will prevent code duplicate as we don't have to generate the id in both methods in the <code>create</code> and <code>save</code> methods.</p>\n\n<h2>\n  <a name=\"update-method\" href=\"#update-method\">\n  </a>\n  Update Method\n</h2>\n\n<p>Let's update the <code>update</code> method as well<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/crud-model.ts</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nx\">CrudModel</span> <span class=\"kd\">extends</span> <span class=\"nx\">BaseModel</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * Update model by the given id and return it if found\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">update</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">PrimaryIdType</span><span class=\"p\">,</span>\n    <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nx\">Document</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">;</span> <span class=\"c1\">// silent typescript compiler</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We first get the model by the given id.</p>\n\n<p>If the model is not found, then we return <code>null</code>.</p>\n\n<p>Otherwise, we update the model with the given data and return it.</p>\n\n<h2>\n  <a name=\"replace-method\" href=\"#replace-method\">\n  </a>\n  Replace Method\n</h2>\n\n<p>Let's do the same with the replace method<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code>  <span class=\"cm\">/**\n   * Replace the entire document for the given document id with the given new data\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">replace</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">PrimaryIdType</span><span class=\"p\">,</span>\n    <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nx\">Document</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">replaceWith</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We replaced the data using the <code>replaceWith</code> method and then we save it.</p>\n\n<h2>\n  <a name=\"upsert-method\" href=\"#upsert-method\">\n  </a>\n  Upsert method\n</h2>\n\n<p>Now let's update the upsert method<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code>\n  <span class=\"cm\">/**\n   * Find and update the document for the given filter with the given data or create a new document/record\n   * if filter has no matching\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">upsert</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">filter</span><span class=\"p\">:</span> <span class=\"nx\">ModelDocument</span><span class=\"p\">,</span>\n    <span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nx\">Document</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"p\">(</span><span class=\"nx\">filter</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// if not exists, create it</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nb\">self</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">filter</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// update it</span>\n      <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">replaceWith</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">filter</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here is how it works, we first get the first matched model for the given filter, if the model is not found, then we create a new one with the given filter and data.</p>\n\n<p>Otherwise, we update the model with the given data.</p>\n\n<h2>\n  <a name=\"recapping-what-weve-done\" href=\"#recapping-what-weve-done\">\n  </a>\n  Recapping what we've done\n</h2>\n\n<p>So basically we transformed all of the static operations to act as if we were working with the model directly, this will allow us to put all updates in one place which is the <code>save</code> method only.</p>\n\n<h2>\n  <a name=\"created-at-and-updated-at\" href=\"#created-at-and-updated-at\">\n  </a>\n  Created At And Updated At\n</h2>\n\n<p>Now we need to add the <code>createdAt</code> and <code>updatedAt</code> fields to the model, so let's do it.</p>\n\n<p>The <code>createdAt</code> will be added when the model is being saved as creating, and the <code>updatedAt</code> will be updated every time the model is updated and in the <code>create</code> process as well.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n<span class=\"cm\">/**\n * Perform saving operation either by updating or creating a new record in database\n */</span>\n<span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// check if the data contains the primary id column</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// perform an update operation</span>\n    <span class=\"c1\">// check if the data has changed</span>\n    <span class=\"c1\">// if not changed, then do not do anything</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// update the updated at column</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n    <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// createdAt Column</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n    <span class=\"c1\">// updatedAt Column</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So we added the <code>createdAt</code> and <code>updatedAt</code> columns in the <code>save</code> method, and we also updated the <code>update</code> method to update the <code>updatedAt</code> column.</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  🎨 Conclusion\n</h2>\n\n<p>So we've added the <code>createdAt</code> and <code>updatedAt</code> columns to the model, and we've also updated the <code>save</code> method to update the <code>updatedAt</code> column.</p>\n\n<p>We also moved all insertion and updating operations to the <code>save</code> method only.</p>\n\n<h2>\n  <a name=\"project-repository\" href=\"#project-repository\">\n  </a>\n  🚀 Project Repository\n</h2>\n\n<p>You can find the latest updates of this project on <a href=\"https://github.com/hassanzohdy/nodejs-2023\">Github</a></p>\n\n<h2>\n  <a name=\"join-our-community\" href=\"#join-our-community\">\n  </a>\n  😍 Join our community\n</h2>\n\n<p>Join our community on <a href=\"https://discord.gg/pb2vmdfhGf\">Discord</a> to get help and support (Node Js 2023 Channel).</p>\n\n<h2>\n  <a name=\"video-course-arabic-voice\" href=\"#video-course-arabic-voice\">\n  </a>\n  🎞️ Video Course (Arabic Voice)\n</h2>\n\n<p>If you want to learn this course in video format, you can find it on <a href=\"https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz\">Youtube</a>, the course is in Arabic language.</p>\n\n<h2>\n  <a name=\"bonus-content\" href=\"#bonus-content\">\n  </a>\n  💰 Bonus Content 💰\n</h2>\n\n<p>You may have a look at these articles, it will definitely boost your knowledge and productivity.</p>\n\n<p>General Topics</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk\">Event Driven Architecture: A Practical Guide in Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi\">Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b\">After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n</a></li>\n</ul>\n\n<p>Packages &amp; Libraries</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15\">Collections: Your ultimate Javascript Arrays Manager</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e\">Supportive Is: an elegant utility to check types of values in JavaScript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3\">Localization: An agnostic i18n package to manage localization in your project</a></li>\n</ul>\n\n<p>React Js Packages</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9\">useFetcher: easiest way to fetch data in React Js</a></li>\n</ul>\n\n<p>Courses (Articles)</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k\">React Js: Let\"s Create File Manager With React Js and Node Js</a></li>\n</ul>\n\n","body_markdown":"---\ntitle: 43-Nodejs Course 2023: Database Models: Created At And Updated At Columns\npublished: true\ndescription: \nseries: Nodejs Course 2023\ntags: nodejs, typescript, mongodb, fastify\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n3rmym76n5rhfloo41h.png\n# Use a ratio of 100:42 for best results.\n---\n\nSo we saw how we can save our data in the model, but we need to add more details about the saving process like when the document has been created and when it has been updated.\n\nSo let's do it.\n\n## Create Method\n\nIn our static class `CrudModel` we've the `create` and `update` methods, the `create` method generates a new id before saving the data and returns a new instance of the model.\n\nBut what about if we reverse it? we create a new instance with the data and then we just save it!\n\n```ts\n// src/core/database/model/crud-model.ts\n\nexport default abstract class CrudModel extends BaseModel {\n  // ...\n  \n  /**\n   * Create a new record in the database for the current model (child class of this one)\n   * and return a new instance of it with the created data and the new generated id\n   */\n  public static async create<T>(\n    this: ChildModel<T>,\n    data: Document,\n  ): Promise<T> {\n    const model = this.self(data);\n\n    await model.save();\n\n    return model;\n  }\n}\n```\n\nSee, much cleaner and easier, also it will prevent code duplicate as we don't have to generate the id in both methods in the `create` and `save` methods.\n\n## Update Method\n\nLet's update the `update` method as well\n\n```ts\n// src/core/database/model/crud-model.ts\n\nexport default abstract class CrudModel extends BaseModel {\n  // ...\n  \n  /**\n   * Update model by the given id and return it if found\n   */\n  public static async update<T>(\n    this: ChildModel<T>,\n    id: PrimaryIdType,\n    data: Document,\n  ): Promise<T | null> {\n    const model = (await this.find(id)) as any; // silent typescript compiler\n\n    if (!model) return null;\n\n    await model.save(data);\n\n    return model;\n  }\n}\n```\n\nWe first get the model by the given id.\n\nIf the model is not found, then we return `null`.\n\nOtherwise, we update the model with the given data and return it.\n\n## Replace Method\n\nLet's do the same with the replace method\n\n```ts\n  /**\n   * Replace the entire document for the given document id with the given new data\n   */\n  public static async replace<T>(\n    this: ChildModel<T>,\n    id: PrimaryIdType,\n    data: Document,\n  ): Promise<T | null> {\n    const model = (await this.find(id)) as any;\n\n    if (!model) return null;\n\n    model.replaceWith(data);\n\n    await model.save();\n\n    return model;\n  }\n```\n\nWe replaced the data using the `replaceWith` method and then we save it.\n\n## Upsert method\n\nNow let's update the upsert method\n\n```ts\n\n  /**\n   * Find and update the document for the given filter with the given data or create a new document/record\n   * if filter has no matching\n   */\n  public static async upsert<T>(\n    this: ChildModel<T>,\n    filter: ModelDocument,\n    data: Document,\n  ): Promise<T | null> {\n    let model = (await this.first(filter)) as any;\n\n    // if not exists, create it\n    if (!model) {\n      model = this.self({ ...filter, ...data });\n    } else {\n      // update it\n      model.replaceWith({ ...filter, ...data });\n    }\n\n    await model.save();\n\n    return model;\n  }\n```\n\nHere is how it works, we first get the first matched model for the given filter, if the model is not found, then we create a new one with the given filter and data.\n\nOtherwise, we update the model with the given data.\n\n## Recapping what we've done\n\nSo basically we transformed all of the static operations to act as if we were working with the model directly, this will allow us to put all updates in one place which is the `save` method only.\n\n## Created At And Updated At\n\nNow we need to add the `createdAt` and `updatedAt` fields to the model, so let's do it.\n\nThe `createdAt` will be added when the model is being saved as creating, and the `updatedAt` will be updated every time the model is updated and in the `create` process as well.\n\n```ts\n// src/core/database/model/model.ts\n\n/**\n * Perform saving operation either by updating or creating a new record in database\n */\npublic async save(mergedData: Document = {}) {\n  this.merge(mergedData);\n\n  // check if the data contains the primary id column\n  if (this.data._id) {\n    // perform an update operation\n    // check if the data has changed\n    // if not changed, then do not do anything\n    if (areEqual(this.originalData, this.data)) return;\n\n    // update the updated at column\n    this.data.updatedAt = new Date();\n\n    await queryBuilder.update(\n      this.getCollectionName(),\n      {\n        _id: this.data._id,\n      },\n      this.data,\n    );\n  } else {\n    const generateNextId =\n      this.getStaticProperty(\"generateNextId\").bind(Model);\n\n    this.data.id = await generateNextId();\n\n    // createdAt Column\n    const now = new Date();\n    this.data.createdAt = now;\n    // updatedAt Column\n    this.data.updatedAt = now;\n\n    this.data = await queryBuilder.create(\n      this.getCollectionName(),\n      this.data,\n    );\n  }\n}\n```\n\nSo we added the `createdAt` and `updatedAt` columns in the `save` method, and we also updated the `update` method to update the `updatedAt` column.\n\n## 🎨 Conclusion\n\nSo we've added the `createdAt` and `updatedAt` columns to the model, and we've also updated the `save` method to update the `updatedAt` column.\n\nWe also moved all insertion and updating operations to the `save` method only.\n\n## 🚀 Project Repository\n\nYou can find the latest updates of this project on [Github](https://github.com/hassanzohdy/nodejs-2023)\n\n## 😍 Join our community\n\nJoin our community on [Discord](https://discord.gg/pb2vmdfhGf) to get help and support (Node Js 2023 Channel).\n\n## 🎞️ Video Course (Arabic Voice)\n\nIf you want to learn this course in video format, you can find it on [Youtube](https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz), the course is in Arabic language.\n\n## 💰 Bonus Content 💰\n\nYou may have a look at these articles, it will definitely boost your knowledge and productivity.\n\nGeneral Topics\n\n- [Event Driven Architecture: A Practical Guide in Javascript](https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk)\n- [Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript](https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi)\n- [After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n](https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b)\n\nPackages & Libraries\n\n- [Collections: Your ultimate Javascript Arrays Manager](https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15)\n- [Supportive Is: an elegant utility to check types of values in JavaScript](https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e)\n- [Localization: An agnostic i18n package to manage localization in your project](https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3)\n\n React Js Packages\n\n- [useFetcher: easiest way to fetch data in React Js](https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9)\n\nCourses (Articles)\n\n- [React Js: Let\"s Create File Manager With React Js and Node Js](https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k)\n","user":{"name":"Hasan Zohdy","username":"hassanzohdy","twitter_username":null,"github_username":"hassanzohdy","user_id":148881,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qAfPQwU1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--a0msxQIX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg"}}