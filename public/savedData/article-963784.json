{"type_of":"article","id":963784,"title":"Testing a mui Auto Complete Adaptor Component integrated with React Hook Form","description":"Subject Under Test   A mui auto-complete adaptor component integrated with React Hook Form's...","readable_publish_date":"Jan 22","slug":"testing-a-mui-auto-complete-adaptor-component-integrating-react-hook-form-22p7","path":"/rexebin/testing-a-mui-auto-complete-adaptor-component-integrating-react-hook-form-22p7","url":"https://dev.to/rexebin/testing-a-mui-auto-complete-adaptor-component-integrating-react-hook-form-22p7","comments_count":0,"public_reactions_count":1,"collection_id":16269,"published_timestamp":"2022-01-22T11:59:54Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/963784.png","canonical_url":"https://dev.to/rexebin/testing-a-mui-auto-complete-adaptor-component-integrating-react-hook-form-22p7","created_at":"2022-01-22T11:53:47Z","edited_at":"2022-01-22T12:01:45Z","crossposted_at":null,"published_at":"2022-01-22T11:59:54Z","last_comment_at":"2022-01-22T11:59:54Z","reading_time_minutes":2,"tag_list":"reacthookform, webdev, testing, mui","tags":["reacthookform","webdev","testing","mui"],"body_html":"<h2>\n  <a name=\"subject-under-test\" href=\"#subject-under-test\">\n  </a>\n  Subject Under Test\n</h2>\n\n<p>A <code>mui</code> auto-complete adaptor component integrated with React Hook Form's form context. It uses the <code>Controller</code> component from React Hook Form(RHF) and configures mui's  <code>Autocomplete</code> to handle validations and more. I use this component instead of <code>mui</code>'s  <code>Autocomplete</code> in all my forms. </p>\n\n<h3>\n  <a name=\"behaviours\" href=\"#behaviours\">\n  </a>\n  Behaviours\n</h3>\n\n<ol>\n<li>It registers the <code>Autocomplete</code> component with RHF's form context</li>\n<li>It inherits all the behaviours from <code>mui</code>'s' <code>Autocomplete</code>  and accepts all <code>Autocomplete</code> props.</li>\n<li>It has three modes: edit, locked, and read-only. In edit mode, it renders a functional <code>Autocomplete</code> component. In locked mode and read-only mode, it renders a <code>TextField</code> component.</li>\n<li>It supports single and multiple selection modes</li>\n<li>It can limit the number of options it renders with <code>optionLimit</code> prop.</li>\n<li>It has a build-in <code>required</code> validation rule</li>\n<li>It accepts validation rules from <code>rules</code> prop.</li>\n<li>It can be locked(non-editable in edit mode), and it would show a lock icon with a tooltip explaining why it is locked.</li>\n</ol>\n\n<h3>\n  <a name=\"variants-a-design-decision\" href=\"#variants-a-design-decision\">\n  </a>\n  Variants - a design decision\n</h3>\n\n<p>The component has three variants: </p>\n\n<ol>\n<li> <code>EpicAutocomplete</code>, a regular auto-complete. It has the same API surface as <code>mui</code>'s <code>Autocomplete</code> component plus binding props for RHF.</li>\n<li>\n<code>EpicAutocompleteWithManger</code>, an auto-complete with an additional option for managing options, extends <code>EpicAutocomplete</code> and has extra required props: <code>manager</code> and <code>managerLabel</code>.</li>\n<li>\n<code>EpicAutocompleteWithUrl</code>, an auto-complete with a link icon button for users to navigate to the detail page of the selected entity. It extends <code>EpicAutocomplete</code> and has an extra prop: <code>url</code>.</li>\n</ol>\n\n<p>Before writing the tests for this component, I did not have the above variants, and all the functions were crammed into a single component, which was a leaky implementation.</p>\n\n<ol>\n<li>Many instances don't need the manager or URL but carry the baggage with them.</li>\n<li>URL require <code>react-router</code>, and it adds unnecessary dependencies to users that don't use it</li>\n<li>The component internals are too complicated.</li>\n</ol>\n\n<p>For the new structure, I moved the implementations into a base component called <code>EpicAutocompleteBase</code>. </p>\n\n<ol>\n<li>It is private and not exposed to external libraries. It cannot be used in forms directly. </li>\n<li>All three variants are composed of it. </li>\n</ol>\n\n<p>With the above design, the API for the variants are more precise and lean, and they don't carry unnecessary dependencies with them.</p>\n\n<p>I sincerely invite suggestions from my dear readers for a better approach.</p>\n\n<h3>\n  <a name=\"notes\" href=\"#notes\">\n  </a>\n  Notes\n</h3>\n\n<ol>\n<li>Each variant has its separate tests. Their tests are focused on their public APIs (props)</li>\n<li>No direct tests for <code>EpicAutocompleteBase</code> because three variants are testing it. </li>\n</ol>\n\n<h3>\n  <a name=\"code\" href=\"#code\">\n  </a>\n  Code\n</h3>\n\n\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/rexebin/0ea7812e989bc8df412372f00fdbbfdd.js\"></script>\n</div>\n\n\n","body_markdown":"## Subject Under Test\nA `mui` auto-complete adaptor component integrated with React Hook Form's form context. It uses the `Controller` component from React Hook Form(RHF) and configures mui's  `Autocomplete` to handle validations and more. I use this component instead of `mui`'s  `Autocomplete` in all my forms. \n\n### Behaviours\n1. It registers the `Autocomplete` component with RHF's form context\n2. It inherits all the behaviours from `mui`'s' `Autocomplete`  and accepts all `Autocomplete` props.\n3. It has three modes: edit, locked, and read-only. In edit mode, it renders a functional `Autocomplete` component. In locked mode and read-only mode, it renders a `TextField` component.\n4. It supports single and multiple selection modes\n5. It can limit the number of options it renders with `optionLimit` prop.\n6. It has a build-in `required` validation rule\n7. It accepts validation rules from `rules` prop.\n8. It can be locked(non-editable in edit mode), and it would show a lock icon with a tooltip explaining why it is locked.\n\n### Variants - a design decision\n The component has three variants: \n1.  `EpicAutocomplete`, a regular auto-complete. It has the same API surface as `mui`'s `Autocomplete` component plus binding props for RHF.\n2. `EpicAutocompleteWithManger`, an auto-complete with an additional option for managing options, extends `EpicAutocomplete` and has extra required props: `manager` and `managerLabel`.\n3. `EpicAutocompleteWithUrl`, an auto-complete with a link icon button for users to navigate to the detail page of the selected entity. It extends `EpicAutocomplete` and has an extra prop: `url`.\n\t\nBefore writing the tests for this component, I did not have the above variants, and all the functions were crammed into a single component, which was a leaky implementation.\n1. Many instances don't need the manager or URL but carry the baggage with them.\n2. URL require `react-router`, and it adds unnecessary dependencies to users that don't use it\n3. The component internals are too complicated.\n\nFor the new structure, I moved the implementations into a base component called `EpicAutocompleteBase`. \n1. It is private and not exposed to external libraries. It cannot be used in forms directly. \n2. All three variants are composed of it. \n\nWith the above design, the API for the variants are more precise and lean, and they don't carry unnecessary dependencies with them.\n\nI sincerely invite suggestions from my dear readers for a better approach.\n\n### Notes\n1. Each variant has its separate tests. Their tests are focused on their public APIs (props)\n2. No direct tests for `EpicAutocompleteBase` because three variants are testing it. \n\n### Code\n{%gist\nhttps://gist.github.com/rexebin/0ea7812e989bc8df412372f00fdbbfdd\n%}\n\n\n\n","user":{"name":"Rex","username":"rexebin","twitter_username":"rexebin","github_username":"rexebin","user_id":339459,"website_url":"https://www.epicerp.app","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UebRz_K5--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/339459/9276c4f3-d496-477c-bad1-26991c25e375.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--WOmU0qhh--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/339459/9276c4f3-d496-477c-bad1-26991c25e375.jpeg"}}