{"type_of":"article","id":1242352,"title":"Setting up a signature canvas in React Native","description":"by Champion Uzoma  User signatures can be captured without following the signing on paper and...","readable_publish_date":"Nov 3","slug":"setting-up-a-signature-canvas-in-react-native-lk5","path":"/asayerio_techblog/setting-up-a-signature-canvas-in-react-native-lk5","url":"https://dev.to/asayerio_techblog/setting-up-a-signature-canvas-in-react-native-lk5","comments_count":0,"public_reactions_count":3,"collection_id":null,"published_timestamp":"2022-11-03T22:52:23Z","positive_reactions_count":3,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--DFOHkEDa--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiy6ss5sn2wb8e6qwbao.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--NmdwzWeS--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiy6ss5sn2wb8e6qwbao.png","canonical_url":"https://blog.openreplay.com/setting-up-a-signature-canvas-in-react-native/","created_at":"2022-11-03T22:52:23Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-03T22:52:23Z","last_comment_at":"2022-11-03T22:52:23Z","reading_time_minutes":9,"tag_list":"reactnative, mobile","tags":["reactnative","mobile"],"body_html":"<p>by <a href=\"https://blog.openreplay.com/authors/champion-uzoma\">Champion Uzoma</a></p>\n\n<p>User signatures can be captured without following the signing on paper and scanning method. With a signature canvas feature in-app, users can quickly sign and attach their signatures or sign onto files right on their phones. </p>\n\n<p>In this tutorial, I want to demonstrate how this signature canvas can be set up in an Android and iOS app using React Native. The app will capture the user's signature and save it as an image to the user's storage. The complete source code for this tutorial is at <a href=\"https://github.com/championuz/RNDigitalSig\">Github</a>.</p>\n\n<p>To follow it, basic knowledge of React Native is essential, and you should have <a href=\"https://reactnative.dev/docs/getting-started\">React Native</a> set up on your computer. An Android and an iOS simulator should also be set up for testing the application. You can learn how to set up React Native and how to set up Android and iOS emulators on your computer <a href=\"https://reactnative.dev/docs/environment-setup\">here</a>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4mHGnDDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image01.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4mHGnDDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image01.gif\" alt=\"1\" loading=\"lazy\" width=\"720\" height=\"480\" data-animated=\"true\"></a></p>\n\n<h2>\n  <a name=\"initialize-react-native-project\" href=\"#initialize-react-native-project\">\n  </a>\n  Initialize React Native Project\n</h2>\n\n<p>The first step for this tutorial is to initialize a React Native project. This initialization involves running a command in your terminal, and an empty project will be set up. After running the initialization command, you will need to download the necessary iOS dependencies and build the project in Android and iOS emulators. The commands for these processes are below.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>#Initialize React Native Project\nnpx react-native init RNDigitalSig\n\n# Navigate to the ios folder and Install iOS dependencies\ncd ios &amp;&amp; pod install\n\n#Navigate back to the Project root folder\ncd ..\n\n#Run on Android Emulator\nnpx react-native run-android\n\n#Run on iOS Simulator\nnpx react-native run-ios\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If this sequence was correctly executed, your Android and iOS emulators should show up like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--oZLecFJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image02.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--oZLecFJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image02.jpeg\" alt=\"2 Image of Android and iOS Emulators Showing Default React Native Project.\" loading=\"lazy\" width=\"880\" height=\"680\"></a></p>\n\n<h2>\n  <a name=\"setting-up-signature-canvas\" href=\"#setting-up-signature-canvas\">\n  </a>\n  Setting up Signature Canvas\n</h2>\n\n<p>The React Native project has been successfully initialized, and the next thing is to get right into the core of this tutorial which is setting up a signature canvas.</p>\n\n<p>The features of this digital signature project will  be:</p>\n\n<ol>\n<li>Signing functionality</li>\n<li>Undo and Redo functionality</li>\n<li>Preview signature</li>\n<li>Pen Color change</li>\n<li>Saving signature to device</li>\n</ol>\n\n<p>For all these features to be set up, I will be working with some <a href=\"https://reactnative.dev/docs/libraries\">React Native Libraries</a>. For the Signing functionality, I will be using the <a href=\"https://www.npmjs.com/package/react-native-signature-canvas\">react-native-signature-canvas</a> then, <a href=\"https://www.npmjs.com/package/rn-fetch-blob\">rn-fetch-blob</a> will be used to save the signature image to the device. The <a href=\"https://www.npmjs.com/package/react-native-webview\">react-native-webview</a> also needs to be installed because <a href=\"https://www.npmjs.com/package/react-native-signature-canvas\">react-native-signature-canvas</a> depends on it.</p>\n\n<h2>\n  <a name=\"creating-signing-functionality-with-react-native-signature-canvas\" href=\"#creating-signing-functionality-with-react-native-signature-canvas\">\n  </a>\n  Creating Signing Functionality with React Native Signature Canvas\n</h2>\n\n<p>Right now,  you should install the following libraries <a href=\"https://www.npmjs.com/package/react-native-signature-canvas\">react-native-signature-canvas</a> library and <a href=\"https://www.npmjs.com/package/react-native-webview\">react-native-webview</a>. To install it, run the following command in your terminal. Ensure you are running it in the project's root folder.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>#install library\nnpm i react-native-signature-canvas react-native-webview rn-fetch-blob\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Once complete, install the necessary iOS dependencies and build on Android and iOS Emulators. The commands for these are already stated above.</p>\n\n<p>Next, open up app.js, and at the top of the page, import react-native-signature-canvas like so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import SignatureScreen from 'react-native-signature-canvas'\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, for the declared SignatureScreen to render correctly, some functions will have to be declared and assigned to the SignatureScreen using the accompanying props. You can get complete details of the props and methods associated with this library <a href=\"https://www.npmjs.com/package/react-native-signature-canvas\">here</a>. </p>\n\n<p>Insert the code below within the app component.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">onOK</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">ref</span> <span class=\"o\">=</span> <span class=\"nx\">useRef</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// Called after ref.current.readSignature() reads a non-empty base64 string</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleOK</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">);</span>\n    <span class=\"nx\">onOK</span><span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">);</span> <span class=\"c1\">// Callback from Component props</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// Called after ref.current.readSignature() reads an empty string</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleEmpty</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Empty</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// Called after ref.current.clearSignature()</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleClear</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">clear success!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// Called after end of stroke</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleEnd</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">readSignature</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// Called after ref.current.getData()</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleData</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">SignatureScreen</span>\n      <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">ref</span><span class=\"p\">}</span>\n      <span class=\"nx\">onEnd</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleEnd</span><span class=\"p\">}</span>\n      <span class=\"nx\">onOK</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleOK</span><span class=\"p\">}</span>\n      <span class=\"nx\">onEmpty</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleEmpty</span><span class=\"p\">}</span>\n      <span class=\"nx\">onClear</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleClear</span><span class=\"p\">}</span>\n      <span class=\"nx\">onGetData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleData</span><span class=\"p\">}</span>\n      <span class=\"nx\">autoClear</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span>\n      <span class=\"nx\">descriptionText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">text</span><span class=\"p\">}</span>\n    <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Your Android and iOS emulators should show up like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pVVRvctj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image03.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pVVRvctj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image03.jpeg\" alt=\"3 Image of Android and iOS Emulators showing default Signature Screen\" loading=\"lazy\" width=\"880\" height=\"680\"></a></p>\n\n<p>As shown, SignatureScreen works with the <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\">React useRef</a> hook and thus should be imported at the top of the page. You will also notice the presence of props like onEnd,  onOk, onEmpty, onClear, onGetData, autoClear, and descriptionText. These are basic props of the react-native-signature-canvas, and some can have functions assigned to them. These functions will be triggered when any of the conditions are met. For instance, the onClear prop is assigned to the handleClear function. This function will be executed when you click to clear the signature canvas. A simple instruction is to log \"clear success\" to the console when a user clears the canvas. You can implement anything you want or alert a message to the user. </p>\n\n<p>To further demonstrate how the props and methods of this library can be used, I will use the changePenColor() method to execute a color change with a specified color from a state. Then, the penColor prop will take the value of the state and change the pen color to the specified color. Also, I will create an undo and redo functionality that will make it possible for the users to undo or redo an action instead of just clearing the canvas or being unable to retrieve an undone signature.</p>\n\n<p>To create this functionality, I will modify the UI of the app. The UI will contain the field where the color will be specified and the buttons for undo and redo. Kindly update your app.js with the code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">onOK</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">colorText</span><span class=\"p\">,</span> <span class=\"nx\">setPenColor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">ref</span> <span class=\"o\">=</span> <span class=\"nx\">useRef</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">handleOK</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">);</span>\n    <span class=\"nx\">onOK</span><span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">);</span> <span class=\"c1\">// Callback from Component props</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">handleClear</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">clear success!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">SafeAreaView</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">textSign</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Sign</span> <span class=\"nx\">Below</span><span class=\"o\">&lt;</span><span class=\"sr\">/Text</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"nx\">View</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">row</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">TouchableOpacity</span>\n      <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{[</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">setButton</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">marginRight</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">red</span><span class=\"dl\">'</span><span class=\"p\">}]}</span>\n      <span class=\"nx\">onPress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleUndo</span><span class=\"p\">}</span>\n      <span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Undo</span><span class=\"o\">&lt;</span><span class=\"sr\">/Text</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/TouchableOpacity</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"nx\">TextInput</span>\n      <span class=\"nx\">placeholder</span><span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Specify Pen Color</span><span class=\"dl\">\"</span>\n      <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">textInput</span><span class=\"p\">}</span>\n      <span class=\"nx\">autoCapitalize</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">none</span><span class=\"dl\">\"</span>\n      <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">colorText</span><span class=\"p\">}</span>\n      <span class=\"nx\">onChangeText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">setPenColor</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"nx\">TouchableOpacity</span>\n      <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">setButton</span><span class=\"p\">}</span>\n      <span class=\"nx\">onPress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleColorChange</span><span class=\"p\">}</span>\n      <span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nb\">Set</span><span class=\"o\">&lt;</span><span class=\"sr\">/Text</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/TouchableOpacity</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"nx\">TouchableOpacity</span>\n      <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{[</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">setButton</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">marginLeft</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">red</span><span class=\"dl\">'</span><span class=\"p\">}]}</span>\n      <span class=\"nx\">onPress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleRedo</span><span class=\"p\">}</span>\n      <span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Redo</span><span class=\"o\">&lt;</span><span class=\"sr\">/Text</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/TouchableOpacity</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/View</span><span class=\"err\">&gt;\n</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">SignatureScreen</span>\n      <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">ref</span><span class=\"p\">}</span>\n      <span class=\"nx\">onEmpty</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleEmpty</span><span class=\"p\">}</span>\n      <span class=\"nx\">onClear</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleClear</span><span class=\"p\">}</span>\n      <span class=\"nx\">penColor</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">colorText</span><span class=\"p\">}</span>\n      <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/SafeAreaView</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Endeavor to add the styles below to the app.js file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"nx\">StyleSheet</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n<span class=\"na\">container</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"na\">flex</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">alignItems</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">center</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">justifyContent</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">center</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n  <span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">},</span>\n<span class=\"na\">row</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"na\">flexDirection</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">row</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">marginTop</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n  <span class=\"na\">borderBottomWidth</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"na\">borderBottomColor</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">#f2f2f2</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">paddingBottom</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">textSign</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">deepskyblue</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">fontWeight</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">bold</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">paddingVertical</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">#fff</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">fontWeight</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">900</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">textInput</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">paddingVertical</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"na\">textAlign</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">center</span><span class=\"dl\">'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">setButton</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">deepskyblue</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">textAlign</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">center</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">fontWeight</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">900</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">#fff</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">marginHorizontal</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"na\">paddingVertical</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n    <span class=\"na\">paddingHorizontal</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"na\">borderRadius</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now the UI and the state where the input field will update are ready. I will declare the handleColorChange function so that when the Set button is clicked, the changePenColor() method will change the pen color to the color specified in the input field. The code is below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">handleColorChange</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">changePenColor</span><span class=\"p\">(</span><span class=\"nx\">colorText</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_2DFt7DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image04.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_2DFt7DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image04.jpeg\" alt=\"4 Image of Android and iOS emulators showing Undo and Redo Buttons and Pen drawing in Red Color\" loading=\"lazy\" width=\"880\" height=\"680\"></a></p>\n\n<p>Using the undo() and redo() methods, I will implement the undo and redo functionalities. The functions are below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"err\">#</span><span class=\"nb\">Function</span> <span class=\"nx\">to</span> <span class=\"nx\">handle</span> <span class=\"nx\">Undo</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handleUndo</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">undo</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n\n<span class=\"err\">#</span><span class=\"nb\">Function</span> <span class=\"nx\">to</span> <span class=\"nx\">handle</span> <span class=\"nx\">Redo</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handleRedo</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">redo</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, the drawings on the signature canvas can be undone and redone. </p>\n\n<h2>Open Source Session Replay</h2> \n\n<p><em><a href=\"https://github.com/openreplay/openreplay\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data.</em></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" alt=\"OpenReplay\" loading=\"lazy\" width=\"768\" height=\"400\"></a></p>\n\n<p><em>Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\">start using OpenReplay for free</a>.</em></p>\n\n<h2>\n  <a name=\"creating-preview-feature\" href=\"#creating-preview-feature\">\n  </a>\n  Creating Preview Feature\n</h2>\n\n<p>After a signature is drawn, the image is stored as a base64 string by default. This string can be rendered as an image; this preview feature is just a way to demonstrate that. For this to happen, I will create a state where the base64 string will be stored. When the preview button is clicked, the base64 image stored in the state will be rendered as the URI of an image within an Image component and then displayed.</p>\n\n<p>First, I will modify the app.js file to incorporate the Image component alongside other components. The code is below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">SignatureScreen</span>\n      <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">ref</span><span class=\"p\">}</span>\n      <span class=\"nx\">onOK</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleOK</span><span class=\"p\">}</span>\n      <span class=\"nx\">onEmpty</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleEmpty</span><span class=\"p\">}</span>\n      <span class=\"nx\">penColor</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">colorText</span><span class=\"p\">}</span>\n      <span class=\"nx\">onClear</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleClear</span><span class=\"p\">}</span>\n      <span class=\"nx\">confirmText</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">Preview</span><span class=\"dl\">\"</span>\n      <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">textSign</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Preview</span> <span class=\"nx\">Signature</span><span class=\"o\">&lt;</span><span class=\"sr\">/Text</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"nx\">Image</span>\n    <span class=\"nx\">resizeMode</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">cover</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n    <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"na\">paddingBottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span> <span class=\"p\">}}</span>\n    <span class=\"nx\">source</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"na\">uri</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://placeimg.com/140/140/any</span><span class=\"dl\">\"</span> <span class=\"p\">}}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/SafeAreaView</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You should also add the following styles.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"p\">...</span>\n  <span class=\"nx\">preview</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"mi\">335</span><span class=\"p\">,</span>\n    <span class=\"nx\">height</span><span class=\"p\">:</span> <span class=\"mi\">114</span><span class=\"p\">,</span>\n    <span class=\"nx\">backgroundColor</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">#F8F8F8</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">justifyContent</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">center</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">alignItems</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">center</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">marginTop</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span> \n  <span class=\"p\">...</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you noticed, using the confirmText prop, I updated the confirm text value to \"Preview\". Moving on, I will create a state that will store the drawn signature. Then, I will modify the handleOk function so that when the \"Preview\" button is clicked, it will update the state with the base64 image string.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">signature</span><span class=\"p\">,</span> <span class=\"nx\">setSign</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n<span class=\"c1\">//onOk Function  update</span>\n<span class=\"kd\">const</span> <span class=\"nx\">handleOK</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setSign</span><span class=\"p\">(</span><span class=\"nx\">signature</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, for the preview functionality, I will pass the base64 image into the image component like so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"p\">...</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">Image</span>\n    <span class=\"nx\">resizeMode</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">cover</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n    <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"na\">paddingBottom</span><span class=\"p\">:</span> <span class=\"mi\">20</span> <span class=\"p\">}}</span>\n    <span class=\"nx\">source</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"na\">uri</span><span class=\"p\">:</span> <span class=\"nx\">signature</span> <span class=\"p\">}}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">..</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The drawn signature is displayed in the image component when the preview button is clicked. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BoB1gGdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image05.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BoB1gGdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image05.jpeg\" alt=\"5 Signatures being Previewed\" loading=\"lazy\" width=\"880\" height=\"680\"></a></p>\n\n<h2>\n  <a name=\"saving-base64-image-as-png-into-device\" href=\"#saving-base64-image-as-png-into-device\">\n  </a>\n  Saving Base64 Image as PNG into Device\n</h2>\n\n<p>The signature functionality and some other utilities of this library have been demonstrated and implemented, and now the drawn signature needs to be saved to the device. For this to be possible,  the app has to have permission to write into the device's storage on Android and iOS, and with the <a href=\"https://www.npmjs.com/package/rn-fetch-blob\">rn-fetch-blob</a> library, the saving will be implemented.</p>\n\n<h3>\n  <a name=\"setting-up-permission-for-android\" href=\"#setting-up-permission-for-android\">\n  </a>\n  Setting up Permission for Android\n</h3>\n\n<p>Navigate to RNDigialSig/Android/app/src/main/AndroidManifest.xml and add the permission below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n\n\n&lt;application\n...\nandroid:requestLegacyExternalStorage=\"true\"&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>After this, build the project in your Android emulator. If you are unsure how to do this, the command is above.</p>\n\n<h3>\n  <a name=\"setting-up-permission-for-ios\" href=\"#setting-up-permission-for-ios\">\n  </a>\n  Setting up Permission for iOS\n</h3>\n\n<p>Navigate to RNDigitalSig/ios/RNDigitalSig/info.plist and add the permission below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;key&gt;NSPhotoLibraryAddUsageDescription&lt;/key&gt;\n&lt;string&gt;This app would like to save images to your device.&lt;/string&gt;\n&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;\n&lt;string&gt;This app would like to save images to your device.&lt;/string&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Run the command to build the project in your iOS simulator. </p>\n\n<p>Now the permissions are set, the next thing is to add a button such that onclick, the signature will be saved to the device's storage. Add the code below after closing the image component to create a button.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;TouchableOpacity\n    style={styles.saveButton}\n    onPress={handleSave}\n    &gt;\n    &lt;Text style={styles.text}&gt;Save Signature&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The style below should also be added.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">saveButton</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nl\">backgroundColor</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">deepskyblue</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">textAlign</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">center</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">fontWeight</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">900</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">color</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">#fff</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"nx\">paddingVertical</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nx\">paddingHorizontal</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nx\">borderRadius</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, I will declare the handleSave function such that it checks for permission, and if granted, it will, with the help of the <a href=\"https://www.npmjs.com/package/rn-fetch-blob\">rn-fetch-blob</a> library, take the base64 image and save it to the Downloads folder for Android and the Documents folder for iOS. The code is below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"err\">#</span><span class=\"nx\">Add</span> <span class=\"nx\">Import</span> <span class=\"nx\">Statement</span> <span class=\"nx\">at</span> <span class=\"nx\">the</span> <span class=\"nx\">Top</span>\n<span class=\"k\">import</span> <span class=\"nx\">RNFetchBlob</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">rn-fetch-blob</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">const</span> <span class=\"nx\">handleSave</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">Platform</span><span class=\"p\">.</span><span class=\"nx\">OS</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">android</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">isReadGranted</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">PermissionsAndroid</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span>\n        <span class=\"nx\">PermissionsAndroid</span><span class=\"p\">.</span><span class=\"nx\">PERMISSIONS</span><span class=\"p\">.</span><span class=\"nx\">WRITE_EXTERNAL_STORAGE</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isReadGranted</span> <span class=\"o\">===</span> <span class=\"nx\">PermissionsAndroid</span><span class=\"p\">.</span><span class=\"nx\">RESULTS</span><span class=\"p\">.</span><span class=\"nx\">GRANTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">dirs</span> <span class=\"o\">=</span> <span class=\"nx\">RNFetchBlob</span><span class=\"p\">.</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">dirs</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">image_data</span> <span class=\"o\">=</span> <span class=\"nx\">signature</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">data:image/png;base64,</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">filePath</span> <span class=\"o\">=</span> <span class=\"nx\">dirs</span><span class=\"p\">.</span><span class=\"nx\">DownloadDir</span><span class=\"o\">+</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"o\">+</span><span class=\"dl\">'</span><span class=\"s1\">signture</span><span class=\"dl\">'</span><span class=\"o\">+</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"dl\">'</span><span class=\"s1\">.png</span><span class=\"dl\">'</span>\n      <span class=\"nx\">RNFetchBlob</span><span class=\"p\">.</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">,</span> <span class=\"nx\">image_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"dl\">'</span><span class=\"s1\">base64</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Successfuly saved to</span><span class=\"dl\">\"</span><span class=\"o\">+</span> <span class=\"nx\">filePath</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span><span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>      <span class=\"p\">}</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">Platform</span><span class=\"p\">.</span><span class=\"nx\">OS</span> <span class=\"o\">===</span><span class=\"dl\">'</span><span class=\"s1\">ios</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">dirs</span> <span class=\"o\">=</span> <span class=\"nx\">RNFetchBlob</span><span class=\"p\">.</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">dirs</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">dirs</span><span class=\"p\">)</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">image_data</span> <span class=\"o\">=</span> <span class=\"nx\">signature</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">data:image/png;base64,</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">filePath</span> <span class=\"o\">=</span> <span class=\"nx\">dirs</span><span class=\"p\">.</span><span class=\"nx\">DocumentDir</span><span class=\"o\">+</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"o\">+</span><span class=\"dl\">'</span><span class=\"s1\">signature</span><span class=\"dl\">'</span><span class=\"o\">+</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"dl\">'</span><span class=\"s1\">.png</span><span class=\"dl\">'</span>\n      <span class=\"nx\">RNFetchBlob</span><span class=\"p\">.</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">,</span> <span class=\"nx\">image_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"dl\">'</span><span class=\"s1\">base64</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">RNFetchBlob</span><span class=\"p\">.</span><span class=\"nx\">ios</span><span class=\"p\">.</span><span class=\"nx\">previewDocument</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">file://</span><span class=\"dl\">\"</span><span class=\"o\">+</span><span class=\"nx\">filePath</span><span class=\"p\">)</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Successfully saved to</span><span class=\"dl\">\"</span><span class=\"o\">+</span> <span class=\"nx\">filePath</span><span class=\"p\">)</span>\n              <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span><span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Once this is implemented, you should have your signature canvas take signatures and store them in the device's storage as png images.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4qfi0x-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image06.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4qfi0x-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image06.jpeg\" alt=\"6 Signatures Saved to Device’s Storage Displaying in Android and iOS Emulators\" loading=\"lazy\" width=\"880\" height=\"680\"></a></p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>This straightforward tutorial will enable you to set up a digital signature canvas in your React Native projects. If you followed duly, you should have the same result, but if you followed through and are experiencing any challenges, kindly use the comment section to air your issue, and  I will gladly assist as much as possible.  </p>\n\n<blockquote>\n<p>A TIP FROM THE EDITOR: For more work with canvas and React, don't miss our <a href=\"https://blog.openreplay.com/2d-sketches-with-react-and-the-canvas-api\">2D sketches with React and the Canvas API</a> and <a href=\"https://blog.openreplay.com/implementing-3d-graphics-in-react/\">Implementing 3D Graphics In React</a> articles.</p>\n</blockquote>\n\n<p><a href=\"https://newsletter.openreplay.com/\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gxR3i5E2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/newsletter_Z1P0UIP.png\" alt=\"newsletter\" loading=\"lazy\" width=\"880\" height=\"137\"></a> </p>\n\n","body_markdown":"by [Champion Uzoma](https://blog.openreplay.com/authors/champion-uzoma)\n\n\nUser signatures can be captured without following the signing on paper and scanning method. With a signature canvas feature in-app, users can quickly sign and attach their signatures or sign onto files right on their phones. \n\nIn this tutorial, I want to demonstrate how this signature canvas can be set up in an Android and iOS app using React Native. The app will capture the user's signature and save it as an image to the user's storage. The complete source code for this tutorial is at [Github](https://github.com/championuz/RNDigitalSig).\n\nTo follow it, basic knowledge of React Native is essential, and you should have [React Native](https://reactnative.dev/docs/getting-started) set up on your computer. An Android and an iOS simulator should also be set up for testing the application. You can learn how to set up React Native and how to set up Android and iOS emulators on your computer [here](https://reactnative.dev/docs/environment-setup).\n\n![1](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image01.gif)\n\n\n\n## Initialize React Native Project\n\nThe first step for this tutorial is to initialize a React Native project. This initialization involves running a command in your terminal, and an empty project will be set up. After running the initialization command, you will need to download the necessary iOS dependencies and build the project in Android and iOS emulators. The commands for these processes are below.\n\n```\n#Initialize React Native Project\nnpx react-native init RNDigitalSig\n\n# Navigate to the ios folder and Install iOS dependencies\ncd ios && pod install\n\n#Navigate back to the Project root folder\ncd ..\n\n#Run on Android Emulator\nnpx react-native run-android\n\n#Run on iOS Simulator\nnpx react-native run-ios\n```\n\nIf this sequence was correctly executed, your Android and iOS emulators should show up like this:\n\n![2 Image of Android and iOS Emulators Showing Default React Native Project.](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image02.jpeg)\n\n\n\n## Setting up Signature Canvas\n\nThe React Native project has been successfully initialized, and the next thing is to get right into the core of this tutorial which is setting up a signature canvas.\n\nThe features of this digital signature project will  be:\n\n1. Signing functionality\n2. Undo and Redo functionality\n3. Preview signature\n4. Pen Color change\n5. Saving signature to device\n\nFor all these features to be set up, I will be working with some [React Native Libraries](https://reactnative.dev/docs/libraries). For the Signing functionality, I will be using the [react-native-signature-canvas](https://www.npmjs.com/package/react-native-signature-canvas) then, [rn-fetch-blob](https://www.npmjs.com/package/rn-fetch-blob) will be used to save the signature image to the device. The [react-native-webview](https://www.npmjs.com/package/react-native-webview) also needs to be installed because [react-native-signature-canvas](https://www.npmjs.com/package/react-native-signature-canvas) depends on it.\n\n\n## Creating Signing Functionality with React Native Signature Canvas\n\nRight now,  you should install the following libraries [react-native-signature-canvas](https://www.npmjs.com/package/react-native-signature-canvas) library and [react-native-webview](https://www.npmjs.com/package/react-native-webview). To install it, run the following command in your terminal. Ensure you are running it in the project's root folder.\n \n```\n#install library\nnpm i react-native-signature-canvas react-native-webview rn-fetch-blob\n```\n\nOnce complete, install the necessary iOS dependencies and build on Android and iOS Emulators. The commands for these are already stated above.\n\nNext, open up app.js, and at the top of the page, import react-native-signature-canvas like so:\n\n```\nimport SignatureScreen from 'react-native-signature-canvas'\n```\n\nNow, for the declared SignatureScreen to render correctly, some functions will have to be declared and assigned to the SignatureScreen using the accompanying props. You can get complete details of the props and methods associated with this library [here](https://www.npmjs.com/package/react-native-signature-canvas). \n\nInsert the code below within the app component.\n\n```javascript\nconst App = ({ text, onOK }) => {\n  const ref = useRef();\n\n  // Called after ref.current.readSignature() reads a non-empty base64 string\n  const handleOK = (signature) => {\n    console.log(signature);\n    onOK(signature); // Callback from Component props\n  };\n\n  // Called after ref.current.readSignature() reads an empty string\n  const handleEmpty = () => {\n    console.log(\"Empty\");\n  };\n\n  // Called after ref.current.clearSignature()\n  const handleClear = () => {\n    console.log(\"clear success!\");\n  };\n\n  // Called after end of stroke\n  const handleEnd = () => {\n    ref.current.readSignature();\n  };\n\n  // Called after ref.current.getData()\n  const handleData = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <SignatureScreen\n      ref={ref}\n      onEnd={handleEnd}\n      onOK={handleOK}\n      onEmpty={handleEmpty}\n      onClear={handleClear}\n      onGetData={handleData}\n      autoClear={true}\n      descriptionText={text}\n    />\n  );\n};\n```\n\nYour Android and iOS emulators should show up like this:\n\n\n![3 Image of Android and iOS Emulators showing default Signature Screen](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image03.jpeg)\n\n\nAs shown, SignatureScreen works with the [React useRef](https://reactjs.org/docs/hooks-reference.html#useref) hook and thus should be imported at the top of the page. You will also notice the presence of props like onEnd,  onOk, onEmpty, onClear, onGetData, autoClear, and descriptionText. These are basic props of the react-native-signature-canvas, and some can have functions assigned to them. These functions will be triggered when any of the conditions are met. For instance, the onClear prop is assigned to the handleClear function. This function will be executed when you click to clear the signature canvas. A simple instruction is to log \"clear success\" to the console when a user clears the canvas. You can implement anything you want or alert a message to the user. \n\nTo further demonstrate how the props and methods of this library can be used, I will use the changePenColor() method to execute a color change with a specified color from a state. Then, the penColor prop will take the value of the state and change the pen color to the specified color. Also, I will create an undo and redo functionality that will make it possible for the users to undo or redo an action instead of just clearing the canvas or being unable to retrieve an undone signature.\n\nTo create this functionality, I will modify the UI of the app. The UI will contain the field where the color will be specified and the buttons for undo and redo. Kindly update your app.js with the code.\n\n```javascript\nconst App = ({ text, onOK }) => {\n  const [colorText, setPenColor] = useState(\"\");\n  const ref = useRef();\n  \n  const handleOK = (signature) => {\n    console.log(signature);\n    onOK(signature); // Callback from Component props\n  };\n\n  const handleClear = () => {\n    console.log(\"clear success!\");\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n    <Text style={styles.textSign}>Sign Below</Text>\n    <View style={styles.row}>\n    <TouchableOpacity\n      style={[styles.setButton, {marginRight: 30, backgroundColor: 'red'}]}\n      onPress={handleUndo}\n      >\n      <Text style={styles.text}>Undo</Text>\n      </TouchableOpacity>\n    <TextInput\n      placeholder= \"Specify Pen Color\"\n      style={styles.textInput}\n      autoCapitalize=\"none\"\n      value={colorText}\n      onChangeText={setPenColor} />\n      <TouchableOpacity\n      style={styles.setButton}\n      onPress={handleColorChange}\n      >\n      <Text style={styles.text}>Set</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n      style={[styles.setButton, {marginLeft: 30, backgroundColor: 'red'}]}\n      onPress={handleRedo}\n      >\n      <Text style={styles.text}>Redo</Text>\n      </TouchableOpacity>\n    </View>\n\n    <SignatureScreen\n      ref={ref}\n      onEmpty={handleEmpty}\n      onClear={handleClear}\n      penColor={colorText}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default App;\n```\n\nEndeavor to add the styles below to the app.js file:\n\n```javascript\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  height: 250,\n  padding: 10,\n},\nrow: {\n  flexDirection: 'row',\n  marginTop: 10,\n  borderBottomWidth: 1,\n    borderBottomColor: '#f2f2f2',\n    paddingBottom: 5\n  },\n  textSign: {\n    color: 'deepskyblue',\n    fontWeight: 'bold',\n    paddingVertical: 5,\n  },\n  text: {\n    color: '#fff',\n    fontWeight: '900',\n  },\n  textInput: {\n    paddingVertical: 10,\n    textAlign: 'center'\n  },\n  setButton: {\n    backgroundColor: 'deepskyblue',\n    textAlign: 'center',\n    fontWeight: '900',\n    color: '#fff',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  }\n});\n```\n\nNow the UI and the state where the input field will update are ready. I will declare the handleColorChange function so that when the Set button is clicked, the changePenColor() method will change the pen color to the color specified in the input field. The code is below:\n\n```javascript\nconst handleColorChange = () => {\n  ref.current.changePenColor(colorText);\n};\n```\n\n![4 Image of Android and iOS emulators showing Undo and Redo Buttons and Pen drawing in Red Color](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image04.jpeg)\n\n\nUsing the undo() and redo() methods, I will implement the undo and redo functionalities. The functions are below:\n\n```javascript\n#Function to handle Undo\nconst handleUndo = () => {\n  ref.current.undo();\n};\n\n#Function to handle Redo\nconst handleRedo = () => {\n  ref.current.redo();\n};\n```\n\nNow, the drawings on the signature canvas can be undone and redone. \n\n\n<h2>Open Source Session Replay</h2> \n\n_<a href=\"https://github.com/openreplay/openreplay\" target=\"_blank\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data._\n\n![OpenReplay](https://blog.openreplay.com/banner-blog_1oYPGT.png)\n\n_Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\" >start using OpenReplay for free</a>._\n\n\n\n\n\n\n## Creating Preview Feature\n\nAfter a signature is drawn, the image is stored as a base64 string by default. This string can be rendered as an image; this preview feature is just a way to demonstrate that. For this to happen, I will create a state where the base64 string will be stored. When the preview button is clicked, the base64 image stored in the state will be rendered as the URI of an image within an Image component and then displayed.\n\nFirst, I will modify the app.js file to incorporate the Image component alongside other components. The code is below:\n\n```javascript\n<SignatureScreen\n      ref={ref}\n      onOK={handleOK}\n      onEmpty={handleEmpty}\n      penColor={colorText}\n      onClear={handleClear}\n      confirmText=\"Preview\"\n      />\n      <Text style={styles.textSign}>Preview Signature</Text>\n    <Image\n    resizeMode={\"cover\"}\n    style={{ width: 300, height: 180, paddingBottom: 20 }}\n    source={{ uri: \"https://placeimg.com/140/140/any\" }}/>\n    </SafeAreaView>\n  );\n};\n```\n\nYou should also add the following styles.\n\n```javascript\n  ...\n  preview: {\n    width: 335,\n    height: 114,\n    backgroundColor: \"#F8F8F8\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 15,\n  }, \n  ...\n```\n\nIf you noticed, using the confirmText prop, I updated the confirm text value to \"Preview\". Moving on, I will create a state that will store the drawn signature. Then, I will modify the handleOk function so that when the \"Preview\" button is clicked, it will update the state with the base64 image string.\n\n```javascript\nconst [signature, setSign] = useState(null);\n\n//onOk Function  update\nconst handleOK = (signature) => {\n    setSign(signature);\n  };\n```\n\nFinally, for the preview functionality, I will pass the base64 image into the image component like so:\n\n```javascript\n...\n<Image\n    resizeMode={\"cover\"}\n    style={{ width: 300, height: 180, paddingBottom: 20 }}\n    source={{ uri: signature }}/>\n    ..\n```\n\nThe drawn signature is displayed in the image component when the preview button is clicked. \n\n![5 Signatures being Previewed](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image05.jpeg)\n\n\n\n## Saving Base64 Image as PNG into Device\n\nThe signature functionality and some other utilities of this library have been demonstrated and implemented, and now the drawn signature needs to be saved to the device. For this to be possible,  the app has to have permission to write into the device's storage on Android and iOS, and with the [rn-fetch-blob](https://www.npmjs.com/package/rn-fetch-blob) library, the saving will be implemented.\n\n\n### Setting up Permission for Android\n\nNavigate to RNDigialSig/Android/app/src/main/AndroidManifest.xml and add the permission below:\n\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n    \n\n<application\n...\nandroid:requestLegacyExternalStorage=\"true\">\n```\n\nAfter this, build the project in your Android emulator. If you are unsure how to do this, the command is above.\n\n\n### Setting up Permission for iOS\n\nNavigate to RNDigitalSig/ios/RNDigitalSig/info.plist and add the permission below:\n\n```\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>This app would like to save images to your device.</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>This app would like to save images to your device.</string>\n```\n\nRun the command to build the project in your iOS simulator. \n\nNow the permissions are set, the next thing is to add a button such that onclick, the signature will be saved to the device's storage. Add the code below after closing the image component to create a button.\n\n```\n<TouchableOpacity\n    style={styles.saveButton}\n    onPress={handleSave}\n    >\n    <Text style={styles.text}>Save Signature</Text>\n    </TouchableOpacity>\n```\n\nThe style below should also be added.\n\n```javascript\nsaveButton: {\n    backgroundColor: 'deepskyblue',\n    textAlign: 'center',\n    fontWeight: '900',\n    color: '#fff',\n    paddingVertical: 10,\n    paddingHorizontal: 10,\n    borderRadius: 20,\n  },\n```\n\nNow, I will declare the handleSave function such that it checks for permission, and if granted, it will, with the help of the [rn-fetch-blob](https://www.npmjs.com/package/rn-fetch-blob) library, take the base64 image and save it to the Downloads folder for Android and the Documents folder for iOS. The code is below:\n\n```javascript\n#Add Import Statement at the Top\nimport RNFetchBlob from \"rn-fetch-blob\";\n\n\nconst handleSave = async () => {\n    if (Platform.OS === 'android') {\n    var isReadGranted = await PermissionsAndroid.request(\n        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n      );\n    }\n    if (isReadGranted === PermissionsAndroid.RESULTS.GRANTED) {\n      const dirs = RNFetchBlob.fs.dirs\n      var image_data = signature.split('data:image/png;base64,');\n      const filePath = dirs.DownloadDir+\"/\"+'signture'+new Date().getMilliseconds()+'.png'\n      RNFetchBlob.fs.writeFile(filePath, image_data[1], 'base64')\n      .then(() => {\n        console.log(\"Successfuly saved to\"+ filePath)\n      })\n      .catch((errorMessage) =>{\n        console.log(errorMessage)\n      })      }\n        \n      if (Platform.OS ==='ios') {\n      const dirs = RNFetchBlob.fs.dirs\n      console.log(dirs)\n      var image_data = signature.split('data:image/png;base64,');\n      const filePath = dirs.DocumentDir+\"/\"+'signature'+new Date().getMilliseconds()+'.png'\n      RNFetchBlob.fs.writeFile(filePath, image_data[1], 'base64')\n      .then(() => {\n            RNFetchBlob.ios.previewDocument(\"file://\"+filePath)\n            console.log(\"Successfully saved to\"+ filePath)\n              })\n      .catch((errorMessage) =>{\n        console.log(errorMessage)\n      })\n      }\n    }\n```\n\nOnce this is implemented, you should have your signature canvas take signatures and store them in the device's storage as png images.\n\n![6 Signatures Saved to Device’s Storage Displaying in Android and iOS Emulators](https://blog.openreplay.com/images/setting-up-a-signature-canvas-in-react-native/images/image06.jpeg)\n\n\n\n## Conclusion\n\nThis straightforward tutorial will enable you to set up a digital signature canvas in your React Native projects. If you followed duly, you should have the same result, but if you followed through and are experiencing any challenges, kindly use the comment section to air your issue, and  I will gladly assist as much as possible.  \n\n> A TIP FROM THE EDITOR: For more work with canvas and React, don't miss our [2D sketches with React and the Canvas API](https://blog.openreplay.com/2d-sketches-with-react-and-the-canvas-api) and [Implementing 3D Graphics In React](https://blog.openreplay.com/implementing-3d-graphics-in-react/) articles.\n\n\n\n\n[![newsletter](https://blog.openreplay.com/newsletter_Z1P0UIP.png)](https://newsletter.openreplay.com/) \n\n\n","user":{"name":"OpenReplay Tech Blog","username":"asayerio_techblog","twitter_username":"asayerio","github_username":"fkereki-OR","user_id":571683,"website_url":"https://blog.openreplay.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cmJLpv_K--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--IJigyy1u--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png"}}