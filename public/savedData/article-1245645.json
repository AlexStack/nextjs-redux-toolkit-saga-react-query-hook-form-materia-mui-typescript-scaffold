{"type_of":"article","id":1245645,"title":"44-Nodejs Course 2023: Database Recycle Bin","description":"We've proceeded with a nice progress in the saving process, but we still have a problem, what if we...","readable_publish_date":"Nov 6","slug":"44-nodejs-course-2023-database-recycle-bin-3k36","path":"/hassanzohdy/44-nodejs-course-2023-database-recycle-bin-3k36","url":"https://dev.to/hassanzohdy/44-nodejs-course-2023-database-recycle-bin-3k36","comments_count":0,"public_reactions_count":2,"collection_id":20274,"published_timestamp":"2022-11-06T21:03:50Z","positive_reactions_count":2,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s---7X2s0DK--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcbn083id5inrhxsjr7o.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--h_erhCVY--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcbn083id5inrhxsjr7o.png","canonical_url":"https://dev.to/hassanzohdy/44-nodejs-course-2023-database-recycle-bin-3k36","created_at":"2022-11-06T16:18:40Z","edited_at":"2022-11-07T04:12:53Z","crossposted_at":null,"published_at":"2022-11-06T21:03:50Z","last_comment_at":"2022-11-06T21:03:50Z","reading_time_minutes":6,"tag_list":"node, typescript, mongodb, fastify","tags":["node","typescript","mongodb","fastify"],"body_html":"<p>We've proceeded with a nice progress in the saving process, but we still have a problem, what if we want to delete a document from the database but we actually don't want to delete it?</p>\n\n<p>Well, we can use the <code>recycle bin</code> concept, we can just move the document to the recycle bin and then we can restore it.</p>\n\n<h2>\n  <a name=\"recycle-bin\" href=\"#recycle-bin\">\n  </a>\n  Recycle Bin\n</h2>\n\n<p>Here is how it works, when we call the <code>delete</code> method, we'll actually not deleting it, but we'll move it to another collection which will be called <code>collectionNameTrash</code> where <code>collectionName</code> is the name of the collection we want to delete the document from.</p>\n\n<p>For example if we want to delete a document from the <code>users</code> collection, we'll move it to the <code>usersTrash</code> collection.</p>\n\n<p>Now let's try it in the <code>destroy</code> method first.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n\n  <span class=\"cm\">/**\n   * Delete the document form database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">destroy</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Trash The data</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">deletedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// create a copy of the current data in the collectionTrash</span>\n    <span class=\"c1\">// create a copy of the current data in the collectionTrash</span>\n    <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">Trash</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">document</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n      <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// perform the actual delete</span>\n    <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">deleteOne</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span> <span class=\"p\">{</span>\n      <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We performed here before the actual delete from the database a new query to create a copy of the document in the trash collection which will be added in the Model's collection name with the <code>Trash</code> suffix.</p>\n\n<p>The content that we added in the collection, contains the entire document data, the id and the <code>_id</code> of the document.</p>\n\n<p>But why would we add the id and the <code>_id</code> of the document?</p>\n\n<p>Well, we'll need them later to restore the document.</p>\n\n<h2>\n  <a name=\"restoring-the-document\" href=\"#restoring-the-document\">\n  </a>\n  Restoring The Document\n</h2>\n\n<p>Now let's go to the restoring process, we'll create a new method called <code>restore</code> which will be a static method that can be called directly from the model class itself.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/crud-model.ts</span>\n<span class=\"c1\">// ...</span>\n  <span class=\"cm\">/**\n   * Update model by the given id\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">restore</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">PrimaryIdType</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// find the document in the trash collection</span>\n    <span class=\"kd\">const</span> <span class=\"nb\">document</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collectionName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">Trash</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">primaryIdColumn</span><span class=\"p\">]:</span> <span class=\"nx\">id</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// if no document, then it means there is no document in the trash</span>\n    <span class=\"c1\">// table with that id</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">document</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// if we got here, create a new model and inject to it</span>\n    <span class=\"c1\">// the document object</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nb\">self</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nb\">document</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// add restoredAt column with current date</span>\n    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">restoredAt</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">());</span>\n\n    <span class=\"c1\">// perform save</span>\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// return the model</span>\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The restore method receives one parameter, the id of the document that we want to restore from the trash, if the document exists in the trash collection, get it.</p>\n\n<p>Now if the document exists, create a new model, inject the <code>document</code> which contains the entire data of the deleted document, after that add the <code>restoredAt</code> column with the current date.</p>\n\n<p>Now we can perform the save, and return the model.</p>\n\n<p>But there is a catch here, remember in the <code>save</code> method we have a condition that checks if the document has an <code>_id</code> or not, if it has an <code>_id</code> then it means that the document already exists in the database, so we'll perform an update, but if it doesn't have an <code>_id</code> then we'll perform an insert.</p>\n\n<p>So we need to remove the <code>_id</code> from the document before we perform the save, so we'll do that in the <code>restore</code> method.</p>\n\n<p>So we'll add another condition to check if it is being restored.</p>\n\n<p>We'll created a property called <code>isRestored</code> and method to mark the model as restored.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n<span class=\"c1\">// ...</span>\n\n  <span class=\"cm\">/**\n   * A flag to determine whether the model is restored or not\n   */</span>\n  <span class=\"k\">protected</span> <span class=\"nx\">isRestored</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"cm\">/**\n   * Mark the model as restored\n   */</span>\n  <span class=\"k\">public</span> <span class=\"nx\">markAsRestored</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let's call it in the <code>restore</code> method.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/crud-model.ts</span>\n<span class=\"c1\">// ...</span>\n  <span class=\"cm\">/**\n   * Update model by the given id\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">async</span> <span class=\"nx\">restore</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"k\">this</span><span class=\"p\">:</span> <span class=\"nx\">ChildModel</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">PrimaryIdType</span><span class=\"p\">,</span>\n  <span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// find the document in the trash collection</span>\n    <span class=\"kd\">const</span> <span class=\"nb\">document</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collectionName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">Trash</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">primaryIdColumn</span><span class=\"p\">]:</span> <span class=\"nx\">id</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// if no document, then it means there is no document in the trash</span>\n    <span class=\"c1\">// table with that id</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">document</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// if we got here, create a new model and inject to it</span>\n    <span class=\"c1\">// the document object</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nb\">self</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nb\">document</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// add restoredAt column with current date</span>\n    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">restoredAt</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">());</span>\n\n    <span class=\"c1\">// mark the model as restored</span>\n    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">markAsRestored</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// perform save</span>\n    <span class=\"k\">await</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// return the model</span>\n    <span class=\"k\">return</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let's go to the <code>save</code> method and add the condition.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// src/core/database/model/model.ts</span>\n\n\n  <span class=\"cm\">/**\n   * Perform saving operation either by updating or creating a new record in database\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">save</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">:</span> <span class=\"nx\">Document</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">mergedData</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if the data contains the primary id column</span>\n    <span class=\"c1\">// but is not being restored</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// perform an update operation</span>\n      <span class=\"c1\">// check if the data has changed</span>\n      <span class=\"c1\">// if not changed, then do not do anything</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">areEqual</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalData</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">_id</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n\n      <span class=\"c1\">// unset the isRestored flag</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isRestored</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// creating a new document in the database</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">generateNextId</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStaticProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">generateNextId</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">Model</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">generateNextId</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">createdAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// if the column does not exist, then create it</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">updatedAt</span> <span class=\"o\">=</span> <span class=\"nx\">now</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">queryBuilder</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCollectionName</span><span class=\"p\">(),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span>\n      <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And that's it, now we can restore the document.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">User</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./models/users</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">John Doe</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">await</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">destroy</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">restoredUser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">restore</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">restoredUser</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span> <span class=\"c1\">// { id: 1, name: 'John Doe', createdAt: '2021-01-01', updatedAt: '2021-01-01', restoredAt: '2021-01-01', deletedAt: '2021-01-01', _id: '5ff5c1c0e4b0e8b8b8b8b8b8' }</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And that's it!</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  🎨 Conclusion\n</h2>\n\n<p>In this article, we learned how to implement the recycle bin and move the model to it and learnt how to restore it again.</p>\n\n<h2>\n  <a name=\"project-repository\" href=\"#project-repository\">\n  </a>\n  🚀 Project Repository\n</h2>\n\n<p>You can find the latest updates of this project on <a href=\"https://github.com/hassanzohdy/nodejs-2023\">Github</a></p>\n\n<h2>\n  <a name=\"join-our-community\" href=\"#join-our-community\">\n  </a>\n  😍 Join our community\n</h2>\n\n<p>Join our community on <a href=\"https://discord.gg/pb2vmdfhGf\">Discord</a> to get help and support (Node Js 2023 Channel).</p>\n\n<h2>\n  <a name=\"video-course-arabic-voice\" href=\"#video-course-arabic-voice\">\n  </a>\n  🎞️ Video Course (Arabic Voice)\n</h2>\n\n<p>If you want to learn this course in video format, you can find it on <a href=\"https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz\">Youtube</a>, the course is in Arabic language.</p>\n\n<h2>\n  <a name=\"bonus-content\" href=\"#bonus-content\">\n  </a>\n  💰 Bonus Content 💰\n</h2>\n\n<p>You may have a look at these articles, it will definitely boost your knowledge and productivity.</p>\n\n<p>General Topics</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk\">Event Driven Architecture: A Practical Guide in Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi\">Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b\">After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n</a></li>\n</ul>\n\n<p>Packages &amp; Libraries</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15\">Collections: Your ultimate Javascript Arrays Manager</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e\">Supportive Is: an elegant utility to check types of values in JavaScript</a></li>\n<li><a href=\"https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3\">Localization: An agnostic i18n package to manage localization in your project</a></li>\n</ul>\n\n<p>React Js Packages</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9\">useFetcher: easiest way to fetch data in React Js</a></li>\n</ul>\n\n<p>Courses (Articles)</p>\n\n<ul>\n<li><a href=\"https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k\">React Js: Let\"s Create File Manager With React Js and Node Js</a></li>\n</ul>\n\n","body_markdown":"---\ntitle: 44-Nodejs Course 2023: Database Recycle Bin\npublished: true\ndescription: \nseries: Nodejs Course 2023\ntags: nodejs, typescript, mongodb, fastify\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcbn083id5inrhxsjr7o.png\n# Use a ratio of 100:42 for best results.\n---\n\nWe've proceeded with a nice progress in the saving process, but we still have a problem, what if we want to delete a document from the database but we actually don't want to delete it?\n\nWell, we can use the `recycle bin` concept, we can just move the document to the recycle bin and then we can restore it.\n\n## Recycle Bin\n\nHere is how it works, when we call the `delete` method, we'll actually not deleting it, but we'll move it to another collection which will be called `collectionNameTrash` where `collectionName` is the name of the collection we want to delete the document from.\n\nFor example if we want to delete a document from the `users` collection, we'll move it to the `usersTrash` collection.\n\nNow let's try it in the `destroy` method first.\n\n```ts\n// src/core/database/model/model.ts\n\n\n  /**\n   * Delete the document form database\n   */\n  public async destroy() {\n    if (!this.data._id) return;\n\n    // Trash The data\n    this.data.deletedAt = new Date();\n\n    // create a copy of the current data in the collectionTrash\n    // create a copy of the current data in the collectionTrash\n    await queryBuilder.create(this.getCollectionName() + \"Trash\", {\n      document: this.data,\n      id: this.data.id,\n      _id: this.data._id,\n    });\n\n    // perform the actual delete\n    await queryBuilder.deleteOne(this.getCollectionName(), {\n      _id: this.data._id,\n    });\n  }\n```\n\nWe performed here before the actual delete from the database a new query to create a copy of the document in the trash collection which will be added in the Model's collection name with the `Trash` suffix.\n\nThe content that we added in the collection, contains the entire document data, the id and the `_id` of the document.\n\nBut why would we add the id and the `_id` of the document?\n\nWell, we'll need them later to restore the document.\n\n## Restoring The Document\n\nNow let's go to the restoring process, we'll create a new method called `restore` which will be a static method that can be called directly from the model class itself.\n\n```ts\n// src/core/database/model/crud-model.ts\n// ...\n  /**\n   * Update model by the given id\n   */\n  public static async restore<T>(\n    this: ChildModel<T>,\n    id: PrimaryIdType,\n  ): Promise<T | null> {\n    // find the document in the trash collection\n    const document = await queryBuilder.first(this.collectionName + \"Trash\", {\n      [this.primaryIdColumn]: id,\n    });\n\n    // if no document, then it means there is no document in the trash\n    // table with that id\n    if (!document) return null;\n\n    // if we got here, create a new model and inject to it\n    // the document object\n    const model = this.self(document.document);\n\n    // add restoredAt column with current date\n    model.set(\"restoredAt\", new Date());\n\n    // perform save\n    await model.save();\n\n    // return the model\n    return model;\n  }\n```\n\nThe restore method receives one parameter, the id of the document that we want to restore from the trash, if the document exists in the trash collection, get it.\n\nNow if the document exists, create a new model, inject the `document` which contains the entire data of the deleted document, after that add the `restoredAt` column with the current date.\n\nNow we can perform the save, and return the model.\n\nBut there is a catch here, remember in the `save` method we have a condition that checks if the document has an `_id` or not, if it has an `_id` then it means that the document already exists in the database, so we'll perform an update, but if it doesn't have an `_id` then we'll perform an insert.\n\nSo we need to remove the `_id` from the document before we perform the save, so we'll do that in the `restore` method.\n\nSo we'll add another condition to check if it is being restored.\n\nWe'll created a property called `isRestored` and method to mark the model as restored.\n\n```ts\n// src/core/database/model/model.ts\n// ...\n\n  /**\n   * A flag to determine whether the model is restored or not\n   */\n  protected isRestored = false;\n  /**\n   * Mark the model as restored\n   */\n  public markAsRestored() {\n    this.isRestored = true;\n    return this;\n  }\n```\n\nNow let's call it in the `restore` method.\n\n```ts\n// src/core/database/model/crud-model.ts\n// ...\n  /**\n   * Update model by the given id\n   */\n  public static async restore<T>(\n    this: ChildModel<T>,\n    id: PrimaryIdType,\n  ): Promise<T | null> {\n    // find the document in the trash collection\n    const document = await queryBuilder.first(this.collectionName + \"Trash\", {\n      [this.primaryIdColumn]: id,\n    });\n\n    // if no document, then it means there is no document in the trash\n    // table with that id\n    if (!document) return null;\n\n    // if we got here, create a new model and inject to it\n    // the document object\n    const model = this.self(document.document);\n\n    // add restoredAt column with current date\n    model.set(\"restoredAt\", new Date());\n\n    // mark the model as restored\n    model.markAsRestored();\n\n    // perform save\n    await model.save();\n\n    // return the model\n    return model;\n  }\n```\n\nNow let's go to the `save` method and add the condition.\n\n```ts\n// src/core/database/model/model.ts\n\n\n  /**\n   * Perform saving operation either by updating or creating a new record in database\n   */\n  public async save(mergedData: Document = {}) {\n    this.merge(mergedData);\n\n    // check if the data contains the primary id column\n    // but is not being restored\n    if (this.data._id && !this.isRestored) {\n      // perform an update operation\n      // check if the data has changed\n      // if not changed, then do not do anything\n      if (areEqual(this.originalData, this.data)) return;\n\n      this.data.updatedAt = new Date();\n\n      await queryBuilder.update(\n        this.getCollectionName(),\n        {\n          _id: this.data._id,\n        },\n        this.data,\n      );\n\n      // unset the isRestored flag\n      if (this.isRestored) {\n        this.isRestored = false;\n      }\n    } else {\n      // creating a new document in the database\n      const generateNextId =\n        this.getStaticProperty(\"generateNextId\").bind(Model);\n\n      // if the column does not exist, then create it\n      if (!this.data.id) {\n        this.data.id = await generateNextId();\n      }\n\n      const now = new Date();\n\n      // if the column does not exist, then create it\n      if (!this.data.createdAt) {\n        this.data.createdAt = now;\n      }\n\n      // if the column does not exist, then create it\n      if (!this.data.updatedAt) {\n        this.data.updatedAt = now;\n      }\n\n      this.data = await queryBuilder.create(\n        this.getCollectionName(),\n        this.data,\n      );\n    }\n  }\n```\n\nAnd that's it, now we can restore the document.\n\n```ts\nimport User from './models/users';\n\nconst user = await User.create({\n    name: 'John Doe',\n});\n\nawait user.destroy();\n\nconst restoredUser = await User.restore(user.data.id);\n\nconsole.log(restoredUser.data); // { id: 1, name: 'John Doe', createdAt: '2021-01-01', updatedAt: '2021-01-01', restoredAt: '2021-01-01', deletedAt: '2021-01-01', _id: '5ff5c1c0e4b0e8b8b8b8b8b8' }\n```\n\nAnd that's it!\n\n## 🎨 Conclusion\n\nIn this article, we learned how to implement the recycle bin and move the model to it and learnt how to restore it again.\n\n## 🚀 Project Repository\n\nYou can find the latest updates of this project on [Github](https://github.com/hassanzohdy/nodejs-2023)\n\n## 😍 Join our community\n\nJoin our community on [Discord](https://discord.gg/pb2vmdfhGf) to get help and support (Node Js 2023 Channel).\n\n## 🎞️ Video Course (Arabic Voice)\n\nIf you want to learn this course in video format, you can find it on [Youtube](https://www.youtube.com/playlist?list=PLGO8ntvxgiZMJc7RN2lIq9WmMOlWZGzmz), the course is in Arabic language.\n\n## 💰 Bonus Content 💰\n\nYou may have a look at these articles, it will definitely boost your knowledge and productivity.\n\nGeneral Topics\n\n- [Event Driven Architecture: A Practical Guide in Javascript](https://dev.to/hassanzohdy/event-driven-architecture-the-best-paradigm-that-i-love-to-work-with-in-javascript-and-node-js-1gnk)\n- [Best Practices For Case Styles: Camel, Pascal, Snake, and Kebab Case In Node And Javascript](https://dev.to/hassanzohdy/best-practices-for-case-styles-camel-pascal-snake-and-kebab-case-in-node-and-javascript-55oi)\n- [After 6 years of practicing MongoDB, Here are my thoughts on MongoDB vs MySQL\n](https://dev.to/hassanzohdy/after-6-years-of-practicing-mongodb-here-are-my-thoughts-on-mongodb-vs-mysql-574b)\n\nPackages & Libraries\n\n- [Collections: Your ultimate Javascript Arrays Manager](https://dev.to/hassanzohdy/collections-your-ultimate-javascript-array-handler-3o15)\n- [Supportive Is: an elegant utility to check types of values in JavaScript](https://dev.to/hassanzohdy/supportive-is-an-elegant-utility-to-check-types-of-values-in-javascript-1b3e)\n- [Localization: An agnostic i18n package to manage localization in your project](https://dev.to/hassanzohdy/mongez-localization-the-simplest-way-to-translate-your-website-regardless-your-favorite-framework-4gi3)\n\n React Js Packages\n\n- [useFetcher: easiest way to fetch data in React Js](https://dev.to/hassanzohdy/usefetcher-the-easiest-way-to-fetch-data-in-react-45o9)\n\nCourses (Articles)\n\n- [React Js: Let\"s Create File Manager With React Js and Node Js](https://dev.to/hassanzohdy/lets-create-a-file-manager-from-scratch-with-react-and-typescript-chapter-i-a-good-way-to-expand-your-experience-5g4k)\n","user":{"name":"Hasan Zohdy","username":"hassanzohdy","twitter_username":null,"github_username":"hassanzohdy","user_id":148881,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qAfPQwU1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--a0msxQIX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148881/8d8cea7b-a824-49a6-84b7-2304ed9b64d9.jpg"}}