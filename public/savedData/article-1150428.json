{"type_of":"article","id":1150428,"title":"Creating a reusable table component with React-Table and Material UI","description":"Introduction   Tables are tools that we often use in our personal and business projects. A...","readable_publish_date":"Aug 6","slug":"creating-a-reusable-table-component-with-react-table-and-material-ui-10jd","path":"/serhatgenc/creating-a-reusable-table-component-with-react-table-and-material-ui-10jd","url":"https://dev.to/serhatgenc/creating-a-reusable-table-component-with-react-table-and-material-ui-10jd","comments_count":0,"public_reactions_count":20,"collection_id":null,"published_timestamp":"2022-08-06T07:42:38Z","positive_reactions_count":20,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--KrcBrLkw--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bejumxbv0296kch3ai3.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--n1oS6Uay--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bejumxbv0296kch3ai3.jpg","canonical_url":"https://dev.to/serhatgenc/creating-a-reusable-table-component-with-react-table-and-material-ui-10jd","created_at":"2022-07-24T21:03:55Z","edited_at":null,"crossposted_at":null,"published_at":"2022-08-06T07:42:38Z","last_comment_at":"2022-08-06T07:42:38Z","reading_time_minutes":7,"tag_list":"nextjs, reacttable, reactquery, typescript","tags":["nextjs","reacttable","reactquery","typescript"],"body_html":"<h2>\n  <a name=\"introduction\" href=\"#introduction\">\n  </a>\n  <strong>Introduction</strong>\n</h2>\n\n<p>Tables are tools that we often use in our personal and business projects. A table is a structured dataset consisting of rows and columns. It allows us to easily read, filter, and search large-scale data.</p>\n\n<p>I will show you how we can create a reusable table component using Tanstack's react-table and Material UI, and why we should use react-query where big data is used, such as tables.</p>\n\n<p>The framework I will use is Next.js, but you can follow this article using any react framework of your choice.</p>\n\n<p>First, let's start by installing the necessary packages for our project.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install @tanstack/react-table @tanstack/react-query @mui/material @emotion/react @emotion/styled\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In terms of being type-safe, I will use <em>Typescript</em>, and for my HTTP requests, I will use <em>Axios</em>. These two packages are not essential to install.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"creating-the-table\" href=\"#creating-the-table\">\n  </a>\n  <strong>Creating the table</strong>\n</h2>\n\n<p>We will create a table index file in the components folder. This is where we will structure our table. The table accepts two props named data and columns. To separate the data into the correct columns, the objects of the column array must contain a property named <em>accessorKey</em>. This key must be the same as the property key of the related data of the objects in the data array.</p>\n\n<p>For example, if there is email information in our data and this email information is sent with the email property key, this means that the accessorKey of our column will be email. An example of usage is shown in the following steps.</p>\n\n<p>To map data and columns to the table, we get our mapping functions from the useReactTable hook provided by react-table. We mapped data and column elements between Material UI table components. It's easy to customize the styles of these pre-styled table components for yourself.</p>\n\n<p>The table component should look like this.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// components/Table/index.tsx</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Paper</span><span class=\"p\">,</span>\n  <span class=\"nx\">Table</span> <span class=\"k\">as</span> <span class=\"nx\">MuiTable</span><span class=\"p\">,</span>\n  <span class=\"nx\">TableBody</span><span class=\"p\">,</span>\n  <span class=\"nx\">TableCell</span><span class=\"p\">,</span>\n  <span class=\"nx\">TableHead</span><span class=\"p\">,</span>\n  <span class=\"nx\">TableRow</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mui/material</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ColumnDef</span><span class=\"p\">,</span>\n  <span class=\"nx\">flexRender</span><span class=\"p\">,</span>\n  <span class=\"nx\">getCoreRowModel</span><span class=\"p\">,</span>\n  <span class=\"nx\">useReactTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@tanstack/react-table</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FC</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">TableProps</span> <span class=\"p\">{</span>\n  <span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">[];</span>\n  <span class=\"nl\">columns</span><span class=\"p\">:</span> <span class=\"nx\">ColumnDef</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">Table</span><span class=\"p\">:</span> <span class=\"nx\">FC</span><span class=\"o\">&lt;</span><span class=\"nx\">TableProps</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">columns</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">getHeaderGroups</span><span class=\"p\">,</span> <span class=\"nx\">getRowModel</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useReactTable</span><span class=\"p\">({</span>\n    <span class=\"nx\">data</span><span class=\"p\">,</span>\n    <span class=\"nx\">columns</span><span class=\"p\">,</span>\n    <span class=\"na\">getCoreRowModel</span><span class=\"p\">:</span> <span class=\"nx\">getCoreRowModel</span><span class=\"p\">(),</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Paper</span> <span class=\"nx\">elevation</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">}</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">1rem 0px</span><span class=\"dl\">\"</span> <span class=\"p\">}}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">MuiTable</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">TableHead</span><span class=\"o\">&gt;</span>\n          <span class=\"p\">{</span><span class=\"nx\">getHeaderGroups</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">headerGroup</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">TableRow</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">headerGroup</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n              <span class=\"p\">{</span><span class=\"nx\">headerGroup</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">header</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">TableCell</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                  <span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"p\">.</span><span class=\"nx\">isPlaceholder</span>\n                    <span class=\"p\">?</span> <span class=\"kc\">null</span>\n                    <span class=\"p\">:</span> <span class=\"nx\">flexRender</span><span class=\"p\">(</span>\n                        <span class=\"nx\">header</span><span class=\"p\">.</span><span class=\"nx\">column</span><span class=\"p\">.</span><span class=\"nx\">columnDef</span><span class=\"p\">.</span><span class=\"nx\">header</span><span class=\"p\">,</span>\n                        <span class=\"nx\">header</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">()</span>\n                      <span class=\"p\">)}</span>\n                <span class=\"o\">&lt;</span><span class=\"sr\">/TableCell</span><span class=\"err\">&gt;\n</span>              <span class=\"p\">))}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/TableRow</span><span class=\"err\">&gt;\n</span>          <span class=\"p\">))}</span>\n        <span class=\"o\">&lt;</span><span class=\"sr\">/TableHead</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"nx\">TableBody</span><span class=\"o\">&gt;</span>\n          <span class=\"p\">{</span><span class=\"nx\">getRowModel</span><span class=\"p\">().</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">row</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">TableRow</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n              <span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">getVisibleCells</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">cell</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">TableCell</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                  <span class=\"p\">{</span><span class=\"nx\">flexRender</span><span class=\"p\">(</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">column</span><span class=\"p\">.</span><span class=\"nx\">columnDef</span><span class=\"p\">.</span><span class=\"nx\">cell</span><span class=\"p\">,</span> <span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">())}</span>\n                <span class=\"o\">&lt;</span><span class=\"sr\">/TableCell</span><span class=\"err\">&gt;\n</span>              <span class=\"p\">))}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/TableRow</span><span class=\"err\">&gt;\n</span>          <span class=\"p\">))}</span>\n        <span class=\"o\">&lt;</span><span class=\"sr\">/TableBody</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/MuiTable</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Paper</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h2>\n  <a name=\"usage\" href=\"#usage\">\n  </a>\n  Usage\n</h2>\n\n<p>Now let's use the table in the project to test it and then try to improve the table. I will be getting the data from an API provided by <a href=\"https://gorest.co.in\">Gorest</a>. After we got the data, we sent it to the table as a prop. </p>\n\n<p>It is time to create the column array. As I said above, accessorKey is required, and the header property is what will be on that column's header. Header property is optional, and when you do not provide this property, the value here will take the string value you wrote to the accessorKey. If you want to change what is on the header, you can provide a string or JSX callback.</p>\n\n<p>The cell is another useful property. We can provide a callback here to give a custom look to our data cells for the column we want. The callback we returned on the cell property is giving us lots of information and functionality with a parameter. By digging around that parameter, you can find lots of details about your table, rows, and columns.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//pages/columns.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Chip</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mui/material</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ColumnDef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@tanstack/react-table</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">columns</span><span class=\"p\">:</span> <span class=\"nx\">ColumnDef</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"p\">,</span> <span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"na\">accessorKey</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">name</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">header</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Name</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"na\">accessorKey</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">email</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">header</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Email</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"na\">accessorKey</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">gender</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">header</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Gender</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"na\">accessorKey</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">status</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">header</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Status</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">cell</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"na\">row</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Chip</span>\n          <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">getValue</span><span class=\"p\">()}</span>\n          <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span>\n          <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">getValue</span><span class=\"p\">()</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">active</span><span class=\"dl\">\"</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">primary</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">default</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n        <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">];</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let's give the column array to the table as a prop and see the final version of the table usage.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//pages/index.tsx</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">type</span> <span class=\"p\">{</span> <span class=\"nx\">NextPage</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">next</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">axios</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Box</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@mui/material</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Table</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../components/Table</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">columns</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./columns</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Home</span><span class=\"p\">:</span> <span class=\"nx\">NextPage</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">users</span><span class=\"p\">,</span> <span class=\"nx\">setUsers</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">Api</span><span class=\"p\">.</span><span class=\"nx\">Users</span><span class=\"p\">.</span><span class=\"nx\">Data</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">fetchUsers</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"o\">&lt;</span><span class=\"nx\">Api</span><span class=\"p\">.</span><span class=\"nx\">Users</span><span class=\"p\">.</span><span class=\"nx\">FetchUsersResponse</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n      <span class=\"dl\">\"</span><span class=\"s2\">/api/users</span><span class=\"dl\">\"</span>\n    <span class=\"p\">);</span>\n\n    <span class=\"nx\">setUsers</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fetchUsers</span><span class=\"p\">();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Box</span> <span class=\"nx\">padding</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">users</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">&lt;</span><span class=\"nx\">Table</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">users</span><span class=\"p\">}</span> <span class=\"nx\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">columns</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;}&lt;/</span><span class=\"nx\">Box</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--I1Qfyg8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rfxecl779qcw40fpuv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--I1Qfyg8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rfxecl779qcw40fpuv.png\" loading=\"lazy\" width=\"880\" height=\"726\"></a><figure><br><figcaption>Table</figcaption></figure>\n  </p>\n\n\n<hr>\n\n<h2>\n  <a name=\"improving-the-table\" href=\"#improving-the-table\">\n  </a>\n  Improving the table\n</h2>\n\n<p>To improve the table, we are going to add;</p>\n\n<ul>\n<li>Pagination</li>\n<li>Search field</li>\n<li>Skeleton loading</li>\n<li>Click row action</li>\n<li>Custom header component</li>\n<li>Memoization</li>\n<li>React query for HTTP requests</li>\n</ul>\n\n<h3>\n  <a name=\"pagination\" href=\"#pagination\">\n  </a>\n  Pagination\n</h3>\n\n<p>This is the server-side pagination implementation. The table will now take two new props named <code>page</code> and <code>pageCount</code>.</p>\n\n<p>If we have information about the page count, react-table wants us to give the page count to the useReactTable hook. If we don't have the page count information, we can pass -1. We also need to set the manuelPagination property to true to handle the pagination manually.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">getHeaderGroups</span><span class=\"p\">,</span> <span class=\"nx\">getRowModel</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useReactTable</span><span class=\"p\">({</span>\n    <span class=\"nx\">data</span><span class=\"p\">,</span>\n    <span class=\"nx\">columns</span><span class=\"p\">,</span>\n    <span class=\"na\">getCoreRowModel</span><span class=\"p\">:</span> <span class=\"nx\">getCoreRowModel</span><span class=\"p\">(),</span>\n    <span class=\"na\">manualPagination</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">pageCount</span><span class=\"p\">,</span>\n  <span class=\"p\">})</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The page prop is for exposing the current page value to the outside of the table as a callback function. Invoke this function on the pagination change function with the current page value. This will come in handy as we want to keep track of the current page value outside of the table.</p>\n\n<p>We are going to keep the current page value inside the table component as a state.</p>\n\n<p>Instead of using the nextPage or previousPage functions provided to us by useReactTable, Material UI has a pagination component that will do an excellent job of paginating the table. This component handles pagination functions under the hood, so it only needs a few props to work.</p>\n\n<blockquote>\n<p>The pagination functions in useReactTable are mostly used for client-side pagination.</p>\n</blockquote>\n\n<p>The pagination component takes these three props named; <code>count</code>, <code>page</code>, and <code>onChange</code>. <em>Count</em> is the total number of pages, <em>page</em> is the current page and <em>onChange</em> is a callback that fires when the state changes.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">handlePageChange</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">unknown</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">currentPage</span><span class=\"p\">:</span> <span class=\"nx\">number</span>\n<span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">setPaginationPage</span><span class=\"p\">(</span><span class=\"nx\">currentPage</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"p\">?</span> <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"nx\">currentPage</span><span class=\"p\">);</span>\n  <span class=\"nx\">page</span><span class=\"p\">?.(</span><span class=\"nx\">currentPage</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"p\">?</span> <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"nx\">currentPage</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">{</span><span class=\"nx\">pageCount</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">page</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">Pagination</span>\n    <span class=\"nx\">count</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">pageCount</span><span class=\"p\">}</span>\n    <span class=\"nx\">page</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">paginationPage</span><span class=\"p\">}</span>\n    <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handlePageChange</span><span class=\"p\">}</span>\n    <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">primary</span><span class=\"dl\">\"</span>\n  <span class=\"o\">/&gt;</span>\n<span class=\"p\">)}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"search-field\" href=\"#search-field\">\n  </a>\n  Search field\n</h3>\n\n<p>We will retrieve the table results based on what we type in the search field. On the handleSearchChange function, we invoke the search callback given to the table to return the typed value. Notice that wrapping around the handle function with a debounce function is crucial because we don't want to return every typed value. This can cause problems such as making requests to an API on every typed value.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"kd\">const</span> <span class=\"nx\">handleSearchChange</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"nx\">e</span><span class=\"p\">:</span> <span class=\"nx\">ChangeEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span> <span class=\"o\">|</span> <span class=\"nx\">HTMLTextAreaElement</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">search</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">{</span><span class=\"nx\">search</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">TextField</span>\n    <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">debounce</span><span class=\"p\">(</span><span class=\"nx\">handleSearchChange</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)}</span>\n    <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span>\n    <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">searchLabel</span><span class=\"p\">}</span>\n    <span class=\"nx\">margin</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">normal</span><span class=\"dl\">\"</span>\n    <span class=\"nx\">variant</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">standard</span><span class=\"dl\">\"</span>\n  <span class=\"o\">/&gt;</span>\n<span class=\"p\">)}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"skeleton-loading\" href=\"#skeleton-loading\">\n  </a>\n  Skeleton loading\n</h3>\n\n<p>The table will display skeleton loading depending on the isFetching prop. The skeleton count on the table defaults to 10, and it can be overridden by giving the skeletonCount prop. We can think of the skeleton count prop as a row count for the skeletons, but we need the column count as well to render it on the table properly. We can get the number of columns with the getAllColumns function provided by useReactTable. The table includes the option of a skeleton height prop as well.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">getHeaderGroups</span><span class=\"p\">,</span> <span class=\"nx\">getRowModel</span><span class=\"p\">,</span> <span class=\"nx\">getAllColumns</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useReactTable</span><span class=\"p\">({</span>\n  <span class=\"nx\">data</span><span class=\"p\">,</span>\n  <span class=\"nx\">columns</span><span class=\"p\">,</span>\n  <span class=\"na\">getCoreRowModel</span><span class=\"p\">:</span> <span class=\"nx\">getCoreRowModel</span><span class=\"p\">(),</span>\n  <span class=\"na\">manualPagination</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nx\">pageCount</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">skeletons</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"nx\">skeletonCount</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">columnCount</span> <span class=\"o\">=</span> <span class=\"nx\">getAllColumns</span><span class=\"p\">().</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n<span class=\"p\">{</span>\n  <span class=\"o\">!</span><span class=\"nx\">isFetching</span> <span class=\"p\">?</span> <span class=\"p\">(</span>\n    <span class=\"nx\">getRowModel</span><span class=\"p\">().</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">row</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">StyledTableRow</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">getVisibleCells</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">cell</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n          <span class=\"o\">&lt;</span><span class=\"nx\">TableCell</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n            <span class=\"p\">{</span><span class=\"nx\">flexRender</span><span class=\"p\">(</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">column</span><span class=\"p\">.</span><span class=\"nx\">columnDef</span><span class=\"p\">.</span><span class=\"nx\">cell</span><span class=\"p\">,</span> <span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">())}</span>\n          <span class=\"o\">&lt;</span><span class=\"sr\">/TableCell</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">))}</span>\n      <span class=\"o\">&lt;</span><span class=\"sr\">/StyledTableRow</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">))</span>\n  <span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;&gt;</span>\n      <span class=\"c1\">//the mapping part of the skeletons</span>\n      <span class=\"p\">{</span><span class=\"nx\">skeletons</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">skeleton</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">TableRow</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{}</span><span class=\"o\">&gt;</span>\n          <span class=\"p\">{</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"nx\">columnCount</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">elm</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">TableCell</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">elm</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n              <span class=\"o\">&lt;</span><span class=\"nx\">Skeleton</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skeletonHeight</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/TableCell</span><span class=\"err\">&gt;\n</span>          <span class=\"p\">))}</span>\n        <span class=\"o\">&lt;</span><span class=\"sr\">/TableRow</span><span class=\"err\">&gt;\n</span>      <span class=\"p\">))}</span>\n    <span class=\"o\">&lt;</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"click-row-action\" href=\"#click-row-action\">\n  </a>\n  Click row action\n</h3>\n\n<p>When we map the data to the table using the getRowModel function, we can get details about that row or cell. Just pass the onClickRow prop function with row and cell parameters to the onClick property of the cell.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">getRowModel</span><span class=\"p\">().</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">row</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">StyledTableRow</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n    <span class=\"p\">{</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">getVisibleCells</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">cell</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">TableCell</span>\n        <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">onClickRow</span><span class=\"p\">?.(</span><span class=\"nx\">cell</span><span class=\"p\">,</span> <span class=\"nx\">row</span><span class=\"p\">)}</span>\n        <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span>\n      <span class=\"o\">&gt;</span>\n        <span class=\"p\">{</span><span class=\"nx\">flexRender</span><span class=\"p\">(</span><span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">column</span><span class=\"p\">.</span><span class=\"nx\">columnDef</span><span class=\"p\">.</span><span class=\"nx\">cell</span><span class=\"p\">,</span> <span class=\"nx\">cell</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">())}</span>\n      <span class=\"o\">&lt;</span><span class=\"sr\">/TableCell</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">))}</span>\n  <span class=\"o\">&lt;</span><span class=\"sr\">/StyledTableRow</span><span class=\"err\">&gt;\n</span><span class=\"p\">))</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"custom-header-component\" href=\"#custom-header-component\">\n  </a>\n  Custom header component\n</h3>\n\n<p>This is in case of a need for a header component for the table. We can place it above the search field.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Box</span> <span class=\"nx\">paddingX</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">1rem</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{</span><span class=\"nx\">headerComponent</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">&lt;</span><span class=\"nx\">Box</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">headerComponent</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/Box&gt;</span><span class=\"err\">}\n</span>  <span class=\"p\">{</span><span class=\"nx\">search</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">TextField</span>\n      <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">debounce</span><span class=\"p\">(</span><span class=\"nx\">handleSearchChange</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)}</span>\n      <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span>\n      <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">searchLabel</span><span class=\"p\">}</span>\n      <span class=\"nx\">margin</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">normal</span><span class=\"dl\">\"</span>\n      <span class=\"nx\">variant</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">standard</span><span class=\"dl\">\"</span>\n    <span class=\"o\">/&gt;</span>\n  <span class=\"p\">)}</span>\n<span class=\"o\">&lt;</span><span class=\"sr\">/Box</span><span class=\"err\">&gt;\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"memoization\" href=\"#memoization\">\n  </a>\n  Memoization\n</h3>\n\n<p>We need to apply memoization to prevent possible re-renders or computationally expensive performance losses. </p>\n\n<p>We are going to wrap the data, column, and headerComponent props into <code>useMemo</code> to prevent expensive re-calculation.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">memoizedData</span> <span class=\"o\">=</span> <span class=\"nx\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">]);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">memoizedColumns</span> <span class=\"o\">=</span> <span class=\"nx\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">columns</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">columns</span><span class=\"p\">]);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">memoisedHeaderComponent</span> <span class=\"o\">=</span> <span class=\"nx\">useMemo</span><span class=\"p\">(</span>\n  <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">headerComponent</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">headerComponent</span><span class=\"p\">]</span>\n<span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Wrapping the table export with <code>memo</code> to prevent unnecessary re-renders. This way, the component only re-renders when the props are changed.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//...</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Table</span><span class=\"p\">:</span> <span class=\"nx\">FC</span><span class=\"o\">&lt;</span><span class=\"nx\">TableProps</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">({</span>\n  <span class=\"c1\">//...</span>\n<span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">//...</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"c1\">//...</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">memo</span><span class=\"p\">(</span><span class=\"nx\">Table</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"react-query\" href=\"#react-query\">\n  </a>\n  React query\n</h3>\n\n<p>React-query is a fetching tool by Tanstack. React-query will cache the HTTP requests we make. Most of the time, the size of the data we will use in the table is considerably large, so we can prevent the delay in loading the data in the table by caching HTTP requests. You can see that after implementing the react-query, the HTTP requests you make are returned with a 304 code. This shows that the data is being read from the cache, or you can make a more detailed observation by installing @tanstack/react-query-devtools, one of the developer tools for react-query. Note that this tool is only available on the development build of the project. </p>\n\n<p>The useQuery hook provides the cached data, the status of our request, and the error object for possible errors. The usage is simple; for the first parameter, provide a key or array of keys; for the second parameter, the fetcher function for your data; and for the third parameter, the options object for the react-query, which is optional. Any change to the keys will trigger the fetcher function, so it makes sense that we provide this key value with our current page or search value.</p>\n\n<p>Since I don't want it to refetch every time I switch windows on the browser, I set the options object's refetchOnWindowFocus property to false. Let's set the keepPreviousData property to true for a smooth transition between the pages in the table.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">currentPage</span><span class=\"p\">,</span> <span class=\"nx\">setCurrentPage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">number</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">search</span><span class=\"p\">,</span> <span class=\"nx\">setSearch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">isFetching</span><span class=\"p\">,</span> <span class=\"nx\">isError</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">isSuccess</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useQuery</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">Api</span><span class=\"p\">.</span><span class=\"nx\">Users</span><span class=\"p\">.</span><span class=\"nx\">FetchUsersResponse</span><span class=\"p\">,</span>\n    <span class=\"nb\">Error</span>\n  <span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"dl\">\"</span><span class=\"s2\">users</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">currentPage</span><span class=\"p\">,</span> <span class=\"nx\">search</span><span class=\"p\">],</span> <span class=\"nx\">fetchUsers</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">refetchOnWindowFocus</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"na\">keepPreviousData</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6fxYZ2vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t1bd70qsrmzlpqhq8ah.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6fxYZ2vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t1bd70qsrmzlpqhq8ah.png\" loading=\"lazy\" width=\"880\" height=\"741\"></a><figure><br><figcaption>Final version of the table</figcaption></figure>\n  </p>\n\n<p>This was the end of my article. I hope this article helped you to build your reusable table.</p>\n\n<p>If you want to take a look at the full code, here is the <a href=\"https://github.com/SerhatG35/reusable-react-table\">Github Repository</a></p>\n\n<p>or CodeSandbox preview<br>\n<iframe src=\"https://codesandbox.io/embed/compassionate-bhaskara-u8n03b\" style=\"width:100%; height:calc(300px + 8vw); border:0; border-radius: 4px; overflow:hidden;\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" loading=\"lazy\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\">\n</iframe>\n</p>\n\n","body_markdown":"## **Introduction**\n\nTables are tools that we often use in our personal and business projects. A table is a structured dataset consisting of rows and columns. It allows us to easily read, filter, and search large-scale data.\n\nI will show you how we can create a reusable table component using Tanstack's react-table and Material UI, and why we should use react-query where big data is used, such as tables.\n\nThe framework I will use is Next.js, but you can follow this article using any react framework of your choice.\n\nFirst, let's start by installing the necessary packages for our project.\n\n```\nnpm install @tanstack/react-table @tanstack/react-query @mui/material @emotion/react @emotion/styled\n\n```\n\nIn terms of being type-safe, I will use _Typescript_, and for my HTTP requests, I will use _Axios_. These two packages are not essential to install.\n\n---\n\n## **Creating the table**\n\nWe will create a table index file in the components folder. This is where we will structure our table. The table accepts two props named data and columns. To separate the data into the correct columns, the objects of the column array must contain a property named _accessorKey_. This key must be the same as the property key of the related data of the objects in the data array.\n\nFor example, if there is email information in our data and this email information is sent with the email property key, this means that the accessorKey of our column will be email. An example of usage is shown in the following steps.\n\nTo map data and columns to the table, we get our mapping functions from the useReactTable hook provided by react-table. We mapped data and column elements between Material UI table components. It's easy to customize the styles of these pre-styled table components for yourself.\n\nThe table component should look like this.\n\n```javascript\n// components/Table/index.tsx\nimport {\n  Paper,\n  Table as MuiTable,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { FC } from \"react\";\n\ninterface TableProps {\n  data: any[];\n  columns: ColumnDef<any>[];\n}\n\nexport const Table: FC<TableProps> = ({ data, columns }) => {\n  const { getHeaderGroups, getRowModel } = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  return (\n    <Paper elevation={2} style={{ padding: \"1rem 0px\" }}>\n      <MuiTable>\n        <TableHead>\n          {getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableCell key={header.id}>\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getVisibleCells().map((cell) => (\n                <TableCell key={cell.id}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </MuiTable>\n    </Paper>\n  );\n};\n```\n\n---\n## Usage\n\nNow let's use the table in the project to test it and then try to improve the table. I will be getting the data from an API provided by [Gorest](https://gorest.co.in). After we got the data, we sent it to the table as a prop. \n\nIt is time to create the column array. As I said above, accessorKey is required, and the header property is what will be on that column's header. Header property is optional, and when you do not provide this property, the value here will take the string value you wrote to the accessorKey. If you want to change what is on the header, you can provide a string or JSX callback.\n\nThe cell is another useful property. We can provide a callback here to give a custom look to our data cells for the column we want. The callback we returned on the cell property is giving us lots of information and functionality with a parameter. By digging around that parameter, you can find lots of details about your table, rows, and columns.\n\n\n```javascript\n//pages/columns.ts\nimport { Chip } from \"@mui/material\";\nimport { ColumnDef } from \"@tanstack/react-table\";\n\nexport const columns: ColumnDef<any, any>[] = [\n  {\n    accessorKey: \"name\",\n    header: \"Name\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"gender\",\n    header: \"Gender\",\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: (row: any) => {\n      return (\n        <Chip\n          label={row.getValue()}\n          size=\"small\"\n          color={row.getValue() === \"active\" ? \"primary\" : \"default\"}\n        />\n      );\n    },\n  },\n];\n```\n\nNow let's give the column array to the table as a prop and see the final version of the table usage.\n\n```javascript\n//pages/index.tsx\nimport { useEffect, useState } from \"react\";\nimport type { NextPage } from \"next\";\nimport axios from \"axios\";\nimport { Box } from \"@mui/material\";\nimport Table from \"../components/Table\";\nimport { columns } from \"./columns\";\n\nconst Home: NextPage = () => {\n  const [users, setUsers] = useState<Api.Users.Data[] | undefined>(undefined);\n\n  const fetchUsers = async () => {\n    const { data } = await axios.get<Api.Users.FetchUsersResponse>(\n      \"/api/users\"\n    );\n\n    setUsers(data.data);\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <Box padding={6}>{users && <Table data={users} columns={columns} />}</Box>\n  );\n};\n```\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rfxecl779qcw40fpuv.png\">\n  <figcaption>Table</figcaption>\n</figure>\n\n---\n## Improving the table\n\nTo improve the table, we are going to add;\n- Pagination\n- Search field\n- Skeleton loading\n- Click row action\n- Custom header component\n- Memoization\n- React query for HTTP requests\n\n### Pagination\n\nThis is the server-side pagination implementation. The table will now take two new props named `page` and `pageCount`.\n\nIf we have information about the page count, react-table wants us to give the page count to the useReactTable hook. If we don't have the page count information, we can pass -1. We also need to set the manuelPagination property to true to handle the pagination manually.\n\n```javascript\nconst { getHeaderGroups, getRowModel } = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    manualPagination: true,\n    pageCount,\n  })\n```\n\nThe page prop is for exposing the current page value to the outside of the table as a callback function. Invoke this function on the pagination change function with the current page value. This will come in handy as we want to keep track of the current page value outside of the table.\n\nWe are going to keep the current page value inside the table component as a state.\n\nInstead of using the nextPage or previousPage functions provided to us by useReactTable, Material UI has a pagination component that will do an excellent job of paginating the table. This component handles pagination functions under the hood, so it only needs a few props to work.\n\n> The pagination functions in useReactTable are mostly used for client-side pagination.\n\nThe pagination component takes these three props named; `count`, `page`, and `onChange`. _Count_ is the total number of pages, _page_ is the current page and _onChange_ is a callback that fires when the state changes.\n\n```javascript\nconst handlePageChange = (\n  event: ChangeEvent<unknown>,\n  currentPage: number\n) => {\n  setPaginationPage(currentPage === 0 ? 1 : currentPage);\n  page?.(currentPage === 0 ? 1 : currentPage);\n};\n\n{pageCount && page && (\n  <Pagination\n    count={pageCount}\n    page={paginationPage}\n    onChange={handlePageChange}\n    color=\"primary\"\n  />\n)}\n```\n### Search field\n\nWe will retrieve the table results based on what we type in the search field. On the handleSearchChange function, we invoke the search callback given to the table to return the typed value. Notice that wrapping around the handle function with a debounce function is crucial because we don't want to return every typed value. This can cause problems such as making requests to an API on every typed value.\n\n```javascript\n\nconst handleSearchChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n) => {\n    search && search(e.target.value);\n};\n\n{search && (\n  <TextField\n    onChange={debounce(handleSearchChange, 1000)}\n    size=\"small\"\n    label={searchLabel}\n    margin=\"normal\"\n    variant=\"standard\"\n  />\n)}\n```\n\n### Skeleton loading\n\nThe table will display skeleton loading depending on the isFetching prop. The skeleton count on the table defaults to 10, and it can be overridden by giving the skeletonCount prop. We can think of the skeleton count prop as a row count for the skeletons, but we need the column count as well to render it on the table properly. We can get the number of columns with the getAllColumns function provided by useReactTable. The table includes the option of a skeleton height prop as well.\n\n```javascript\nconst { getHeaderGroups, getRowModel, getAllColumns } = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n  manualPagination: true,\n  pageCount,\n});\n\nconst skeletons = Array.from({ length: skeletonCount }, (x, i) => i);\n\nconst columnCount = getAllColumns().length;\n\n{\n  !isFetching ? (\n    getRowModel().rows.map((row) => (\n      <StyledTableRow key={row.id}>\n        {row.getVisibleCells().map((cell) => (\n          <TableCell key={cell.id}>\n            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n          </TableCell>\n        ))}\n      </StyledTableRow>\n    ))\n  ) : (\n    <>\n      //the mapping part of the skeletons\n      {skeletons.map((skeleton) => (\n        <TableRow key={}>\n          {Array.from({ length: columnCount }, (x, i) => i).map((elm) => (\n            <TableCell key={elm}>\n              <Skeleton height={skeletonHeight} />\n            </TableCell>\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n}\n```\n\n### Click row action\n\nWhen we map the data to the table using the getRowModel function, we can get details about that row or cell. Just pass the onClickRow prop function with row and cell parameters to the onClick property of the cell.\n\n```javascript\ngetRowModel().rows.map((row) => (\n  <StyledTableRow key={row.id}>\n    {row.getVisibleCells().map((cell) => (\n      <TableCell\n        onClick={() => onClickRow?.(cell, row)}\n        key={cell.id}\n      >\n        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n      </TableCell>\n    ))}\n  </StyledTableRow>\n))\n```\n\n### Custom header component\n\nThis is in case of a need for a header component for the table. We can place it above the search field.\n\n```javascript\n<Box paddingX=\"1rem\">\n  {headerComponent && <Box>{headerComponent}</Box>}\n  {search && (\n    <TextField\n      onChange={debounce(handleSearchChange, 1000)}\n      size=\"small\"\n      label={searchLabel}\n      margin=\"normal\"\n      variant=\"standard\"\n    />\n  )}\n</Box>\n```\n\n### Memoization\n\nWe need to apply memoization to prevent possible re-renders or computationally expensive performance losses. \n\nWe are going to wrap the data, column, and headerComponent props into `useMemo` to prevent expensive re-calculation.\n\n```javascript\nconst memoizedData = useMemo(() => data, [data]);\nconst memoizedColumns = useMemo(() => columns, [columns]);\nconst memoisedHeaderComponent = useMemo(\n  () => headerComponent,\n  [headerComponent]\n);\n```\n\nWrapping the table export with `memo` to prevent unnecessary re-renders. This way, the component only re-renders when the props are changed.\n\n```javascript\n//...\n\nconst Table: FC<TableProps> = ({\n  //...\n}) => {\n  //...\n\n  return (\n    //...\n    )\n};\n\nexport default memo(Table);\n```\n\n### React query\n\nReact-query is a fetching tool by Tanstack. React-query will cache the HTTP requests we make. Most of the time, the size of the data we will use in the table is considerably large, so we can prevent the delay in loading the data in the table by caching HTTP requests. You can see that after implementing the react-query, the HTTP requests you make are returned with a 304 code. This shows that the data is being read from the cache, or you can make a more detailed observation by installing @tanstack/react-query-devtools, one of the developer tools for react-query. Note that this tool is only available on the development build of the project. \n\nThe useQuery hook provides the cached data, the status of our request, and the error object for possible errors. The usage is simple; for the first parameter, provide a key or array of keys; for the second parameter, the fetcher function for your data; and for the third parameter, the options object for the react-query, which is optional. Any change to the keys will trigger the fetcher function, so it makes sense that we provide this key value with our current page or search value.\n\nSince I don't want it to refetch every time I switch windows on the browser, I set the options object's refetchOnWindowFocus property to false. Let's set the keepPreviousData property to true for a smooth transition between the pages in the table.\n\n```javascript\nconst [currentPage, setCurrentPage] = useState<number | undefined>(1);\nconst [search, setSearch] = useState<string | undefined>(\"\");\n\nconst { data, isFetching, isError, error, isSuccess } = useQuery<\n    Api.Users.FetchUsersResponse,\n    Error\n  >([\"users\", currentPage, search], fetchUsers, {\n    refetchOnWindowFocus: false,\n    keepPreviousData: true,\n  });\n```\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t1bd70qsrmzlpqhq8ah.png\">\n  <figcaption>Final version of the table</figcaption>\n</figure>\n\nThis was the end of my article. I hope this article helped you to build your reusable table.\n\nIf you want to take a look at the full code, here is the [Github Repository](https://github.com/SerhatG35/reusable-react-table)\n\nor CodeSandbox preview\n{% embed https://codesandbox.io/embed/compassionate-bhaskara-u8n03b?fontsize=14&hidenavigation=1&theme=dark %}","user":{"name":"Serhat Genç","username":"serhatgenc","twitter_username":null,"github_username":"SerhatG35","user_id":565684,"website_url":"https://serhatgenc.live","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--1rYaUPRh--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/565684/485c8879-32ee-4d13-9a29-379706acb4b9.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--n_zTFJD0--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/565684/485c8879-32ee-4d13-9a29-379706acb4b9.jpeg"}}