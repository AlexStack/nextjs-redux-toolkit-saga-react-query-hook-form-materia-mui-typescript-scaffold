{"type_of":"article","id":1245576,"title":"Operador Ternario en lugar de '&&' en ReactJS/NextJS","description":"Ya puedes dejar de usar el operador '&amp;&amp;' en un Conditional Rendering de tus componentes de...","readable_publish_date":"Nov 6","slug":"operador-ternario-en-lugar-de-en-reactnext-165c","path":"/viistorrr/operador-ternario-en-lugar-de-en-reactnext-165c","url":"https://dev.to/viistorrr/operador-ternario-en-lugar-de-en-reactnext-165c","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-06T14:47:46Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1245576.png","canonical_url":"https://dev.to/viistorrr/operador-ternario-en-lugar-de-en-reactnext-165c","created_at":"2022-11-06T14:47:47Z","edited_at":"2022-11-06T20:32:09Z","crossposted_at":null,"published_at":"2022-11-06T14:47:46Z","last_comment_at":"2022-11-06T14:47:46Z","reading_time_minutes":2,"tag_list":"react, nextjs, programming, javascript","tags":["react","nextjs","programming","javascript"],"body_html":"<p>Ya puedes dejar de usar el operador '&amp;&amp;' en un Conditional Rendering de tus componentes de ReactJS/NextJS</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YkdUIyPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9fba4cdhsf915642jt8.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YkdUIyPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9fba4cdhsf915642jt8.png\" alt=\"No more &amp;&amp; operator\" loading=\"lazy\" width=\"680\" height=\"172\"></a></p>\n\n<p>Si has venido trabajando anteriormente con ReactJS, sabes que el renderizado de los componentes depende de dos cosas, del <code>state</code>y las <code>props</code>. As√≠ mismo, existen diferentes formas de hacer un Conditional Rendering, aqu√≠ les voy a mostrar quiz√°s la m√°s utilizada para validar cu√°ndo mostrar un componente o no en la UI, el operador <code>&amp;&amp;</code>, que funciona, pero sin embargo tiene algunos casos en los que podr√≠as tener problemas al momento de hacer el render.</p>\n\n<p>Primero te voy a mostrar c√≥mo funciona el <code>&amp;&amp;</code></p>\n\n<p>Un ejemplo cl√°sico de √©ste se ve as√≠üëáüèæ<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const RandomComponent = ({ condicion }) =&gt; {\n  return (\n    &lt;&gt;\n      {condicion &amp;&amp; &lt;YourConditionalComponent /&gt;}\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>La l√≥gica de √©ste funciona as√≠:</p>\n\n<ul>\n<li><p>Si <code>condicion</code> se cumple, osea <code>true</code> entonces <code>&lt;YourConditionalComponent /&gt;</code> se renderiza</p></li>\n<li><p>Si <code>condicion</code> no se cumple, osea <code>false</code> entonces <code>&lt;YourConditionalComponent /&gt;</code> no se renderiza.</p></li>\n</ul>\n\n<p><strong>¬øPor qu√©?</strong> Esto m√°s que un concepto de React es un comportamiento de Javascript que se llama <em>short-circuit evaluation</em> que consiste en que si el primer operador(condicion) es <em>false</em> entonces el operador <code>&amp;&amp;</code> se detiene y no eval√∫a la segunda condici√≥n, en √©ste caso <code>&lt;YourConditionalComponent /&gt;</code></p>\n\n<p>Ahora, <strong>por qu√© No usar el <code>&amp;&amp;</code></strong></p>\n\n<p>Este operador tiene una sintaxis bastante simple y se utiliza mucho, de hecho funciona, pero el hecho de que algo funcione no quiere decir que debas utilizarlo.</p>\n\n<p>Volviendo al ejemplo de arriba, si <code>condicion</code> tiene un resultado <code>true</code>o <code>false</code>evidentemente vas a tener el comportamiento que esperas seg√∫n sea el caso, muy bien! Sin embargo √©sto funciona s√≥lamente cuando se est√° evaluendo condiciones que entregan un  <code>boolean</code>, quiere decir que cualquier otro caso podr√≠as tener problemas al momento de renderizar.</p>\n\n<p>Por ejemplo: </p>\n\n<ul>\n<li>Si quisieras evalues un valor num√©rico, <code>0</code>, tu componente se va a renderizar sin estar cumpliendo totalmente tu condici√≥n.</li>\n<li>Por otro lado, si tu <code>condicion</code> es <code>undefined</code> vas a tener un error del tipo <code>Uncaught Error: Error...: Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null</code>\n</li>\n</ul>\n\n<p>Dicho √©sto <em><strong>¬øqu√© usar para un Conditional Rendering en tus componentes?</strong></em> </p>\n\n<p>La soluci√≥n es muy sencilla, si quieres evitar tener problemas que se salgan de control en tu UI, puedes usar el operador ternario de Javascript, as√≠üëáüèæ</p>\n\n<p><code>condicion ? &lt;YourConditionalComponent /&gt; : null</code></p>\n\n<p>Con √©ste simple cambio podr√°s tener tu c√≥digo m√°s seguro y evitar que tu UI se rompa en alg√∫n momento del renderizado, recuerda utilizar el Operador Ternario de Javascript en lugar del operador l√≥gico AND, simple pero efectivo.</p>\n\n<p>Nos vemos en la pr√≥xima para m√°s tips de javascript, ReactJS, NextJS, Typescript.</p>\n\n<p>S√≠gueme en mis redes sociales como <a class=\"mentioned-user\" href=\"https://dev.to/viistorrr\">@viistorrr</a><br>\n<a href=\"https://twitter.com/viistorrr\">Twitter</a><br>\n<a href=\"https://www.instagram.com/viistorrr/\">Instagram</a><br>\n<a href=\"https://join.slack.com/t/webdev-path/shared_invite/zt-1dkkhbxc2-Eb_jrPdBF7cM6GxYs48_pQ\">Slack</a></p>\n\n","body_markdown":"Ya puedes dejar de usar el operador '&&' en un Conditional Rendering de tus componentes de ReactJS/NextJS\n\n\n![No more && operator](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9fba4cdhsf915642jt8.png)\n\nSi has venido trabajando anteriormente con ReactJS, sabes que el renderizado de los componentes depende de dos cosas, del `state `y las `props`. As√≠ mismo, existen diferentes formas de hacer un Conditional Rendering, aqu√≠ les voy a mostrar quiz√°s la m√°s utilizada para validar cu√°ndo mostrar un componente o no en la UI, el operador `&&`, que funciona, pero sin embargo tiene algunos casos en los que podr√≠as tener problemas al momento de hacer el render.\n\nPrimero te voy a mostrar c√≥mo funciona el `&&`\n\nUn ejemplo cl√°sico de √©ste se ve as√≠üëáüèæ\n\n```\nconst RandomComponent = ({ condicion }) => {\n  return (\n    <>\n      {condicion && <YourConditionalComponent />}\n    </>\n  );\n}\n```\n\nLa l√≥gica de √©ste funciona as√≠:\n\n- Si `condicion` se cumple, osea `true` entonces `<YourConditionalComponent />` se renderiza\n\n- Si `condicion` no se cumple, osea `false` entonces `<YourConditionalComponent />` no se renderiza.\n\n**¬øPor qu√©?** Esto m√°s que un concepto de React es un comportamiento de Javascript que se llama _short-circuit evaluation_ que consiste en que si el primer operador(condicion) es _false_ entonces el operador `&&` se detiene y no eval√∫a la segunda condici√≥n, en √©ste caso `<YourConditionalComponent />`\n\nAhora, **por qu√© No usar el `&&`**\n\nEste operador tiene una sintaxis bastante simple y se utiliza mucho, de hecho funciona, pero el hecho de que algo funcione no quiere decir que debas utilizarlo.\n\nVolviendo al ejemplo de arriba, si `condicion` tiene un resultado `true`o `false`evidentemente vas a tener el comportamiento que esperas seg√∫n sea el caso, muy bien! Sin embargo √©sto funciona s√≥lamente cuando se est√° evaluendo condiciones que entregan un  `boolean`, quiere decir que cualquier otro caso podr√≠as tener problemas al momento de renderizar.\n\nPor ejemplo: \n\n- Si quisieras evalues un valor num√©rico, `0`, tu componente se va a renderizar sin estar cumpliendo totalmente tu condici√≥n.\n- Por otro lado, si tu `condicion` es `undefined` vas a tener un error del tipo `Uncaught Error: Error...: Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null`\n\nDicho √©sto _**¬øqu√© usar para un Conditional Rendering en tus componentes?**_ \n\nLa soluci√≥n es muy sencilla, si quieres evitar tener problemas que se salgan de control en tu UI, puedes usar el operador ternario de Javascript, as√≠üëáüèæ\n\n`condicion ? <YourConditionalComponent /> : null`\n\nCon √©ste simple cambio podr√°s tener tu c√≥digo m√°s seguro y evitar que tu UI se rompa en alg√∫n momento del renderizado, recuerda utilizar el Operador Ternario de Javascript en lugar del operador l√≥gico AND, simple pero efectivo.\n\nNos vemos en la pr√≥xima para m√°s tips de javascript, ReactJS, NextJS, Typescript.\n\nS√≠gueme en mis redes sociales como @viistorrr\n[Twitter](https://twitter.com/viistorrr)\n[Instagram](https://www.instagram.com/viistorrr/)\n[Slack](https://join.slack.com/t/webdev-path/shared_invite/zt-1dkkhbxc2-Eb_jrPdBF7cM6GxYs48_pQ)","user":{"name":"viistorrr","username":"viistorrr","twitter_username":"viistorrr","github_username":"Viistorrr","user_id":953360,"website_url":"https://www.viistorrr.com/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--wp98lfSz--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/953360/db29b864-89d6-4320-8b78-dfb7f1bd2f22.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--TtVFtiLa--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/953360/db29b864-89d6-4320-8b78-dfb7f1bd2f22.jpeg"}}