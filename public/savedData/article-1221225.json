{"type_of":"article","id":1221225,"title":"Hexagonal architecture as a solution to the obsolescence of UI frameworks","description":"Since the arrival of frontend frameworks and the advent of SPA (Single Page Application) type...","readable_publish_date":"Nov 7","slug":"hexagonal-architecture-as-a-solution-to-the-obsolescence-of-ui-frameworks-ej2","path":"/drouianm/hexagonal-architecture-as-a-solution-to-the-obsolescence-of-ui-frameworks-ej2","url":"https://dev.to/drouianm/hexagonal-architecture-as-a-solution-to-the-obsolescence-of-ui-frameworks-ej2","comments_count":2,"public_reactions_count":6,"collection_id":null,"published_timestamp":"2022-11-07T13:18:41Z","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ANlBd-wv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shnluovzh7oahy2x56n4.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vUyowgdW--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shnluovzh7oahy2x56n4.jpg","canonical_url":"https://dev.to/drouianm/hexagonal-architecture-as-a-solution-to-the-obsolescence-of-ui-frameworks-ej2","created_at":"2022-10-16T12:24:55Z","edited_at":"2022-11-07T16:36:45Z","crossposted_at":null,"published_at":"2022-11-07T13:18:41Z","last_comment_at":"2022-11-07T19:06:52Z","reading_time_minutes":20,"tag_list":"vue, react, hexagonalarchitecture, typescript","tags":["vue","react","hexagonalarchitecture","typescript"],"body_html":"<p>Since the arrival of frontend frameworks and the advent of SPA (Single Page Application) type applications, the volatility of the frontend ecosystem and the adherence to frameworks make it difficult to produce robust and durable applications today.</p>\n\n<p>The objective of this article is to show how the application of hexagonal architecture on the frontend can address this issue.</p>\n\n<h2>\n  <a name=\"presentation\" href=\"#presentation\">\n  </a>\n  Presentation\n</h2>\n\n<h3>\n  <a name=\"matthieu\" href=\"#matthieu\">\n  </a>\n  Matthieu\n</h3>\n\n<p>Software architect and backend developer, I mostly develop in Java, JS and Go. Right now, I am starting to dabble in Rust.</p>\n\n<p>I love everything about CI/CD (Gitlab ü¶ä ‚ù§Ô∏è), imagining and creating robust, high-performance, and resource-efficient applications.</p>\n\n<p>I share my insights and discoveries through <a href=\"https://blog.ziggornif.xyz/\">blog posts</a>.</p>\n\n<p>When I'm not in my office tinkering with my 3D printer, you can find me on the water üõ∂ !</p>\n\n<p><a href=\"https://twitter.com/Ziggornif\">Twitter</a><br>\n<a href=\"https://github.com/drouian-m\">GitHub</a><br>\n<a href=\"https://www.linkedin.com/in/matthieudrouian/\">Linkedin</a></p>\n<h3>\n  <a name=\"sebasti%C3%A1n\" href=\"#sebasti%C3%A1n\">\n  </a>\n  Sebasti√°n\n</h3>\n\n<p>Software architect and backend developer.</p>\n\n<p>Former C# developer, until I got seduced by open source and NodeJS. I love Rust (but I am not yet sure that it's mutual üòÖ).</p>\n\n<p>Linux ‚ù§Ô∏è is my co-pilot. Like Matthew, I am a CI/CD enthusiast (Gitlab ü¶ä gang), I like to optimize/automate anything that is optimizable/automatable.</p>\n\n<p>I do more monitoring than I should, or maybe it's just that the day isn't long enough.</p>\n\n<p>If you speak \"un poquito de espa√±ol\", feel free to talk to me in the language of Cervantes üôÇ</p>\n\n<p><a href=\"https://github.com/sebaplaza\">GitHub</a><br>\n<a href=\"https://www.linkedin.com/in/sebasti%C3%A1n-plaza-s%C3%A1nchez-b6964818/\">Linkedin</a></p>\n<h2>\n  <a name=\"acknowledgements\" href=\"#acknowledgements\">\n  </a>\n  Acknowledgements\n</h2>\n\n<p>We want to thank <a href=\"https://www.linkedin.com/in/simonduhem/\">Simon Duhem</a> for his help on the styling part and the web components.</p>\n\n<p>Thanks also to <a href=\"https://twitter.com/JulienTopcu\">Julien Top√ßu</a> who advised us on the hexagonal architecture part and who answered our questions all along the project.</p>\n<h2>\n  <a name=\"observations\" href=\"#observations\">\n  </a>\n  Observations\n</h2>\n\n<p>Today most frontend applications are produced using frameworks.</p>\n\n<p>The three main frameworks on the market are React, VueJS and Angular.</p>\n\n<p>UI frameworks allow for faster application development. They natively manage the reactivity as well as the compatibility of applications with different browsers.</p>\n<h2>\n  <a name=\"issues\" href=\"#issues\">\n  </a>\n  Issues\n</h2>\n\n<p>All the code dedicated to frontend business logic will generally also be linked to the functioning of the framework.</p>\n\n<p>When a framework becomes deprecated, the whole application must be rewritten in a new framework.</p>\n<h2>\n  <a name=\"focus-on-angularjs\" href=\"#focus-on-angularjs\">\n  </a>\n  Focus on AngularJS\n</h2>\n\n<p>2009: Google releases the first version of AngularJS.</p>\n\n<p>The framework is going to become very popular, and many developers are going to build their SPA using this framework.</p>\n\n<p>2018 : The team announces the end of the development of the framework and an end of maintenance on December 31, 2021 (<a href=\"https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c\">https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c</a>).</p>\n\n<p>Following this announcement, the teams in charge of maintaining angularjs apps were faced with a choice of how to maintain their apps:</p>\n\n<ul>\n<li>Migrate from AngularJS to Angular?</li>\n<li>Rewrite the application to use another framework?</li>\n<li>Keep their legacy code and cross their fingers that no one finds a flaw?</li>\n</ul>\n\n<p>The chosen solution will most likely involve a more or less complex rewriting of the code, including the front-end business logic of the application.</p>\n<h2>\n  <a name=\"how-to-avoid-it\" href=\"#how-to-avoid-it\">\n  </a>\n  How to avoid it?\n</h2>\n\n<p>To avoid falling into this kind of trap, you need to try to decouple the frontend business logic from the UI / Framework part.</p>\n\n<p>The idea is simple: build an application where on one side the framework is only in charge of html rendering and the reactivity of the components and on the other side the frontend business logic is isolated in agnostic code.</p>\n\n<p>Advantages :</p>\n\n<ul>\n<li>The code associated with the framework is isolated</li>\n<li>Our business code becomes sustainable because it is agnostic</li>\n</ul>\n\n<p>On paper the idea seems simple, but how to implement this division?</p>\n<h2>\n  <a name=\"hexagonal-architecture-for-the-front-end\" href=\"#hexagonal-architecture-for-the-front-end\">\n  </a>\n  Hexagonal architecture for the front end\n</h2>\n\n<p>Hexagonal architecture is an architecture pattern created by <a href=\"https://twitter.com/TotherAlistair\">Alistair Cockburn</a> that places the business layer at the centre of the application (the hexagon) while ensuring a loose coupling with the technical blocks.</p>\n\n<p>Basic concepts:</p>\n\n<ul>\n<li>The business domain is agnostic and has no dependencies.</li>\n<li>The tightness of the business domain is guaranteed by the port system.</li>\n<li>The layers (adapters) gravitating around the hexagon must respect the interfaces defined in the ports to communicate with the domain.</li>\n</ul>\n\n<p>To go deeper into hexagonal architecture, see the resources in the <a href=\"//./#links\">links</a> section.</p>\n\n<p>Here is an example of frontend application breakdown using the hexagonal architecture:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHKeayDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5j35sd8x3r95d2xmwap.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHKeayDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5j35sd8x3r95d2xmwap.png\" alt=\"architecture schema\" loading=\"lazy\" width=\"880\" height=\"273\"></a></p>\n<h2>\n  <a name=\"starting-project\" href=\"#starting-project\">\n  </a>\n  Starting project\n</h2>\n\n<p>The different steps to follow will be based on the migration of a legacy AngularJS app to a hexagonal model.</p>\n\n<p><a href=\"https://gitlab.com/thekitchen/frontend-legacy-app\">https://gitlab.com/thekitchen/frontend-legacy-app</a></p>\n\n<p>This application is a simplified Twitter server that contains the following features:</p>\n\n<ul>\n<li>authentication</li>\n<li>account creation</li>\n<li>creation of tweets</li>\n<li>display of tweets</li>\n<li>likes</li>\n</ul>\n\n<p>It has been built in AngularJS to be an application built with a deprecated framework.</p>\n<h2>\n  <a name=\"goal\" href=\"#goal\">\n  </a>\n  Goal\n</h2>\n\n<p>The goal of the article is to show step by step how to start from a legacy project and get to a hexagonal architecture that will allow us to easily change the framework of our application.</p>\n\n<p>It will not be a magic recipe applicable to all applications but rather the steps of the migration process that we have undertaken during our research.</p>\n<h2>\n  <a name=\"organization-of-the-new-project\" href=\"#organization-of-the-new-project\">\n  </a>\n  Organization of the new project\n</h2>\n\n<p>A project of this type needs some technical prerequisites to allow a trouble free development, in addition to providing a <strong>strict isolation</strong> of the technical blocks associated with the domain.</p>\n\n<p>To focus purely on the code, and not on the tooling, we feel that the use of a <strong>monorepo</strong> is a <strong>must</strong>.</p>\n\n<p>Obviously, the choice of a package management tool is secondary. On our side we have chosen <a href=\"https://pnpm.io/\">pnpm</a> + <a href=\"https://turborepo.org/\">turborepo</a> (if the need arises).</p>\n\n<p>The hierarchy of the monorepo will be as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">.</span>\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ pnpm-lock.yaml\n‚îú‚îÄ‚îÄ pnpm-workspace.yaml\n‚îú‚îÄ‚îÄ apps\n‚îÇ   ‚îú‚îÄ‚îÄ angular-app\n‚îÇ   ‚îú‚îÄ‚îÄ angularjs-app\n‚îÇ   ‚îú‚îÄ‚îÄ backend-api\n‚îÇ   ‚îú‚îÄ‚îÄ react-app\n‚îÇ   ‚îî‚îÄ‚îÄ vue-app\n‚îú‚îÄ‚îÄ configs\n‚îÇ   ‚îú‚îÄ‚îÄ eslint-config-hexademo\n‚îÇ   ‚îî‚îÄ‚îÄ tsconfig\n‚îú‚îÄ‚îÄ e2e\n‚îÇ   ‚îú‚îÄ‚îÄ package.json\n‚îÇ   ‚îî‚îÄ‚îÄ tests\n‚îú‚îÄ‚îÄ packages\n‚îÇ   ‚îú‚îÄ‚îÄ adapters\n‚îÇ   ‚îú‚îÄ‚îÄ domain\n‚îÇ   ‚îú‚îÄ‚îÄ loader\n‚îÇ   ‚îú‚îÄ‚îÄ style\n‚îÇ   ‚îî‚îÄ‚îÄ web-components\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The purpose and implementation of each file will be explained as the article progresses.</p>\n\n<h2>\n  <a name=\"identify-your-business-requirements\" href=\"#identify-your-business-requirements\">\n  </a>\n  Identify your business requirements\n</h2>\n\n<p>The business requirements of our application is composed of two parts:</p>\n\n<ul>\n<li>Account management</li>\n<li>Tweet management</li>\n</ul>\n\n<p>For the account part, the application enables:</p>\n\n<ul>\n<li>Account creation</li>\n<li>User authentication</li>\n<li>Logging out</li>\n<li>Knowing if the user is authenticated</li>\n<li>Getting the jwt of the authenticated user</li>\n<li>Getting the name of the authenticated user</li>\n</ul>\n\n<p>For the tweets part, the application enables:</p>\n\n<ul>\n<li>Creation of tweets</li>\n<li>Retrieving tweets</li>\n<li>Liking tweets</li>\n</ul>\n\n<h2>\n  <a name=\"domain-api-interfaces-creation\" href=\"#domain-api-interfaces-creation\">\n  </a>\n  Domain - API interfaces creation\n</h2>\n\n<p>Once our business requirements have been identified, we can now write our domain interfaces.</p>\n\n<p>The API layer contains all the interfaces allowing communication with the business layer.</p>\n\n<p>This layer is defined by the domain to guarantee its integrity.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3ih4g9qV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a425bwve2oh4i1hmjnqd.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3ih4g9qV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a425bwve2oh4i1hmjnqd.jpg\" alt=\"api interface schema\" loading=\"lazy\" width=\"654\" height=\"251\"></a></p>\n\n<h3>\n  <a name=\"account-api\" href=\"#account-api\">\n  </a>\n  Account API\n</h3>\n\n<p>Here is the API created from the account business logic layer described above</p>\n\n<p><strong>ports/api/account.ts</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">IAccountAPI</span> <span class=\"p\">{</span>\n    <span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">isAuthenticated</span><span class=\"p\">():</span> <span class=\"nx\">boolean</span><span class=\"p\">;</span>\n    <span class=\"nx\">logout</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Registration</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">getToken</span><span class=\"p\">():</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nx\">getUsername</span><span class=\"p\">():</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">IAccountAPI</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"tweet-api\" href=\"#tweet-api\">\n  </a>\n  Tweet API\n</h3>\n\n<p>And here is the API created from the business logic layer for tweets</p>\n\n<p><strong>ports/api/twitter.ts</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">{</span>\n    <span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">like</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">listTweets</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"domain-spi-interfaces-creation\" href=\"#domain-spi-interfaces-creation\">\n  </a>\n  Domain - SPI interfaces creation\n</h2>\n\n<p>The SPI (Service Provider Interface) layer contains all the interfaces required and provided by the domain to interact with the data.</p>\n\n<p>It is here that we will define the interfaces allowing the domain to retrieve / create tweets, authenticate etc...</p>\n\n<p>These interfaces will then be implemented by the adapter layer.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aq4pd0rB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xn0ywm6uonlsxk27hxa.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aq4pd0rB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xn0ywm6uonlsxk27hxa.jpg\" alt=\"spi interface schema\" loading=\"lazy\" width=\"680\" height=\"249\"></a></p>\n\n<p><strong>ports/spi/iauthentication-adapter.ts</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">auth</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>ports/spi/itweet-adapter.ts</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">listTweets</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">createTweet</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"nx\">likeTweet</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"domain-writing-the-business-logic\" href=\"#domain-writing-the-business-logic\">\n  </a>\n  Domain - Writing the business logic\n</h2>\n\n<p>Now that our API and SPI are coded, we can move on to writing the business logic.</p>\n\n<h3>\n  <a name=\"account-logic\" href=\"#account-logic\">\n  </a>\n  Account logic\n</h3>\n\n<p>For the account part, we have the following business rules to apply:</p>\n\n<blockquote>\n<p>It is not possible to create an account without a user/password</p>\n\n<p>It is not possible to authenticate with an empty password</p>\n\n<p>The token must be persisted during authentication</p>\n</blockquote>\n\n<p><details>\n  <summary>account.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IAccountAPI</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/api</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Registration</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./types/registration</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/spi/iauthentication-adapter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ISessionAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/spi/isession-adapter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Account</span> <span class=\"k\">implements</span> <span class=\"nx\">IAccountAPI</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"nx\">authAdapter</span><span class=\"p\">:</span> <span class=\"nx\">IAuthenticationAdapter</span><span class=\"p\">;</span>\n\n    <span class=\"k\">private</span> <span class=\"nx\">sessionAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ISessionAdapter</span><span class=\"p\">;</span>\n\n    <span class=\"k\">private</span> <span class=\"nx\">defaultSessionDuration</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">authAdapter</span><span class=\"p\">:</span> <span class=\"nx\">IAuthenticationAdapter</span><span class=\"p\">,</span>\n        <span class=\"nx\">sessionAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ISessionAdapter</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">authAdapter</span> <span class=\"o\">=</span> <span class=\"nx\">authAdapter</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sessionAdapter</span> <span class=\"o\">=</span> <span class=\"nx\">sessionAdapter</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">defaultSessionDuration</span> <span class=\"o\">=</span> <span class=\"mi\">120</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">authenticate</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkThatUserIsFilled</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkThatPasswordIsFilled</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">authAdapter</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">);</span>\n\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sessionAdapter</span><span class=\"p\">.</span><span class=\"nx\">storeValue</span><span class=\"p\">(</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">auth-token</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"nx\">token</span><span class=\"p\">,</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">defaultSessionDuration</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"k\">return</span> <span class=\"nx\">token</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">Something went wrong during the authentication. Check your username and password.</span><span class=\"dl\">\"</span>\n            <span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Registration</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkThatUserIsFilled</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checkThatPasswordIsFilled</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">authAdapter</span><span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"nx\">username</span><span class=\"p\">,</span>\n                <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">CREATED</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">};</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"nx\">username</span><span class=\"p\">,</span>\n                <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ERROR</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">};</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">logout</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sessionAdapter</span><span class=\"p\">.</span><span class=\"nx\">flush</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getToken</span><span class=\"p\">():</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sessionAdapter</span><span class=\"p\">.</span><span class=\"nx\">getValue</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">auth-token</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">token</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Token not found</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">token</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getUsername</span><span class=\"p\">():</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getToken</span><span class=\"p\">();</span>\n        <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">user</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">atob</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">:</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Invalid token format</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">isAuthenticated</span><span class=\"p\">():</span> <span class=\"nx\">boolean</span> <span class=\"p\">{</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getToken</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">checkThatUserIsFilled</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">username</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Username could not be empty</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">checkThatPasswordIsFilled</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">password</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Password could not be empty</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Account</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<h3>\n  <a name=\"tweets-logic\" href=\"#tweets-logic\">\n  </a>\n  Tweets logic\n</h3>\n\n<p>For tweets, we have the following business rules to apply when creating a tweet:</p>\n\n<blockquote>\n<p>It is not possible to create an empty tweet</p>\n\n<p>It is not possible to create a tweet without an author</p>\n\n<p>A tweet must not be longer than 144 characters</p>\n</blockquote>\n\n<p>To start with, we will create a <code>Tweet</code> type with the attributes required by our front-end domain.</p>\n\n<blockquote>\n<p>‚ö†Ô∏è This type does not have to match the format returned by our backend.<br>\nIt is the representation of the business entity from our frontend.</p>\n</blockquote>\n\n<p><details>\n  <summary>types/tweet.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">type</span> <span class=\"nx\">Tweet</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nl\">author</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nl\">likes</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n    <span class=\"nl\">createdAt</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Tweet</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<p>We can then move on to our business rules:</p>\n\n<p><details>\n  <summary>twitter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Tweet</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./types/tweet</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/spi/itweet-adapter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">,</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/api</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ITweetDispatcher</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./ports/spi/itweet-dispatcher</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Twitter</span> <span class=\"k\">implements</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">{</span>\n    <span class=\"nl\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">tweetDispatcher</span><span class=\"p\">:</span> <span class=\"nx\">ITweetDispatcher</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">,</span>\n        <span class=\"nx\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">,</span>\n        <span class=\"nx\">tweetDispatcher</span><span class=\"p\">:</span> <span class=\"nx\">ITweetDispatcher</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">accountAPI</span> <span class=\"o\">=</span> <span class=\"nx\">accountAPI</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span> <span class=\"o\">=</span> <span class=\"nx\">tweetAdapter</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetDispatcher</span> <span class=\"o\">=</span> <span class=\"nx\">tweetDispatcher</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">listTweets</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">tweets</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span><span class=\"p\">.</span><span class=\"nx\">listTweets</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"nx\">tweets</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkThatMessageIsFilled</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkTweetLength</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">author</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">accountAPI</span><span class=\"p\">.</span><span class=\"nx\">getUsername</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkThatAutorIsFilled</span><span class=\"p\">(</span><span class=\"nx\">author</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span><span class=\"p\">.</span><span class=\"nx\">createTweet</span><span class=\"p\">({</span> <span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">author</span> <span class=\"p\">});</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetDispatcher</span><span class=\"p\">.</span><span class=\"nx\">emitTweetCreated</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">tweet</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">like</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span><span class=\"p\">.</span><span class=\"nx\">likeTweet</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">checkThatMessageIsFilled</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Message could not be empty</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">checkThatAutorIsFilled</span><span class=\"p\">(</span><span class=\"nx\">author</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">author</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Author could not be empty</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"err\">#</span><span class=\"nx\">checkTweetLength</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">144</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Message length must be lower than 144 characters</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Twitter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<h2>\n  <a name=\"domain-setting-up-the-stubs\" href=\"#domain-setting-up-the-stubs\">\n  </a>\n  Domain - setting up the stubs\n</h2>\n\n<p>To test the business code of our domain without needing to deploy the associated backend, we will set up adapter stubs that we will inject in place of the real adapters.</p>\n\n<p>A stub is a technique used to isolate a portion of code in order to make it autonomous. In our case the stubs will be in-memory implementations which will return dummy data.</p>\n\n<p>Some important points to know in our case:</p>\n\n<ul>\n<li>the stubs must implement the SPI interfaces and thus respect the method signatures</li>\n<li>to guarantee the integrity of the domain, the stubs are created in the domain</li>\n<li>a good stub must return the necessary data sets to test all the business cases</li>\n</ul>\n\n<p>In our project, we have placed the stubs in a <code>stubs</code> directory next to the SPI interfaces.</p>\n\n<p><a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src/ports/spi/stubs\">https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src/ports/spi/stubs</a></p>\n\n<p><details>\n  <summary>ports/spi/stubs/authentication-inmem-adapter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../iauthentication-adapter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">AuthenticationInMemAdapter</span> <span class=\"k\">implements</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">users</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"na\">username</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">unicorn</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">rainbow</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">auth</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">found</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">username</span> <span class=\"o\">===</span> <span class=\"nx\">username</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">found</span> <span class=\"o\">||</span> <span class=\"nx\">found</span><span class=\"p\">.</span><span class=\"nx\">password</span> <span class=\"o\">!==</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Bad credentials</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">btoa</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">username</span><span class=\"p\">}</span><span class=\"s2\">:</span><span class=\"p\">${</span><span class=\"nx\">password</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">found</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">username</span> <span class=\"o\">===</span> <span class=\"nx\">username</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">User already exists</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n            <span class=\"nx\">username</span><span class=\"p\">,</span>\n            <span class=\"nx\">password</span><span class=\"p\">,</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationInMemAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<p><details>\n  <summary>ports/spi/stubs/tweet-inmem-adapter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">nanoid</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">nanoid</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Tweet</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../../../types/tweet</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">../itweet-adapter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">TweetInMemAdapter</span> <span class=\"k\">implements</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nl\">tweets</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">[];</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweets</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">listTweets</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweets</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">createTweet</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"na\">tweetToCreate</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">nanoid</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n            <span class=\"na\">createdAt</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nx\">Intl</span><span class=\"p\">.</span><span class=\"nx\">DateTimeFormat</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">fr-FR</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"na\">weekday</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">short</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">year</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">numeric</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">month</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">short</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">day</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">numeric</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">hour</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">minute</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">second</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">}).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()),</span>\n            <span class=\"na\">likes</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"p\">...</span><span class=\"nx\">tweet</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweets</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">tweetToCreate</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">tweetToCreate</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">likeTweet</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweets</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">((</span><span class=\"nx\">t</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"nx\">tweetId</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">tweet</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s2\">`Tweet </span><span class=\"p\">${</span><span class=\"nx\">tweetId</span><span class=\"p\">}</span><span class=\"s2\"> not found`</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">likes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">likes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">likes</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">tweet</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">TweetInMemAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<h2>\n  <a name=\"test-your-business-logic-domain\" href=\"#test-your-business-logic-domain\">\n  </a>\n  Test your business logic domain\n</h2>\n\n<p>Now that we have stubs, we can easily test our business domain.</p>\n\n<p>Unlike normal front-end testing, thanks to the hexagonal division we will be able to test the business rules of our domain rather than mounting UI components to test their behavior.</p>\n\n<blockquote>\n<p><strong>‚ö†Ô∏è : we don't mean to say that component tests are useless but rather that this division allows us to perform new types of tests on our front-end application.</strong><br>\n<strong>Since our business is decoupled from the framework, we can easily test our business rules directly.</strong></p>\n</blockquote>\n\n<p><strong>Business tests examples:</strong></p>\n\n<p>Twitter class instantiation with stub adapters:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">twitter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Twitter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">TweetInMemAdapter</span><span class=\"p\">());</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Test of the rule on the number of characters:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">should throw error if new tweet message is longer than 144 chars</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">twitter</span><span class=\"p\">.</span><span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"mi\">160</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">x</span><span class=\"dl\">\"</span><span class=\"p\">))).</span><span class=\"nx\">rejects</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">(</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">Message length must be lower than 144 characters</span><span class=\"dl\">\"</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Test of ‚Äúlike‚Äù of a tweet:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">should like a tweet</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">twitter</span><span class=\"p\">.</span><span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hi !</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">).</span><span class=\"nx\">toHaveProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">id</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">).</span><span class=\"nx\">toHaveProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">likes</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">updated</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">twitter</span><span class=\"p\">.</span><span class=\"nx\">like</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"k\">as</span> <span class=\"kr\">string</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">updated</span><span class=\"p\">).</span><span class=\"nx\">toHaveProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">likes</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can find all the application's test files next to the source code files <code>*.spec.ts</code> : <a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src\">https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src</a></p>\n\n<h2>\n  <a name=\"writing-adapters\" href=\"#writing-adapters\">\n  </a>\n  Writing adapters\n</h2>\n\n<p>Now that our business code is written and tested, we can proceed to the implementation of the adapter layer.</p>\n\n<p>The adapter layer of our hexagon is where the SPI type interfaces are implemented.</p>\n\n<p>This layer will be responsible for interacting with the data, usually through API calls (REST, GraphQL, etc...) for frontend applications.</p>\n\n<p>In our case, the adapter layer will be responsible for calls to our backend which exposes a REST API.</p>\n\n<p>As for the business logic, we split it into two adapters. One responsible for calling the accounts API, the other for calling the tweets API.</p>\n\n<p>As seen above in the SPI section, these adapters must implement the interfaces defined in the domain SPI layer.</p>\n\n<p>Here are our adapters used to communicate with our REST API:</p>\n\n<p><details>\n  <summary>authentication-rest-adapter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/domain</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">AuthenticationRestAdapter</span> <span class=\"k\">implements</span> <span class=\"nx\">IAuthenticationAdapter</span> <span class=\"p\">{</span>\n    <span class=\"k\">async</span> <span class=\"nx\">auth</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:8080/signin</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"na\">Accept</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text/plain</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n                <span class=\"nx\">username</span><span class=\"p\">,</span>\n                <span class=\"nx\">password</span><span class=\"p\">,</span>\n            <span class=\"p\">}),</span>\n        <span class=\"p\">});</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"nx\">token</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"nx\">username</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:8080/signup</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"na\">Accept</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n                <span class=\"nx\">username</span><span class=\"p\">,</span>\n                <span class=\"nx\">password</span><span class=\"p\">,</span>\n            <span class=\"p\">}),</span>\n        <span class=\"p\">});</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!==</span> <span class=\"mi\">201</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Registration error</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationRestAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<p><details>\n  <summary>tweet-rest-adapter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Tweet</span><span class=\"p\">,</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/domain</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Generate output date\n *\n * @param {Date} date input date\n * @returns {string} output\n */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">formatDate</span><span class=\"p\">(</span><span class=\"nx\">date</span><span class=\"p\">:</span> <span class=\"nb\">Date</span><span class=\"p\">):</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Intl</span><span class=\"p\">.</span><span class=\"nx\">DateTimeFormat</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">fr-FR</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">weekday</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">short</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">year</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">numeric</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">month</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">short</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">day</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">numeric</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">hour</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">minute</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">second</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2-digit</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">date</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">class</span> <span class=\"nx\">TweetRestAdapter</span> <span class=\"k\">implements</span> <span class=\"nx\">ITweetAdapter</span> <span class=\"p\">{</span>\n    <span class=\"k\">async</span> <span class=\"nx\">listTweets</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:8080/tweets</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">jsonResp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n        <span class=\"kd\">const</span> <span class=\"na\">tweets</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"k\">of</span> <span class=\"nx\">jsonResp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">tweets</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n                <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n                <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">,</span>\n                <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">,</span>\n                <span class=\"na\">createdAt</span><span class=\"p\">:</span> <span class=\"nx\">formatDate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">created_at</span><span class=\"p\">)),</span>\n                <span class=\"na\">likes</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">likes</span><span class=\"p\">,</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">tweets</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">createTweet</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:8080/tweets</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"na\">Accept</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n                <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">,</span>\n                <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">,</span>\n            <span class=\"p\">}),</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">jsonResp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n            <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">,</span>\n            <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">,</span>\n            <span class=\"na\">createdAt</span><span class=\"p\">:</span> <span class=\"nx\">formatDate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">created_at</span><span class=\"p\">)),</span>\n            <span class=\"na\">likes</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">likes</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">likeTweet</span><span class=\"p\">(</span><span class=\"nx\">tweetId</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span>\n            <span class=\"s2\">`http://localhost:8080/tweets/</span><span class=\"p\">${</span><span class=\"nx\">tweetId</span><span class=\"p\">}</span><span class=\"s2\">/like-tweet`</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"na\">Accept</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                    <span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">jsonResp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n            <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">,</span>\n            <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">author</span><span class=\"p\">,</span>\n            <span class=\"na\">createdAt</span><span class=\"p\">:</span> <span class=\"nx\">formatDate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">created_at</span><span class=\"p\">)),</span>\n            <span class=\"na\">likes</span><span class=\"p\">:</span> <span class=\"nx\">jsonResp</span><span class=\"p\">.</span><span class=\"nx\">likes</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">TweetRestAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<p>The advantage of this technique is that it guarantees the scalability of the communication layer with our backend.</p>\n\n<p>If in the future we want to use a GraphQL API or even another external API to retrieve the data. We'll just have to create a new adapter for the new requirement.</p>\n\n<p>The key is that it is the domain that determines the interface contract (inputs and outputs) and that the adapter layer respects this contract.</p>\n\n<h2>\n  <a name=\"hexagon-loading\" href=\"#hexagon-loading\">\n  </a>\n  Hexagon loading\n</h2>\n\n<p>To instantiate the hexagon, we need to connect the adapters to the <code>SPI</code> ports of the domain.</p>\n\n<p>From a technical point of view, we need to inject the dependencies (adapters) via the existing constructors in our domain layer.</p>\n\n<p>To facilitate this orchestration, we have chosen to create a utility package called <code>@hexademo/loader</code>. This package takes care of instantiating classes in the right order.</p>\n\n<p>Here is the code of our loader:</p>\n\n<p><details>\n  <summary>packages/loader/index.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span>\n    <span class=\"nx\">AuthenticationInMemAdapter</span><span class=\"p\">,</span>\n    <span class=\"nx\">SessionCookieAdapter</span><span class=\"p\">,</span>\n    <span class=\"nx\">TweetIndexedDbAdapter</span><span class=\"p\">,</span>\n    <span class=\"nx\">TweetEventsDispatcher</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/adapters</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Account</span><span class=\"p\">,</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">,</span> <span class=\"nx\">Twitter</span><span class=\"p\">,</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/domain</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">namespace</span> <span class=\"nx\">AppLoader</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">sessionAdapter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">SessionCookieAdapter</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">authenticationAdater</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AuthenticationInMemAdapter</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// nous avons le choix, en fonction de nos besoins</span>\n    <span class=\"c1\">// nous pouvons choisir le IndexedDBAdapter, InMemAdapter ou bien RestAdapter</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">tweetAdapter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TweetIndexedDbAdapter</span><span class=\"p\">();</span>\n    <span class=\"c1\">// const tweetAdapter = new TweetInMemAdapter();</span>\n    <span class=\"c1\">// const tweetAdapter = new TweetRestAdapter();</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">accountServiceAPI</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Account</span><span class=\"p\">(</span><span class=\"nx\">authenticationAdater</span><span class=\"p\">,</span> <span class=\"nx\">sessionAdapter</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">twitterServiceAPI</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Twitter</span><span class=\"p\">(</span><span class=\"nx\">accountServiceAPI</span><span class=\"p\">,</span> <span class=\"nx\">tweetAdapter</span><span class=\"p\">,</span> <span class=\"nx\">tweetEventsDispatcher</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Les instances API sont expos√©es, pour une utilisation dans un framework front</span>\n    <span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getTwitterInstance</span><span class=\"p\">():</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">twitterServiceAPI</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<blockquote>\n<p>üí° Ô∏èIf the domain becomes complex, the integration of a dependency injection engine would be a wise choice.<br>\nWe used manual injection (aka poor man's injection) to keep the example simple.</p>\n</blockquote>\n\n<h2>\n  <a name=\"connecting-the-domain-to-the-framework\" href=\"#connecting-the-domain-to-the-framework\">\n  </a>\n  Connecting the domain to the framework\n</h2>\n\n<p>With this structure, our hexagon can be integrated from any client, whether it is coded in vanilla JS or using a front-end framework from the market.</p>\n\n<p>To better show the flexibility of the domain, we have created 4 applications using the most widely used frameworks on the market:</p>\n\n<ul>\n<li>\n<a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/angularjs-app\">AngularJS</a> (example based on our initial legacy application, but framework still widely used in production)</li>\n<li><a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/vue-app\">VueJS</a></li>\n<li><a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/angular-app\">Angular</a></li>\n<li><a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/react-app\">React</a></li>\n</ul>\n\n<p>The package <code>@hexademo/loader</code> is simply to <strong>expose an instance of the domain</strong>.</p>\n\n<p>Since each framework may have its own way of injecting its variables/dependencies, the responsibility of the loader <strong>stops here</strong>.</p>\n\n<p>Depending on the framework used, you will have to consult the corresponding documentation to inject the domain.</p>\n\n<h3>\n  <a name=\"react-application-example\" href=\"#react-application-example\">\n  </a>\n  React application example\n</h3>\n\n<p>Loading the domain instances using the loader in our <code>App.tsx</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppLoader</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/loader</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">twitterAPI</span> <span class=\"o\">=</span> <span class=\"nx\">AppLoader</span><span class=\"p\">.</span><span class=\"nx\">getTwitterInstance</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">accountAPI</span> <span class=\"o\">=</span> <span class=\"nx\">AppLoader</span><span class=\"p\">.</span><span class=\"nx\">getAccountInstance</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We then pass the instances to the components that will call the domain layer.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"p\">&lt;</span><span class=\"nc\">HomeView</span> <span class=\"na\">accountAPI</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">accountInstance</span><span class=\"si\">}</span> <span class=\"na\">twitterAPI</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">twitterInstance</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The component can thus use the methods of the domain.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"kd\">type</span> <span class=\"nx\">HomeViewProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">twitterAPI</span><span class=\"p\">:</span> <span class=\"nx\">ITwitterAPI</span><span class=\"p\">;</span>\n    <span class=\"nl\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">HomeView</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">:</span> <span class=\"nx\">HomeViewProps</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/**\n     * Get tweets\n     *\n     * @returns {Promise&lt;void&gt;}\n     */</span>\n    <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">listTweets</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">twitterAPI</span><span class=\"p\">.</span><span class=\"nx\">listTweets</span><span class=\"p\">();</span>\n        <span class=\"k\">await</span> <span class=\"nx\">setTweets</span><span class=\"p\">(</span><span class=\"nx\">resp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"vuejs-application-example\" href=\"#vuejs-application-example\">\n  </a>\n  VueJS application example\n</h3>\n\n<ul>\n<li>Declaration of the domain by using <a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/injections/injection-keys.ts\">injection keys</a>.</li>\n<li>Injection of <a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/main.ts#L24\">the domain instance</a>.</li>\n<li>\n<a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/views/HomeView.vue#L74\">Call to the domain</a> within a component.</li>\n</ul>\n\n<h3>\n  <a name=\"and-the-injection-into-our-legacy-angularjs-application\" href=\"#and-the-injection-into-our-legacy-angularjs-application\">\n  </a>\n  And the injection into our legacy AngularJS application?\n</h3>\n\n<p>The beauty of this breakdown is that we can even make it work with our old legacy AngularJS application!</p>\n\n<p>First of all we get the domain instances via the loader as we did for the React application.</p>\n\n<p>This time we use the angularjs constants to make the instances accessible through our application.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">angular</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">angular</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppLoader</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/loader</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">accountAPI</span> <span class=\"o\">=</span> <span class=\"nx\">AppLoader</span><span class=\"p\">.</span><span class=\"nx\">getAccountInstance</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">twitterAPI</span> <span class=\"o\">=</span> <span class=\"nx\">AppLoader</span><span class=\"p\">.</span><span class=\"nx\">getTwitterInstance</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Pour une meilleur organisation, le domain est d√©clar√© dans un module angularjs ind√©pendant.</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">angular</span>\n    <span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">domain</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"p\">.</span><span class=\"nx\">constant</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">accountAPI</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">accountAPI</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">constant</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">twitterAPI</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">twitterAPI</span><span class=\"p\">).</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">angular</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">angular</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">domain</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/modules/domain/domain.module</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// le domain est une dependance du module \"myApp\"</span>\n<span class=\"c1\">// \"myApp\" aura acc√®s √† toutes les instances du domain</span>\n<span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">myApp</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">domain</span><span class=\"p\">]);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This way the domain instances can be <strong>injected on demand</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">class</span> <span class=\"nx\">HomeController</span> <span class=\"kr\">implements</span> <span class=\"nx\">IHomeController</span> <span class=\"p\">{</span>\n    <span class=\"nl\">tweets</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">twitterAPI</span><span class=\"p\">:</span> <span class=\"nx\">ITwitterAPI</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">async</span> <span class=\"nx\">getTweets</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">tweets</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">twitterAPI</span><span class=\"p\">.</span><span class=\"nx\">listTweets</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<blockquote>\n<p>To summarize, even if each <strong>technology/framework</strong> implements its <strong>own way</strong> of injecting its dependencies, the loader and the hexagon remain <strong>independent bricks</strong>, with no link to the library or framework used in the application.</p>\n</blockquote>\n\n<h2>\n  <a name=\"how-to-use-a-business-domain-from-within-another-business-domain\" href=\"#how-to-use-a-business-domain-from-within-another-business-domain\">\n  </a>\n  How to use a business domain from within another business domain?\n</h2>\n\n<p>Simply by declaring the dependency in the domain constructor using the API in question.</p>\n\n<p>Use case: I want to use my account domain in the twitter domain to retrieve the name of the connected user.</p>\n\n<p>We declare the API account in the constructor of the Twitter class<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code>\n<span class=\"kd\">class</span> <span class=\"nx\">Twitter</span> <span class=\"k\">implements</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">{</span>\n    <span class=\"nl\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">,</span>\n        <span class=\"nx\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">accountAPI</span> <span class=\"o\">=</span> <span class=\"nx\">accountAPI</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span> <span class=\"o\">=</span> <span class=\"nx\">tweetAdapter</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Once declared, I can use it in the code of the class.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">async</span> <span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkThatMessageIsFilled</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkTweetLength</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">author</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">accountAPI</span><span class=\"p\">.</span><span class=\"nx\">getUsername</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkThatAutorIsFilled</span><span class=\"p\">(</span><span class=\"nx\">author</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span><span class=\"p\">.</span><span class=\"nx\">createTweet</span><span class=\"p\">({</span> <span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">author</span> <span class=\"p\">});</span>\n    <span class=\"k\">return</span> <span class=\"nx\">tweet</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"how-to-manage-business-events\" href=\"#how-to-manage-business-events\">\n  </a>\n  How to manage business events?\n</h2>\n\n<p>Some application events make sense to be taken out of the framework layer and integrated into the business domain layer.</p>\n\n<p>In our case we identified the <code>tweet-created</code> event as a good candidate to experiment with.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HP1i7kgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4khgjc4ck2k88fd8qw.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HP1i7kgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4khgjc4ck2k88fd8qw.png\" alt=\"event schema\" loading=\"lazy\" width=\"880\" height=\"303\"></a></p>\n\n<p>To do this we will add a new dispatcher type adapter (adapter in charge of sending messages, events ...).</p>\n\n<p>In our case, we will use the custom events natively supported in the browser to send our events.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ITweetDispatcher</span><span class=\"p\">,</span> <span class=\"nx\">Tweet</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/domain</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">TweetEventsDispatcher</span> <span class=\"k\">implements</span> <span class=\"nx\">ITweetDispatcher</span> <span class=\"p\">{</span>\n    <span class=\"nx\">emitTweetCreated</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">:</span> <span class=\"nx\">Tweet</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CustomEvent</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tweetCreated</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">detail</span><span class=\"p\">:</span> <span class=\"nx\">tweet</span><span class=\"p\">,</span>\n        <span class=\"p\">});</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">dispatchEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">TweetEventsDispatcher</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then we will add it to our <code>Twitter</code> business class:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Twitter</span> <span class=\"k\">implements</span> <span class=\"nx\">ITwitterAPI</span> <span class=\"p\">{</span>\n    <span class=\"nl\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">tweetDispatcher</span><span class=\"p\">:</span> <span class=\"nx\">ITweetDispatcher</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n        <span class=\"nx\">accountAPI</span><span class=\"p\">:</span> <span class=\"nx\">IAccountAPI</span><span class=\"p\">,</span>\n        <span class=\"nx\">tweetAdapter</span><span class=\"p\">:</span> <span class=\"nx\">ITweetAdapter</span><span class=\"p\">,</span>\n        <span class=\"nx\">tweetDispatcher</span><span class=\"p\">:</span> <span class=\"nx\">ITweetDispatcher</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">accountAPI</span> <span class=\"o\">=</span> <span class=\"nx\">accountAPI</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span> <span class=\"o\">=</span> <span class=\"nx\">tweetAdapter</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetDispatcher</span> <span class=\"o\">=</span> <span class=\"nx\">tweetDispatcher</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">...</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now we can use it in the <code>tweet()</code> method:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">async</span> <span class=\"nx\">tweet</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Tweet</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkThatMessageIsFilled</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"err\">#</span><span class=\"nx\">checkTweetLength</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n    <span class=\"p\">...</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">tweet</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetAdapter</span><span class=\"p\">.</span><span class=\"nx\">createTweet</span><span class=\"p\">({</span> <span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">author</span> <span class=\"p\">});</span>\n\n    <span class=\"c1\">// Event broadcasting</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tweetDispatcher</span><span class=\"p\">.</span><span class=\"nx\">emitTweetCreated</span><span class=\"p\">(</span><span class=\"nx\">tweet</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">tweet</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And consume it from node code on the framework side üôÇ<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Refresh the list of tweets when a new tweet is created</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tweetCreated</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">refresh</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"how-to-manage-persistence-session-cookies-\" href=\"#how-to-manage-persistence-session-cookies-\">\n  </a>\n  How to manage persistence (session, cookies ‚Ä¶) ?\n</h2>\n\n<p>The information that we want to persist on the client side can be vary - sessions, JWT, preferences of the connected user, etc.</p>\n\n<p>For this, we have different techniques at our disposal such as local storage, cookies or more recently <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">the browser's IndexedDB API</a>.</p>\n\n<p>We can consider that it is the role of the business code of our application to manage the data persistence.</p>\n\n<p>Data persistence will be the responsibility of the adapter layer.</p>\n\n<p>For this, like for data consumption, we will create an SPI that we will name <code>ISessionAdapter</code>.</p>\n\n<p>This interface will be used to define the session methods.</p>\n\n<p>In our case, the interface is the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">ISessionAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">storeValue</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">):</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n    <span class=\"nx\">getValue</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nx\">flush</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"p\">{</span> <span class=\"nx\">ISessionAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can now implement this interface in our adapter layer.</p>\n\n<p>Here is an example of a session implementation with storage in the browser cookies.</p>\n\n<p><details>\n  <summary>session-cookie-adapter.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ISessionAdapter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@hexademo/domain</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">SessionCookieAdapter</span> <span class=\"k\">implements</span> <span class=\"nx\">ISessionAdapter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">storeValue</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"s2\">=</span><span class=\"p\">${</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">; path=/; max-age=</span><span class=\"p\">${</span><span class=\"nx\">duration</span><span class=\"p\">}</span><span class=\"s2\">; SameSite=Strict`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getValue</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"s2\">`; </span><span class=\"p\">${</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">parts</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">`; </span><span class=\"p\">${</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"s2\">=`</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">parts</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">()?.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">;</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">shift</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">flush</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">cookies</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">;</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">cookie</span> <span class=\"k\">of</span> <span class=\"nx\">cookies</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">eqPos</span> <span class=\"o\">=</span> <span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">=</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">eqPos</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">?</span> <span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">eqPos</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nx\">cookie</span><span class=\"p\">;</span>\n            <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">=;expires=Thu, 01 Jan 1970 00:00:00 GMT`</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">SessionCookieAdapter</span> <span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<p>If in the future we want to change to local storage or Indexed DB, we just have to write the corresponding adapter and load it instead of the adapter previously injected in the domain.</p>\n\n<h2>\n  <a name=\"use-of-web-components\" href=\"#use-of-web-components\">\n  </a>\n  Use of web components\n</h2>\n\n<p>After testing the domain agnostic side, and connecting applications written in different frameworks, the realization comes quickly...</p>\n\n<p>**‚ö†Ô∏è However, if in the future I change the framework, my pages will be deprecated too, right ?</p>\n\n<p>That's a very good point, and the answer is a big <strong>yes</strong> üòï</p>\n\n<p>The goal being to separate the business layer from the technology/framework used and especially to <strong>limit the impacts of a framework change</strong>, we still have one final hurdle to overcome: the interfaces.</p>\n\n<p>Key interfaces can also be considered as an <strong>additional layer of the business</strong>.</p>\n\n<p>The solution: use <strong>Web components</strong> ü™Ñ (aka custom elements)</p>\n\n<p>Web components, allow you to create <strong>standard components</strong>, embeddable in any page whether it is made using a framework, or even in vanilla js/html.</p>\n\n<blockquote>\n<p>For the creation of web components, even though writing in vanilla js is an option,<br>\nwe have chosen to do it via a <a href=\"https://stenciljs.com/\">dedicated framework</a>, which will solve<br>\nmany potential integration/bundling problems. The choice of the framework will be made according to<br>\ndifferent factors that are not part of the scope of this article.</p>\n</blockquote>\n\n<p>Here is how a frontend application looks like once the web components are added:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HOW_61XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y8plleih2x4wilgxvot.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HOW_61XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y8plleih2x4wilgxvot.jpg\" alt=\"web components schema\" loading=\"lazy\" width=\"880\" height=\"222\"></a></p>\n\n<p>For our application, we have identified the following components as being externalizable as web components:</p>\n\n<ul>\n<li>The login / account creation form</li>\n<li>The tweet creation component</li>\n<li>The tweet display component</li>\n</ul>\n\n<p>And here are the associated web components:</p>\n\n<ul>\n<li>\n<a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-sign\">tweet-sign</a> : login / account registration</li>\n<li>\n<a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-card\">tweet-card</a> : display a tweet + like action</li>\n<li>\n<a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-create\">tweet-create</a> : input message + create action</li>\n</ul>\n\n<h2>\n  <a name=\"endtoend-tests-e2e-with-playwright\" href=\"#endtoend-tests-e2e-with-playwright\">\n  </a>\n  End-to-End Tests (E2E) with Playwright\n</h2>\n\n<p>End-to-end tests (or E2E) are designed to test the entirety of our application.</p>\n\n<p>For this project, we decided to use <a href=\"https://playwright.dev/\">Playwright</a> to perform our tests on various browsers.</p>\n\n<p>Playwright is an E2E testing framework compatible with all operating systems.</p>\n\n<p>It supports Chromium, WebKit and Firefox which allows running tests on all major browsers on the market.</p>\n\n<p>For a detailed presentation, you can watch the excellent video of Grafikart (FR) on the subject: <a href=\"https://www.youtube.com/watch?v=UgF2LwlNnC8\">https://www.youtube.com/watch?v=UgF2LwlNnC8</a></p>\n\n<p>The various options of the framework (browsers, server to launch, screenshot ...) are configurable in the file <code>playwright.config.ts</code>.</p>\n\n<h3>\n  <a name=\"e2e-test-example\" href=\"#e2e-test-example\">\n  </a>\n  E2E test example\n</h3>\n\n<p>For our application, we wrote a simple test case:</p>\n\n<ul>\n<li>An existing user logs into our application</li>\n<li>The user posts a tweet</li>\n<li>The user likes a tweet</li>\n<li>The user logs out</li>\n</ul>\n\n<p>And here is what it looks like in terms of code :</p>\n\n<p><details>\n  <summary>e2e/tests/existing-user.spec.ts</summary>\n  <br>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">test</span><span class=\"p\">,</span> <span class=\"nx\">expect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@playwright/test</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">should login with unicorn account, like, post a message and disconnect</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">({</span>\n    <span class=\"nx\">page</span><span class=\"p\">,</span>\n<span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// login</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">goto</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">).</span><span class=\"nx\">toHaveURL</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173/#/signin</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#username</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#username</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">unicorn</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#password</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#password</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">rainbow</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">text=Login</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">).</span><span class=\"nx\">toHaveURL</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173/#/home</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// create a tweet</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#message</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#message</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">hello world !</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">text=Honk üöÄ</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newTweet</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">tweet-card:first-of-type .tweet-card__like-button</span><span class=\"dl\">\"</span>\n    <span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">newTweet</span><span class=\"p\">).</span><span class=\"nx\">toHaveText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">0 ‚ù§Ô∏è</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// like a tweet</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">likes</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">:nth-of-type(3) .tweet-card__like-button</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">likes</span><span class=\"p\">).</span><span class=\"nx\">toHaveText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">3 ‚ù§Ô∏è</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">likes</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">likes</span><span class=\"p\">).</span><span class=\"nx\">toHaveText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">4 ‚ù§Ô∏è</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// logout</span>\n    <span class=\"k\">await</span> <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">locator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">text=Logout</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">).</span><span class=\"nx\">toHaveURL</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5173/#/signin</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n</details>\n</p>\n\n<h3>\n  <a name=\"test-report\" href=\"#test-report\">\n  </a>\n  Test report\n</h3>\n\n<p>Once the tests are finished, the command <code>npx playwright show-report</code> allows you to consult the test report.</p>\n\n<p>Example of OK report</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7gzKMuw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqwu9id645b33y15w8zm.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7gzKMuw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqwu9id645b33y15w8zm.png\" alt=\"Rapport OK\" loading=\"lazy\" width=\"880\" height=\"343\"></a></p>\n\n<p>In case of errors, it is also possible to view the trace which allows you to see the browser rendering at the time of the error.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZcLiS2BS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81oq9foenh9cw5yaa7i1.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZcLiS2BS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81oq9foenh9cw5yaa7i1.png\" alt=\"Rapport KO\" loading=\"lazy\" width=\"700\" height=\"668\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--py0c-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pom6optzuobstfrojrjt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--py0c-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pom6optzuobstfrojrjt.png\" alt=\"Rapport KO Suite\" loading=\"lazy\" width=\"880\" height=\"482\"></a></p>\n\n<h3>\n  <a name=\"test-integration-in-gitlab-ci\" href=\"#test-integration-in-gitlab-ci\">\n  </a>\n  Test integration in Gitlab CI\n</h3>\n\n<p>In our case, we have integrated our E2E tests in Gitlab CI to test our different framework implementations.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1ttjinVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6dtzva0720nbcoykpf.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1ttjinVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6dtzva0720nbcoykpf.png\" alt=\"Gitlab Pipeline\" loading=\"lazy\" width=\"880\" height=\"430\"></a></p>\n\n<p>This pipeline allows us to run the same test suite on our legacy Angularjs application as well as on the Vuejs, React and Angular.</p>\n\n<p>The pipeline code is available here: <a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/.gitlab-ci.yml\">https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/.gitlab-ci.yml</a></p>\n\n<h2>\n  <a name=\"final-project\" href=\"#final-project\">\n  </a>\n  Final project\n</h2>\n\n<p>The completed project is available here: <a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo\">https://gitlab.com/thekitchen/frontend-hexagonal-demo</a></p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>In conclusion, the realization of this project has allowed us to increase our skills in building and splitting front-end applications.</p>\n\n<p>The implementation of the hexagonal architecture in the frontend allows us to build durable applications whose business code can survive even after the depreciation of a UI framework.</p>\n\n<p>With this division, it is also possible to integrate backend developers in the development of applications on the domain part and to adapt it in the same way as backend Javascript.</p>\n\n<p>And finally, the fact that our application becomes testable without backend and only in memory with the help of stubs has made it easier for us to deploy it for end-to-end testing.</p>\n\n<p>If you have any questions about the code or the project execution, don't hesitate to contact us!</p>\n\n<p>Thanks for your attention üôá‚Äç‚ôÇÔ∏è.</p>\n\n<p>Matthieu and Sebastian</p>\n\n<h2>\n  <a name=\"links\" href=\"#links\">\n  </a>\n  Links\n</h2>\n\n<ul>\n<li><a href=\"https://alistair.cockburn.us/hexagonal-architecture/\">https://alistair.cockburn.us/hexagonal-architecture/</a></li>\n<li><a href=\"https://beyondxscratch.com/2017/08/19/hexagonal-architecture-the-practical-guide-for-a-clean-architecture/\">https://beyondxscratch.com/2017/08/19/hexagonal-architecture-the-practical-guide-for-a-clean-architecture/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=UgF2LwlNnC8\">https://www.youtube.com/watch?v=UgF2LwlNnC8</a></li>\n<li><a href=\"https://thekitchen.gitlab.io/\">https://thekitchen.gitlab.io/</a></li>\n<li><a href=\"https://gitlab.com/thekitchen/frontend-legacy-app\">https://gitlab.com/thekitchen/frontend-legacy-app</a></li>\n<li><a href=\"https://gitlab.com/thekitchen/frontend-hexagonal-demo\">https://gitlab.com/thekitchen/frontend-hexagonal-demo</a></li>\n</ul>\n\n","body_markdown":"Since the arrival of frontend frameworks and the advent of SPA (Single Page Application) type applications, the volatility of the frontend ecosystem and the adherence to frameworks make it difficult to produce robust and durable applications today.\n\nThe objective of this article is to show how the application of hexagonal architecture on the frontend can address this issue.\n\n<!--more-->\n\n## Presentation\n\n### Matthieu\n\nSoftware architect and backend developer, I mostly develop in Java, JS and Go. Right now, I am starting to dabble in Rust.\n\nI love everything about CI/CD (Gitlab ü¶ä ‚ù§Ô∏è), imagining and creating robust, high-performance, and resource-efficient applications.\n\nI share my insights and discoveries through [blog posts](https://blog.ziggornif.xyz/).\n\nWhen I'm not in my office tinkering with my 3D printer, you can find me on the water üõ∂ !\n\n[Twitter](https://twitter.com/Ziggornif)\n[GitHub](https://github.com/drouian-m)\n[Linkedin](https://www.linkedin.com/in/matthieudrouian/)\n\n### Sebasti√°n\n\nSoftware architect and backend developer.\n\nFormer C# developer, until I got seduced by open source and NodeJS. I love Rust (but I am not yet sure that it's mutual üòÖ).\n\nLinux ‚ù§Ô∏è is my co-pilot. Like Matthew, I am a CI/CD enthusiast (Gitlab ü¶ä gang), I like to optimize/automate anything that is optimizable/automatable.\n\nI do more monitoring than I should, or maybe it's just that the day isn't long enough.\n\nIf you speak \"un poquito de espa√±ol\", feel free to talk to me in the language of Cervantes üôÇ\n\n[GitHub](https://github.com/sebaplaza)\n[Linkedin](https://www.linkedin.com/in/sebasti%C3%A1n-plaza-s%C3%A1nchez-b6964818/)\n\n## Acknowledgements\n\nWe want to thank [Simon Duhem](https://www.linkedin.com/in/simonduhem/) for his help on the styling part and the web components.\n\nThanks also to [Julien Top√ßu](https://twitter.com/JulienTopcu) who advised us on the hexagonal architecture part and who answered our questions all along the project.\n\n## Observations\n\nToday most frontend applications are produced using frameworks.\n\nThe three main frameworks on the market are React, VueJS and Angular.\n\nUI frameworks allow for faster application development. They natively manage the reactivity as well as the compatibility of applications with different browsers.\n\n## Issues\n\nAll the code dedicated to frontend business logic will generally also be linked to the functioning of the framework.\n\nWhen a framework becomes deprecated, the whole application must be rewritten in a new framework.\n\n## Focus on AngularJS\n\n2009: Google releases the first version of AngularJS.\n\nThe framework is going to become very popular, and many developers are going to build their SPA using this framework.\n\n2018 : The team announces the end of the development of the framework and an end of maintenance on December 31, 2021 (https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c).\n\nFollowing this announcement, the teams in charge of maintaining angularjs apps were faced with a choice of how to maintain their apps:\n\n- Migrate from AngularJS to Angular?\n- Rewrite the application to use another framework?\n- Keep their legacy code and cross their fingers that no one finds a flaw?\n\nThe chosen solution will most likely involve a more or less complex rewriting of the code, including the front-end business logic of the application.\n\n## How to avoid it?\n\nTo avoid falling into this kind of trap, you need to try to decouple the frontend business logic from the UI / Framework part.\n\nThe idea is simple: build an application where on one side the framework is only in charge of html rendering and the reactivity of the components and on the other side the frontend business logic is isolated in agnostic code.\n\nAdvantages :\n\n- The code associated with the framework is isolated\n- Our business code becomes sustainable because it is agnostic\n\nOn paper the idea seems simple, but how to implement this division?\n\n## Hexagonal architecture for the front end\n\nHexagonal architecture is an architecture pattern created by [Alistair Cockburn](https://twitter.com/TotherAlistair) that places the business layer at the centre of the application (the hexagon) while ensuring a loose coupling with the technical blocks.\n\nBasic concepts:\n\n- The business domain is agnostic and has no dependencies.\n- The tightness of the business domain is guaranteed by the port system.\n- The layers (adapters) gravitating around the hexagon must respect the interfaces defined in the ports to communicate with the domain.\n\nTo go deeper into hexagonal architecture, see the resources in the [links](./#links) section.\n\nHere is an example of frontend application breakdown using the hexagonal architecture:\n\n![architecture schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5j35sd8x3r95d2xmwap.png)\n\n## Starting project\n\nThe different steps to follow will be based on the migration of a legacy AngularJS app to a hexagonal model.\n\nhttps://gitlab.com/thekitchen/frontend-legacy-app\n\nThis application is a simplified Twitter server that contains the following features:\n\n- authentication\n- account creation\n- creation of tweets\n- display of tweets\n- likes\n\nIt has been built in AngularJS to be an application built with a deprecated framework.\n\n## Goal\n\nThe goal of the article is to show step by step how to start from a legacy project and get to a hexagonal architecture that will allow us to easily change the framework of our application.\n\nIt will not be a magic recipe applicable to all applications but rather the steps of the migration process that we have undertaken during our research.\n\n## Organization of the new project\n\nA project of this type needs some technical prerequisites to allow a trouble free development, in addition to providing a **strict isolation** of the technical blocks associated with the domain.\n\nTo focus purely on the code, and not on the tooling, we feel that the use of a **monorepo** is a **must**.\n\nObviously, the choice of a package management tool is secondary. On our side we have chosen [pnpm](https://pnpm.io/) + [turborepo](https://turborepo.org/) (if the need arises).\n\nThe hierarchy of the monorepo will be as follows:\n\n```shell\n.\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ pnpm-lock.yaml\n‚îú‚îÄ‚îÄ pnpm-workspace.yaml\n‚îú‚îÄ‚îÄ apps\n‚îÇ   ‚îú‚îÄ‚îÄ angular-app\n‚îÇ   ‚îú‚îÄ‚îÄ angularjs-app\n‚îÇ   ‚îú‚îÄ‚îÄ backend-api\n‚îÇ   ‚îú‚îÄ‚îÄ react-app\n‚îÇ   ‚îî‚îÄ‚îÄ vue-app\n‚îú‚îÄ‚îÄ configs\n‚îÇ   ‚îú‚îÄ‚îÄ eslint-config-hexademo\n‚îÇ   ‚îî‚îÄ‚îÄ tsconfig\n‚îú‚îÄ‚îÄ e2e\n‚îÇ   ‚îú‚îÄ‚îÄ package.json\n‚îÇ   ‚îî‚îÄ‚îÄ tests\n‚îú‚îÄ‚îÄ packages\n‚îÇ   ‚îú‚îÄ‚îÄ adapters\n‚îÇ   ‚îú‚îÄ‚îÄ domain\n‚îÇ   ‚îú‚îÄ‚îÄ loader\n‚îÇ   ‚îú‚îÄ‚îÄ style\n‚îÇ   ‚îî‚îÄ‚îÄ web-components\n```\n\nThe purpose and implementation of each file will be explained as the article progresses.\n\n## Identify your business requirements\n\nThe business requirements of our application is composed of two parts:\n\n- Account management\n- Tweet management\n\nFor the account part, the application enables:\n\n- Account creation\n- User authentication\n- Logging out\n- Knowing if the user is authenticated\n- Getting the jwt of the authenticated user\n- Getting the name of the authenticated user\n\nFor the tweets part, the application enables:\n\n- Creation of tweets\n- Retrieving tweets\n- Liking tweets\n\n## Domain - API interfaces creation\n\nOnce our business requirements have been identified, we can now write our domain interfaces.\n\nThe API layer contains all the interfaces allowing communication with the business layer.\n\nThis layer is defined by the domain to guarantee its integrity.\n\n![api interface schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a425bwve2oh4i1hmjnqd.jpg)\n\n### Account API\n\nHere is the API created from the account business logic layer described above\n\n**ports/api/account.ts**\n\n```ts\ninterface IAccountAPI {\n\tauthenticate(username: string, password: string): Promise<string>;\n\tisAuthenticated(): boolean;\n\tlogout(): Promise<void>;\n\tregister(username: string, password: string): Promise<Registration>;\n\tgetToken(): string;\n\tgetUsername(): string;\n}\n\nexport type { IAccountAPI };\n```\n\n### Tweet API\n\nAnd here is the API created from the business logic layer for tweets\n\n**ports/api/twitter.ts**\n\n```ts\ninterface ITwitterAPI {\n\ttweet(message: string): Promise<Tweet>;\n\tlike(tweetId: string): Promise<Tweet>;\n\tlistTweets(): Promise<Array<Tweet>>;\n}\n\nexport type { ITwitterAPI };\n```\n\n## Domain - SPI interfaces creation\n\nThe SPI (Service Provider Interface) layer contains all the interfaces required and provided by the domain to interact with the data.\n\nIt is here that we will define the interfaces allowing the domain to retrieve / create tweets, authenticate etc...\n\nThese interfaces will then be implemented by the adapter layer.\n\n![spi interface schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xn0ywm6uonlsxk27hxa.jpg)\n\n**ports/spi/iauthentication-adapter.ts**\n\n```ts\ninterface IAuthenticationAdapter {\n\tauth(username: string, password: string): Promise<string>;\n\tregister(username: string, password: string);\n}\n```\n\n**ports/spi/itweet-adapter.ts**\n\n```ts\ninterface ITweetAdapter {\n\tlistTweets(): Promise<Array<Tweet>>;\n\tcreateTweet(tweet: Tweet): Promise<Tweet>;\n\tlikeTweet(tweetId: string): Promise<Tweet>;\n}\n```\n\n## Domain - Writing the business logic\n\nNow that our API and SPI are coded, we can move on to writing the business logic.\n\n### Account logic\n\nFor the account part, we have the following business rules to apply:\n\n> It is not possible to create an account without a user/password\n\n> It is not possible to authenticate with an empty password\n\n> The token must be persisted during authentication\n\n{% collapsible account.ts%}\n```ts\nimport { IAccountAPI } from \"./ports/api\";\nimport { Registration } from \"./types/registration\";\nimport { IAuthenticationAdapter } from \"./ports/spi/iauthentication-adapter\";\nimport { ISessionAdapter } from \"./ports/spi/isession-adapter\";\n\nclass Account implements IAccountAPI {\n\tprivate authAdapter: IAuthenticationAdapter;\n\n\tprivate sessionAdapter: ISessionAdapter;\n\n\tprivate defaultSessionDuration: number;\n\n\tconstructor(\n\t\tauthAdapter: IAuthenticationAdapter,\n\t\tsessionAdapter: ISessionAdapter\n\t) {\n\t\tthis.authAdapter = authAdapter;\n\t\tthis.sessionAdapter = sessionAdapter;\n\t\tthis.defaultSessionDuration = 120;\n\t}\n\n\tasync authenticate(username: string, password: string): Promise<string> {\n\t\tthis.checkThatUserIsFilled(username);\n\t\tthis.checkThatPasswordIsFilled(password);\n\n\t\ttry {\n\t\t\tconst token = await this.authAdapter.auth(username, password);\n\n\t\t\tthis.sessionAdapter.storeValue(\n\t\t\t\t\"auth-token\",\n\t\t\t\ttoken,\n\t\t\t\tthis.defaultSessionDuration\n\t\t\t);\n\n\t\t\treturn token;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Something went wrong during the authentication. Check your username and password.\"\n\t\t\t);\n\t\t}\n\t}\n\n\tasync register(username: string, password: string): Promise<Registration> {\n\t\tthis.checkThatUserIsFilled(username);\n\t\tthis.checkThatPasswordIsFilled(password);\n\n\t\ttry {\n\t\t\tawait this.authAdapter.register(username, password);\n\t\t\treturn {\n\t\t\t\tusername,\n\t\t\t\tstatus: \"CREATED\",\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tusername,\n\t\t\t\tstatus: \"ERROR\",\n\t\t\t};\n\t\t}\n\t}\n\n\tasync logout(): Promise<void> {\n\t\tthis.sessionAdapter.flush();\n\t}\n\n\tgetToken(): string {\n\t\tconst token = this.sessionAdapter.getValue(\"auth-token\");\n\t\tif (!token) {\n\t\t\tthrow new Error(\"Token not found\");\n\t\t}\n\n\t\treturn token;\n\t}\n\n\tgetUsername(): string {\n\t\tconst token = this.getToken();\n\t\tconst [user] = atob(token).split(\":\");\n\t\tif (!user) {\n\t\t\tthrow new Error(\"Invalid token format\");\n\t\t}\n\t\treturn user;\n\t}\n\n\tisAuthenticated(): boolean {\n\t\ttry {\n\t\t\tconst token = this.getToken();\n\t\t\tif (token.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcheckThatUserIsFilled(username: string) {\n\t\tif (!username.length) {\n\t\t\tthrow new Error(\"Username could not be empty\");\n\t\t}\n\t}\n\n\tcheckThatPasswordIsFilled(password: string) {\n\t\tif (!password.length) {\n\t\t\tthrow new Error(\"Password could not be empty\");\n\t\t}\n\t}\n}\n\nexport { Account };\n```\n{% endcollapsible %}\n\n### Tweets logic\n\nFor tweets, we have the following business rules to apply when creating a tweet:\n\n> It is not possible to create an empty tweet\n\n> It is not possible to create a tweet without an author\n\n> A tweet must not be longer than 144 characters\n\nTo start with, we will create a `Tweet` type with the attributes required by our front-end domain.\n\n> ‚ö†Ô∏è This type does not have to match the format returned by our backend.\n> It is the representation of the business entity from our frontend.\n\n{% collapsible types/tweet.ts%}\n```ts\ntype Tweet = {\n\tid?: string;\n\tauthor: string;\n\tmessage: string;\n\tlikes?: number;\n\tcreatedAt?: string;\n};\n\nexport type { Tweet };\n```\n{% endcollapsible %}\n\nWe can then move on to our business rules:\n\n{% collapsible twitter.ts%}\n```ts\nimport { Tweet } from \"./types/tweet\";\nimport { ITweetAdapter } from \"./ports/spi/itweet-adapter\";\nimport { IAccountAPI, ITwitterAPI } from \"./ports/api\";\nimport { ITweetDispatcher } from \"./ports/spi/itweet-dispatcher\";\n\nclass Twitter implements ITwitterAPI {\n\taccountAPI: IAccountAPI;\n\n\ttweetAdapter: ITweetAdapter;\n\n\ttweetDispatcher: ITweetDispatcher;\n\n\tconstructor(\n\t\taccountAPI: IAccountAPI,\n\t\ttweetAdapter: ITweetAdapter,\n\t\ttweetDispatcher: ITweetDispatcher\n\t) {\n\t\tthis.accountAPI = accountAPI;\n\t\tthis.tweetAdapter = tweetAdapter;\n\t\tthis.tweetDispatcher = tweetDispatcher;\n\t}\n\n\tasync listTweets(): Promise<Tweet[]> {\n\t\tconst tweets = await this.tweetAdapter.listTweets();\n\t\treturn tweets.reverse();\n\t}\n\n\tasync tweet(message: string): Promise<Tweet> {\n\t\tthis.#checkThatMessageIsFilled(message);\n\t\tthis.#checkTweetLength(message);\n\n\t\tconst author = this.accountAPI.getUsername();\n\t\tthis.#checkThatAutorIsFilled(author);\n\n\t\tconst tweet = await this.tweetAdapter.createTweet({ message, author });\n\t\tthis.tweetDispatcher.emitTweetCreated(tweet);\n\t\treturn tweet;\n\t}\n\n\tlike(tweetId: string): Promise<Tweet> {\n\t\treturn this.tweetAdapter.likeTweet(tweetId);\n\t}\n\n\t#checkThatMessageIsFilled(message: string) {\n\t\tif (!message.length) {\n\t\t\tthrow new Error(\"Message could not be empty\");\n\t\t}\n\t}\n\n\t#checkThatAutorIsFilled(author: string) {\n\t\tif (!author.length) {\n\t\t\tthrow new Error(\"Author could not be empty\");\n\t\t}\n\t}\n\n\t#checkTweetLength(message: string) {\n\t\tif (message.length > 144) {\n\t\t\tthrow new Error(\"Message length must be lower than 144 characters\");\n\t\t}\n\t}\n}\n\nexport { Twitter };\n```\n{% endcollapsible %}\n\n## Domain - setting up the stubs\n\nTo test the business code of our domain without needing to deploy the associated backend, we will set up adapter stubs that we will inject in place of the real adapters.\n\nA stub is a technique used to isolate a portion of code in order to make it autonomous. In our case the stubs will be in-memory implementations which will return dummy data.\n\nSome important points to know in our case:\n\n- the stubs must implement the SPI interfaces and thus respect the method signatures\n- to guarantee the integrity of the domain, the stubs are created in the domain\n- a good stub must return the necessary data sets to test all the business cases\n\nIn our project, we have placed the stubs in a `stubs` directory next to the SPI interfaces.\n\nhttps://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src/ports/spi/stubs\n\n{% collapsible ports/spi/stubs/authentication-inmem-adapter.ts %}\n```ts\nimport { IAuthenticationAdapter } from \"../iauthentication-adapter\";\n\nclass AuthenticationInMemAdapter implements IAuthenticationAdapter {\n\tusers;\n\n\tconstructor() {\n\t\tthis.users = [\n\t\t\t{\n\t\t\t\tusername: \"unicorn\",\n\t\t\t\tpassword: \"rainbow\",\n\t\t\t},\n\t\t];\n\t}\n\n\tasync auth(username: string, password: string): Promise<string> {\n\t\tconst found = this.users.find((user) => user.username === username);\n\t\tif (!found || found.password !== password) {\n\t\t\tthrow new Error(\"Bad credentials\");\n\t\t}\n\t\treturn btoa(`${username}:${password}`);\n\t}\n\n\tasync register(username: string, password: string) {\n\t\tconst found = this.users.find((user) => user.username === username);\n\t\tif (found) {\n\t\t\tthrow new Error(\"User already exists\");\n\t\t}\n\t\tthis.users.push({\n\t\t\tusername,\n\t\t\tpassword,\n\t\t});\n\t}\n}\n\nexport { AuthenticationInMemAdapter };\n```\n{% endcollapsible %}\n\n{% collapsible ports/spi/stubs/tweet-inmem-adapter.ts %}\n```ts\nimport { nanoid } from \"nanoid\";\nimport { Tweet } from \"../../../types/tweet\";\nimport { ITweetAdapter } from \"../itweet-adapter\";\n\nclass TweetInMemAdapter implements ITweetAdapter {\n\ttweets: Tweet[];\n\n\tconstructor() {\n\t\tthis.tweets = [];\n\t}\n\n\tasync listTweets(): Promise<Tweet[]> {\n\t\treturn this.tweets;\n\t}\n\n\tasync createTweet(tweet: Tweet): Promise<Tweet> {\n\t\tconst tweetToCreate: Tweet = {\n\t\t\tid: nanoid(10),\n\t\t\tcreatedAt: new Intl.DateTimeFormat(\"fr-FR\", {\n\t\t\t\tweekday: \"short\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t\tmonth: \"short\",\n\t\t\t\tday: \"numeric\",\n\t\t\t\thour: \"2-digit\",\n\t\t\t\tminute: \"2-digit\",\n\t\t\t\tsecond: \"2-digit\",\n\t\t\t}).format(new Date()),\n\t\t\tlikes: 0,\n\t\t\t...tweet,\n\t\t};\n\t\tthis.tweets.push(tweetToCreate);\n\t\treturn tweetToCreate;\n\t}\n\n\tasync likeTweet(tweetId: string): Promise<Tweet> {\n\t\tconst tweet = this.tweets.find((t) => t.id === tweetId);\n\t\tif (!tweet) throw new Error(`Tweet ${tweetId} not found`);\n\n\t\tif (!tweet.likes) {\n\t\t\ttweet.likes = 0;\n\t\t}\n\t\ttweet.likes += 1;\n\n\t\treturn tweet;\n\t}\n}\n\nexport { TweetInMemAdapter };\n```\n{% endcollapsible %}\n\n## Test your business logic domain\n\nNow that we have stubs, we can easily test our business domain.\n\nUnlike normal front-end testing, thanks to the hexagonal division we will be able to test the business rules of our domain rather than mounting UI components to test their behavior.\n\n\n> **‚ö†Ô∏è : we don't mean to say that component tests are useless but rather that this division allows us to perform new types of tests on our front-end application.**\n> **Since our business is decoupled from the framework, we can easily test our business rules directly.**\n\n**Business tests examples:**\n\nTwitter class instantiation with stub adapters:\n\n```ts\nconst twitter = new Twitter(new TweetInMemAdapter());\n```\n\nTest of the rule on the number of characters:\n\n```ts\ntest(\"should throw error if new tweet message is longer than 144 chars\", async () => {\n\tawait expect(() => twitter.tweet(new Array(160).join(\"x\"))).rejects.toThrow(\n\t\t\"Message length must be lower than 144 characters\"\n\t);\n});\n```\n\nTest of ‚Äúlike‚Äù of a tweet:\n\n```ts\ntest(\"should like a tweet\", async () => {\n\tconst tweet = await twitter.tweet(\"Hi !\");\n\texpect(tweet).toHaveProperty(\"id\");\n\texpect(tweet).toHaveProperty(\"likes\", 0);\n\n\tconst updated = await twitter.like(tweet.id as string);\n\texpect(updated).toHaveProperty(\"likes\", 1);\n});\n```\n\nYou can find all the application's test files next to the source code files `*.spec.ts` : https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/domain/src\n\n## Writing adapters\n\nNow that our business code is written and tested, we can proceed to the implementation of the adapter layer.\n\nThe adapter layer of our hexagon is where the SPI type interfaces are implemented.\n\nThis layer will be responsible for interacting with the data, usually through API calls (REST, GraphQL, etc...) for frontend applications.\n\nIn our case, the adapter layer will be responsible for calls to our backend which exposes a REST API.\n\nAs for the business logic, we split it into two adapters. One responsible for calling the accounts API, the other for calling the tweets API.\n\nAs seen above in the SPI section, these adapters must implement the interfaces defined in the domain SPI layer.\n\nHere are our adapters used to communicate with our REST API:\n\n{% collapsible authentication-rest-adapter.ts %}\n```ts\nimport { IAuthenticationAdapter } from \"@hexademo/domain\";\n\nclass AuthenticationRestAdapter implements IAuthenticationAdapter {\n\tasync auth(username: string, password: string): Promise<string> {\n\t\tconst response = await fetch(\"http://localhost:8080/signin\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"text/plain\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t}),\n\t\t});\n\t\tconst token = await response.text();\n\t\treturn token;\n\t}\n\n\tasync register(username: string, password: string) {\n\t\tconst response = await fetch(\"http://localhost:8080/signup\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t}),\n\t\t});\n\t\tif (response.status !== 201) {\n\t\t\tthrow new Error(\"Registration error\");\n\t\t}\n\t}\n}\n\nexport { AuthenticationRestAdapter };\n```\n{% endcollapsible %}\n\n{% collapsible tweet-rest-adapter.ts %}\n```ts\nimport type { Tweet, ITweetAdapter } from \"@hexademo/domain\";\n\n/**\n * Generate output date\n *\n * @param {Date} date input date\n * @returns {string} output\n */\nfunction formatDate(date: Date): string {\n\treturn new Intl.DateTimeFormat(\"fr-FR\", {\n\t\tweekday: \"short\",\n\t\tyear: \"numeric\",\n\t\tmonth: \"short\",\n\t\tday: \"numeric\",\n\t\thour: \"2-digit\",\n\t\tminute: \"2-digit\",\n\t\tsecond: \"2-digit\",\n\t}).format(date);\n}\nclass TweetRestAdapter implements ITweetAdapter {\n\tasync listTweets(): Promise<Tweet[]> {\n\t\tconst response = await fetch(\"http://localhost:8080/tweets\");\n\t\tconst jsonResp = await response.json();\n\t\tconst tweets: Array<Tweet> = [];\n\t\tfor (const tweet of jsonResp) {\n\t\t\ttweets.push({\n\t\t\t\tid: tweet.id,\n\t\t\t\tmessage: tweet.message,\n\t\t\t\tauthor: tweet.author,\n\t\t\t\tcreatedAt: formatDate(new Date(tweet.created_at)),\n\t\t\t\tlikes: tweet.likes,\n\t\t\t});\n\t\t}\n\t\treturn tweets;\n\t}\n\n\tasync createTweet(tweet: Tweet): Promise<Tweet> {\n\t\tconst response = await fetch(\"http://localhost:8080/tweets\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: tweet.message,\n\t\t\t\tauthor: tweet.author,\n\t\t\t}),\n\t\t});\n\n\t\tconst jsonResp = await response.json();\n\n\t\treturn {\n\t\t\tid: jsonResp.id,\n\t\t\tmessage: jsonResp.message,\n\t\t\tauthor: jsonResp.author,\n\t\t\tcreatedAt: formatDate(new Date(jsonResp.created_at)),\n\t\t\tlikes: jsonResp.likes,\n\t\t};\n\t}\n\n\tasync likeTweet(tweetId: string): Promise<Tweet> {\n\t\tconst response = await fetch(\n\t\t\t`http://localhost:8080/tweets/${tweetId}/like-tweet`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t\tconst jsonResp = await response.json();\n\t\treturn {\n\t\t\tid: jsonResp.id,\n\t\t\tmessage: jsonResp.message,\n\t\t\tauthor: jsonResp.author,\n\t\t\tcreatedAt: formatDate(new Date(jsonResp.created_at)),\n\t\t\tlikes: jsonResp.likes,\n\t\t};\n\t}\n}\n\nexport { TweetRestAdapter };\n```\n{% endcollapsible %}\n\nThe advantage of this technique is that it guarantees the scalability of the communication layer with our backend.\n\nIf in the future we want to use a GraphQL API or even another external API to retrieve the data. We'll just have to create a new adapter for the new requirement.\n\nThe key is that it is the domain that determines the interface contract (inputs and outputs) and that the adapter layer respects this contract.\n\n## Hexagon loading\n\nTo instantiate the hexagon, we need to connect the adapters to the `SPI` ports of the domain.\n\nFrom a technical point of view, we need to inject the dependencies (adapters) via the existing constructors in our domain layer.\n\nTo facilitate this orchestration, we have chosen to create a utility package called `@hexademo/loader`. This package takes care of instantiating classes in the right order.\n\nHere is the code of our loader:\n\n{% collapsible packages/loader/index.ts %}\n```js\nimport {\n\tAuthenticationInMemAdapter,\n\tSessionCookieAdapter,\n\tTweetIndexedDbAdapter,\n\tTweetEventsDispatcher,\n} from \"@hexademo/adapters\";\nimport { Account, IAccountAPI, Twitter, ITwitterAPI } from \"@hexademo/domain\";\n\nnamespace AppLoader {\n\tconst sessionAdapter = new SessionCookieAdapter();\n\tconst authenticationAdater = new AuthenticationInMemAdapter();\n\n\t// nous avons le choix, en fonction de nos besoins\n\t// nous pouvons choisir le IndexedDBAdapter, InMemAdapter ou bien RestAdapter\n\tconst tweetAdapter = new TweetIndexedDbAdapter();\n\t// const tweetAdapter = new TweetInMemAdapter();\n\t// const tweetAdapter = new TweetRestAdapter();\n\n\tconst accountServiceAPI = new Account(authenticationAdater, sessionAdapter);\n\tconst twitterServiceAPI = new Twitter(accountServiceAPI, tweetAdapter, tweetEventsDispatcher);\n\n// Les instances API sont expos√©es, pour une utilisation dans un framework front\n\texport function getTwitterInstance(): ITwitterAPI {\n\t\treturn twitterServiceAPI;\n\t}\n```\n{% endcollapsible %}\n\n> üí° Ô∏èIf the domain becomes complex, the integration of a dependency injection engine would be a wise choice.\n> We used manual injection (aka poor man's injection) to keep the example simple.\n\n## Connecting the domain to the framework\n\nWith this structure, our hexagon can be integrated from any client, whether it is coded in vanilla JS or using a front-end framework from the market.\n\nTo better show the flexibility of the domain, we have created 4 applications using the most widely used frameworks on the market:\n\n- [AngularJS](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/angularjs-app) (example based on our initial legacy application, but framework still widely used in production)\n- [VueJS](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/vue-app)\n- [Angular](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/angular-app)\n- [React](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/apps/react-app)\n\nThe package `@hexademo/loader` is simply to **expose an instance of the domain**.\n\nSince each framework may have its own way of injecting its variables/dependencies, the responsibility of the loader **stops here**.\n\nDepending on the framework used, you will have to consult the corresponding documentation to inject the domain.\n\n### React application example\n\nLoading the domain instances using the loader in our `App.tsx`.\n\n```tsx\nimport { AppLoader } from \"@hexademo/loader\";\n\nconst twitterAPI = AppLoader.getTwitterInstance();\nconst accountAPI = AppLoader.getAccountInstance();\n```\n\nWe then pass the instances to the components that will call the domain layer.\n\n```tsx\n<HomeView accountAPI={accountInstance} twitterAPI={twitterInstance} />\n```\n\nThe component can thus use the methods of the domain.\n\n```tsx\ntype HomeViewProps = {\n\ttwitterAPI: ITwitterAPI;\n\taccountAPI: IAccountAPI;\n};\n\nfunction HomeView(props: HomeViewProps) {\n\t/**\n\t * Get tweets\n\t *\n\t * @returns {Promise<void>}\n\t */\n\tasync function listTweets() {\n\t\tconst resp = await props.twitterAPI.listTweets();\n\t\tawait setTweets(resp);\n\t}\n}\n```\n\n### VueJS application example\n\n- Declaration of the domain by using [injection keys](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/injections/injection-keys.ts).\n- Injection of [the domain instance](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/main.ts#L24).\n- [Call to the domain](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/apps/vue-app/src/views/HomeView.vue#L74) within a component.\n\n### And the injection into our legacy AngularJS application?\n\nThe beauty of this breakdown is that we can even make it work with our old legacy AngularJS application!\n\nFirst of all we get the domain instances via the loader as we did for the React application.\n\nThis time we use the angularjs constants to make the instances accessible through our application.\n\n```js\nimport angular from \"angular\";\nimport { AppLoader } from \"@hexademo/loader\";\n\nconst accountAPI = AppLoader.getAccountInstance();\nconst twitterAPI = AppLoader.getTwitterInstance();\n\n// Pour une meilleur organisation, le domain est d√©clar√© dans un module angularjs ind√©pendant.\nexport default angular\n\t.module(\"domain\", [])\n\t.constant(\"accountAPI\", accountAPI)\n\t.constant(\"twitterAPI\", twitterAPI).name;\n```\n\n```js\nimport angular from \"angular\";\nimport domain from \"@/modules/domain/domain.module\";\n\n// le domain est une dependance du module \"myApp\"\n// \"myApp\" aura acc√®s √† toutes les instances du domain\nangular.module(\"myApp\", [domain]);\n```\n\nThis way the domain instances can be **injected on demand**\n\n```js\nclass HomeController implements IHomeController {\n\ttweets: Tweet[] = [];\n\n\tconstructor(private twitterAPI: ITwitterAPI) {}\n\n\tasync getTweets() {\n\t\tconst tweets = await this.twitterAPI.listTweets();\n\t}\n}\n```\n\n> To summarize, even if each **technology/framework** implements its **own way** of injecting its dependencies, the loader and the hexagon remain **independent bricks**, with no link to the library or framework used in the application.\n\n## How to use a business domain from within another business domain?\n\nSimply by declaring the dependency in the domain constructor using the API in question.\n\nUse case: I want to use my account domain in the twitter domain to retrieve the name of the connected user.\n\nWe declare the API account in the constructor of the Twitter class\n\n```ts\n\nclass Twitter implements ITwitterAPI {\n\taccountAPI: IAccountAPI;\n\n\ttweetAdapter: ITweetAdapter;\n\n\tconstructor(\n\t\taccountAPI: IAccountAPI,\n\t\ttweetAdapter: ITweetAdapter,\n\t) {\n\t\tthis.accountAPI = accountAPI;\n\t\tthis.tweetAdapter = tweetAdapter;\n\t}\n\n```\n\nOnce declared, I can use it in the code of the class.\n\n```ts\nasync tweet(message: string): Promise<Tweet> {\n\tthis.#checkThatMessageIsFilled(message);\n\tthis.#checkTweetLength(message);\n\n\tconst author = this.accountAPI.getUsername();\n\tthis.#checkThatAutorIsFilled(author);\n\n\tconst tweet = await this.tweetAdapter.createTweet({ message, author });\n\treturn tweet;\n}\n```\n\n## How to manage business events?\n\nSome application events make sense to be taken out of the framework layer and integrated into the business domain layer.\n\nIn our case we identified the `tweet-created` event as a good candidate to experiment with.\n\n![event schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4khgjc4ck2k88fd8qw.png)\n\nTo do this we will add a new dispatcher type adapter (adapter in charge of sending messages, events ...).\n\nIn our case, we will use the custom events natively supported in the browser to send our events.\n\n```ts\nimport { ITweetDispatcher, Tweet } from \"@hexademo/domain\";\n\nclass TweetEventsDispatcher implements ITweetDispatcher {\n\temitTweetCreated(tweet: Tweet): void {\n\t\tconst event = new CustomEvent(\"tweetCreated\", {\n\t\t\tdetail: tweet,\n\t\t});\n\t\tdocument.dispatchEvent(event);\n\t}\n}\n\nexport { TweetEventsDispatcher };\n```\n\nThen we will add it to our `Twitter` business class:\n\n```ts\nclass Twitter implements ITwitterAPI {\n\taccountAPI: IAccountAPI;\n\n\ttweetAdapter: ITweetAdapter;\n\n\ttweetDispatcher: ITweetDispatcher;\n\n\tconstructor(\n\t\taccountAPI: IAccountAPI,\n\t\ttweetAdapter: ITweetAdapter,\n\t\ttweetDispatcher: ITweetDispatcher\n\t) {\n\t\tthis.accountAPI = accountAPI;\n\t\tthis.tweetAdapter = tweetAdapter;\n\t\tthis.tweetDispatcher = tweetDispatcher;\n\t}\n\t...\n```\n\nNow we can use it in the `tweet()` method:\n\n```ts\nasync tweet(message: string): Promise<Tweet> {\n\tthis.#checkThatMessageIsFilled(message);\n\tthis.#checkTweetLength(message);\n\n\t...\n\n\tconst tweet = await this.tweetAdapter.createTweet({ message, author });\n\n\t// Event broadcasting\n\tthis.tweetDispatcher.emitTweetCreated(tweet);\n\n\treturn tweet;\n}\n```\n\nAnd consume it from node code on the framework side üôÇ\n\n```ts\n// Refresh the list of tweets when a new tweet is created\ndocument.addEventListener(\"tweetCreated\", refresh);\n```\n\n## How to manage persistence (session, cookies ‚Ä¶) ?\n\nThe information that we want to persist on the client side can be vary - sessions, JWT, preferences of the connected user, etc.\n\nFor this, we have different techniques at our disposal such as local storage, cookies or more recently [the browser's IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API).\n\nWe can consider that it is the role of the business code of our application to manage the data persistence.\n\nData persistence will be the responsibility of the adapter layer.\n\nFor this, like for data consumption, we will create an SPI that we will name `ISessionAdapter`.\n\nThis interface will be used to define the session methods.\n\nIn our case, the interface is the following:\n\n```ts\ninterface ISessionAdapter {\n\tstoreValue(key: string, value: string, duration: number): void;\n\tgetValue(key: string): string;\n\tflush(): void;\n}\n\nexport type { ISessionAdapter };\n```\n\nWe can now implement this interface in our adapter layer.\n\nHere is an example of a session implementation with storage in the browser cookies.\n\n{% collapsible session-cookie-adapter.ts %}\n```ts\nimport { ISessionAdapter } from \"@hexademo/domain\";\n\nclass SessionCookieAdapter implements ISessionAdapter {\n\tstoreValue(key: string, value: string, duration: number): void {\n\t\tdocument.cookie = `${key}=${value}; path=/; max-age=${duration}; SameSite=Strict`;\n\t}\n\n\tgetValue(key: string): string {\n\t\tconst value = `; ${document.cookie}`;\n\t\tconst parts = value.split(`; ${key}=`);\n\t\treturn parts.pop()?.split(\";\").shift() as string;\n\t}\n\n\tflush(): void {\n\t\tconst cookies = document.cookie.split(\";\");\n\n\t\tfor (const cookie of cookies) {\n\t\t\tconst eqPos = cookie.indexOf(\"=\");\n\t\t\tconst name = eqPos > -1 ? cookie.substring(0, eqPos) : cookie;\n\t\t\tdocument.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;\n\t\t}\n\t}\n}\n\nexport { SessionCookieAdapter };\n```\n{% endcollapsible %}\n\nIf in the future we want to change to local storage or Indexed DB, we just have to write the corresponding adapter and load it instead of the adapter previously injected in the domain.\n\n## Use of web components\n\nAfter testing the domain agnostic side, and connecting applications written in different frameworks, the realization comes quickly...\n\n**‚ö†Ô∏è However, if in the future I change the framework, my pages will be deprecated too, right ?\n\nThat's a very good point, and the answer is a big **yes** üòï\n\nThe goal being to separate the business layer from the technology/framework used and especially to **limit the impacts of a framework change**, we still have one final hurdle to overcome: the interfaces.\n\nKey interfaces can also be considered as an **additional layer of the business**.\n\nThe solution: use **Web components** ü™Ñ (aka custom elements)\n\nWeb components, allow you to create **standard components**, embeddable in any page whether it is made using a framework, or even in vanilla js/html.\n\n> For the creation of web components, even though writing in vanilla js is an option,\n> we have chosen to do it via a [dedicated framework](https://stenciljs.com/), which will solve\n> many potential integration/bundling problems. The choice of the framework will be made according to\n> different factors that are not part of the scope of this article.\n\nHere is how a frontend application looks like once the web components are added:\n\n![web components schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y8plleih2x4wilgxvot.jpg)\n\nFor our application, we have identified the following components as being externalizable as web components:\n- The login / account creation form\n- The tweet creation component\n- The tweet display component\n\nAnd here are the associated web components:\n- [tweet-sign](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-sign) : login / account registration\n- [tweet-card](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-card) : display a tweet + like action\n- [tweet-create](https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/tree/main/packages/web-components/src/components/tweet-create) : input message + create action\n\n## End-to-End Tests (E2E) with Playwright\n\nEnd-to-end tests (or E2E) are designed to test the entirety of our application.\n\nFor this project, we decided to use [Playwright](https://playwright.dev/) to perform our tests on various browsers.\n\nPlaywright is an E2E testing framework compatible with all operating systems.\n\nIt supports Chromium, WebKit and Firefox which allows running tests on all major browsers on the market.\n\nFor a detailed presentation, you can watch the excellent video of Grafikart (FR) on the subject: https://www.youtube.com/watch?v=UgF2LwlNnC8\n\nThe various options of the framework (browsers, server to launch, screenshot ...) are configurable in the file `playwright.config.ts`.\n\n### E2E test example\n\nFor our application, we wrote a simple test case:\n\n- An existing user logs into our application\n- The user posts a tweet\n- The user likes a tweet\n- The user logs out\n\nAnd here is what it looks like in terms of code :\n\n{% collapsible e2e/tests/existing-user.spec.ts %}\n```ts\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"should login with unicorn account, like, post a message and disconnect\", async ({\n\tpage,\n}) => {\n\t// login\n\tawait page.goto(\"http://localhost:5173\");\n\tawait expect(page).toHaveURL(\"http://localhost:5173/#/signin\");\n\tawait page.locator(\"#username\").click();\n\tawait page.locator(\"#username\").fill(\"unicorn\");\n\tawait page.locator(\"#password\").click();\n\tawait page.locator(\"#password\").fill(\"rainbow\");\n\tawait page.locator(\"text=Login\").click();\n\tawait expect(page).toHaveURL(\"http://localhost:5173/#/home\");\n\n\t// create a tweet\n\tawait page.locator(\"#message\").click();\n\tawait page.locator(\"#message\").fill(\"hello world !\");\n\tawait page.locator(\"text=Honk üöÄ\").click();\n\tconst newTweet = await page.locator(\n\t\t\"tweet-card:first-of-type .tweet-card__like-button\"\n\t);\n\tawait expect(newTweet).toHaveText(\"0 ‚ù§Ô∏è\");\n\n\t// like a tweet\n\tconst likes = await page.locator(\":nth-of-type(3) .tweet-card__like-button\");\n\tawait expect(likes).toHaveText(\"3 ‚ù§Ô∏è\");\n\tawait likes.click();\n\tawait expect(likes).toHaveText(\"4 ‚ù§Ô∏è\");\n\n\t// logout\n\tawait page.locator(\"text=Logout\").click();\n\tawait expect(page).toHaveURL(\"http://localhost:5173/#/signin\");\n});\n```\n{% endcollapsible %}\n\n### Test report\n\nOnce the tests are finished, the command `npx playwright show-report` allows you to consult the test report.\n\nExample of OK report\n\n![Rapport OK](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqwu9id645b33y15w8zm.png)\n\nIn case of errors, it is also possible to view the trace which allows you to see the browser rendering at the time of the error.\n\n![Rapport KO](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81oq9foenh9cw5yaa7i1.png)\n\n![Rapport KO Suite](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pom6optzuobstfrojrjt.png)\n\n### Test integration in Gitlab CI\n\nIn our case, we have integrated our E2E tests in Gitlab CI to test our different framework implementations.\n\n![Gitlab Pipeline](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6dtzva0720nbcoykpf.png)\n\nThis pipeline allows us to run the same test suite on our legacy Angularjs application as well as on the Vuejs, React and Angular.\n\nThe pipeline code is available here: https://gitlab.com/thekitchen/frontend-hexagonal-demo/-/blob/main/.gitlab-ci.yml\n\n## Final project\n\nThe completed project is available here: https://gitlab.com/thekitchen/frontend-hexagonal-demo\n\n## Conclusion\n\nIn conclusion, the realization of this project has allowed us to increase our skills in building and splitting front-end applications.\n\nThe implementation of the hexagonal architecture in the frontend allows us to build durable applications whose business code can survive even after the depreciation of a UI framework.\n\nWith this division, it is also possible to integrate backend developers in the development of applications on the domain part and to adapt it in the same way as backend Javascript.\n\nAnd finally, the fact that our application becomes testable without backend and only in memory with the help of stubs has made it easier for us to deploy it for end-to-end testing.\n\nIf you have any questions about the code or the project execution, don't hesitate to contact us!\n\nThanks for your attention üôá‚Äç‚ôÇÔ∏è.\n\nMatthieu and Sebastian\n\n## Links\n\n- https://alistair.cockburn.us/hexagonal-architecture/\n- https://beyondxscratch.com/2017/08/19/hexagonal-architecture-the-practical-guide-for-a-clean-architecture/\n- https://www.youtube.com/watch?v=UgF2LwlNnC8\n- https://thekitchen.gitlab.io/\n- https://gitlab.com/thekitchen/frontend-legacy-app\n- https://gitlab.com/thekitchen/frontend-hexagonal-demo","user":{"name":"Matthieu Drouian","username":"drouianm","twitter_username":null,"github_username":"drouian-m","user_id":297245,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Q5qB-UE0--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297245/76ce0f80-6561-4ed1-aa38-9ec9cec665ae.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--XM2_y91y--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297245/76ce0f80-6561-4ed1-aa38-9ec9cec665ae.jpeg"}}