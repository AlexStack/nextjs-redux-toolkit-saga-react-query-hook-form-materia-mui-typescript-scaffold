{"type_of":"article","id":1246378,"title":"Introducing Lucia: A simple, flexible, and type-safe authentication library for Next.js, SvelteKit, and beyond","description":"Hi!  Over the past few months, I've been working on a library called Lucia. At its core, it's a user...","readable_publish_date":"Nov 7","slug":"introducing-lucia-a-simple-flexible-and-type-safe-authentication-library-for-nextjs-sveltekit-and-beyond-4jeg","path":"/pilcrowonpaper/introducing-lucia-a-simple-flexible-and-type-safe-authentication-library-for-nextjs-sveltekit-and-beyond-4jeg","url":"https://dev.to/pilcrowonpaper/introducing-lucia-a-simple-flexible-and-type-safe-authentication-library-for-nextjs-sveltekit-and-beyond-4jeg","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T11:50:30Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1246378.png","canonical_url":"https://dev.to/pilcrowonpaper/introducing-lucia-a-simple-flexible-and-type-safe-authentication-library-for-nextjs-sveltekit-and-beyond-4jeg","created_at":"2022-11-07T11:50:30Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T11:50:30Z","last_comment_at":"2022-11-07T11:50:30Z","reading_time_minutes":3,"tag_list":"nextjs, javascript, svelte, security","tags":["nextjs","javascript","svelte","security"],"body_html":"<p>Hi!</p>\n\n<p>Over the past few months, I've been working on a library called <a href=\"https://github.com/pilcrowOnPaper/lucia-auth\">Lucia</a>. At its core, it's a user and session management library that provides an abstraction layer between your app and your database. Using it, you can create users, creates sessions for those users, and validate those sessions. But, it doesn't try to do more than that; you have to create your own sign-in forms and APIs, and handle things like email verification by yourself. But, because of that, how you use Lucia is totally up to you. </p>\n\n<p>That said though, we do provide integration packages to make it easier to use with your favorite frameworks. Right now, we directly support <a href=\"https://lucia-auth.vercel.app/nextjs/start-here/getting-started\">Next.js</a>, <a href=\"https://lucia-auth.vercel.app/sveltekit/start-here/getting-started\">SvelteKit</a>, and <a href=\"https://lucia-auth.vercel.app/astro/start-here/getting-started\">Astro SSR</a>. We also have a package for handling <a href=\"https://lucia-auth.vercel.app/oauth/start-here/getting-started\">OAuth</a>. I think it's important to keep the core package simple and focused, and give you the option to trade some flexibility for an easier experience. It shouldn't be the other way around.</p>\n\n<p>And this is what makes it different from existing solutions like Supabase auth, SuperTokens, or NextAuth. It isn't a complete solution, and it never tries to be so. It allows you to make something that fits your app's need and build on top of it. There's no hidden configurations or callbacks that forces you to use jank solutions.</p>\n\n<p>Repo: <a href=\"https://github.com/pilcrowOnPaper/lucia-auth\">https://github.com/pilcrowOnPaper/lucia-auth</a></p>\n\n<p>Docs: <a href=\"https://lucia-auth.vercel.app\">https://lucia-auth.vercel.app</a></p>\n\n<h2>\n  <a name=\"features\" href=\"#features\">\n  </a>\n  Features!\n</h2>\n\n<p>Aside from the obvious (own your data, secure, MIT license, etc):</p>\n\n<h3>\n  <a name=\"supports-any-databases\" href=\"#supports-any-databases\">\n  </a>\n  Supports any databases\n</h3>\n\n<p>We take a similar approach to NextAuth, where we provide database adapters. We currently provide adapters for Prisma, Supabase, MongoDB, and Redis. We also have an extensive documentation on creating your own adapters and provide a package for testing them.</p>\n\n<h3>\n  <a name=\"custom-user-attributes\" href=\"#custom-user-attributes\">\n  </a>\n  Custom user attributes\n</h3>\n\n<p>Similar to Firebase custom claims, you can set any user attributes to the user. By default, only the user id is required to be stored in your database, and you can add additional columns to it (like <code>username</code>, <code>is_verified</code>, etc). </p>\n\n<h3>\n  <a name=\"lowlevel-control\" href=\"#lowlevel-control\">\n  </a>\n  Low-level control\n</h3>\n\n<p>Since Lucia is the layer between your database and app, it provides everything you need to interact with user and session data. Just a single method to update user data and password, invalidate sessions, create session cookies, etc.</p>\n\n<h3>\n  <a name=\"session-ids\" href=\"#session-ids\">\n  </a>\n  Session ids\n</h3>\n\n<p>This is less a feature but more of the inner-workings. To not over-complicate the APIs, we only support session ids (and not JWTs). While JWT + access/refresh tokens may be a better fit in some use cases, we think you can't go <em>wrong</em> using session ids.</p>\n\n<h2>\n  <a name=\"code-samples\" href=\"#code-samples\">\n  </a>\n  Code samples\n</h2>\n\n<h3>\n  <a name=\"create-user-and-session\" href=\"#create-user-and-session\">\n  </a>\n  Create user and session\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// create a user using \"email\" auth method</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">createUser</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">email</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">userEmail</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">userPassword</span><span class=\"p\">,</span> <span class=\"c1\">// will hash it for you</span>\n  <span class=\"na\">attributes</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">username</span><span class=\"p\">:</span> <span class=\"nx\">userUsername</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n<span class=\"kd\">const</span> <span class=\"nx\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">createSession</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sessionCookies</span> <span class=\"o\">=</span> <span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">createSessionCookies</span><span class=\"p\">(</span><span class=\"nx\">session</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"validate-requests\" href=\"#validate-requests\">\n  </a>\n  Validate requests\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// will also renew sessions if expired</span>\n<span class=\"kd\">const</span> <span class=\"nx\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">validateRequest</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">setSession</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Or using Next.js integration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">authRequest</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AuthRequest</span><span class=\"p\">(</span><span class=\"nx\">auth</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">authRequest</span><span class=\"p\">.</span><span class=\"nx\">getSession</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"oauth\" href=\"#oauth\">\n  </a>\n  OAuth\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">callbackCode</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">searchParams</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">code</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">existingUser</span><span class=\"p\">,</span> <span class=\"nx\">providerUser</span><span class=\"p\">,</span> <span class=\"nx\">createUser</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">githubAuth</span><span class=\"p\">.</span><span class=\"nx\">validateCallback</span><span class=\"p\">(</span><span class=\"nx\">callbackCode</span><span class=\"p\">);</span>\n<span class=\"c1\">// create a new user for first-time users</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">existingUser</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">createUser</span><span class=\"p\">({</span>\n  <span class=\"na\">username</span><span class=\"p\">:</span> <span class=\"nx\">providerUser</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you have any questions while using Lucia, feel free to ask us on GitHub or Discord. Cheers!</p>\n\n","body_markdown":"Hi!\n\nOver the past few months, I've been working on a library called [Lucia](https://github.com/pilcrowOnPaper/lucia-auth). At its core, it's a user and session management library that provides an abstraction layer between your app and your database. Using it, you can create users, creates sessions for those users, and validate those sessions. But, it doesn't try to do more than that; you have to create your own sign-in forms and APIs, and handle things like email verification by yourself. But, because of that, how you use Lucia is totally up to you. \n\nThat said though, we do provide integration packages to make it easier to use with your favorite frameworks. Right now, we directly support [Next.js](https://lucia-auth.vercel.app/nextjs/start-here/getting-started), [SvelteKit](https://lucia-auth.vercel.app/sveltekit/start-here/getting-started), and [Astro SSR](https://lucia-auth.vercel.app/astro/start-here/getting-started). We also have a package for handling [OAuth](https://lucia-auth.vercel.app/oauth/start-here/getting-started). I think it's important to keep the core package simple and focused, and give you the option to trade some flexibility for an easier experience. It shouldn't be the other way around.\n\nAnd this is what makes it different from existing solutions like Supabase auth, SuperTokens, or NextAuth. It isn't a complete solution, and it never tries to be so. It allows you to make something that fits your app's need and build on top of it. There's no hidden configurations or callbacks that forces you to use jank solutions.\n\nRepo: https://github.com/pilcrowOnPaper/lucia-auth\n\nDocs: https://lucia-auth.vercel.app\n\n## Features!\n\nAside from the obvious (own your data, secure, MIT license, etc):\n\n### Supports any databases\n\nWe take a similar approach to NextAuth, where we provide database adapters. We currently provide adapters for Prisma, Supabase, MongoDB, and Redis. We also have an extensive documentation on creating your own adapters and provide a package for testing them.\n\n### Custom user attributes\n\nSimilar to Firebase custom claims, you can set any user attributes to the user. By default, only the user id is required to be stored in your database, and you can add additional columns to it (like `username`, `is_verified`, etc). \n\n### Low-level control\n\nSince Lucia is the layer between your database and app, it provides everything you need to interact with user and session data. Just a single method to update user data and password, invalidate sessions, create session cookies, etc.\n\n### Session ids\n\nThis is less a feature but more of the inner-workings. To not over-complicate the APIs, we only support session ids (and not JWTs). While JWT + access/refresh tokens may be a better fit in some use cases, we think you can't go *wrong* using session ids.\n\n## Code samples\n\n### Create user and session\n\n```ts\n// create a user using \"email\" auth method\nconst user = await auth.createUser(\"email\", userEmail, {\n  password: userPassword, // will hash it for you\n  attributes: {\n    username: userUsername\n  }\n});\nconst session = await auth.createSession(user.userId);\nconst sessionCookies = auth.createSessionCookies(session);\n```\n\n### Validate requests\n\n```ts\n// will also renew sessions if expired\nconst session = await auth.validateRequest(request, setSession);\n```\n\nOr using Next.js integration:\n\n```ts\nconst authRequest = new AuthRequest(auth, ctx.req, ctx.res);\nconst session = await authRequest.getSession();\n```\n\n### OAuth\n\n```ts\nconst callbackCode = url.searchParams.get(\"code\");\nconst { existingUser, providerUser, createUser } = await githubAuth.validateCallback(callbackCode);\n// create a new user for first-time users\nconst user = existingUser || (await createUser({\n  username: providerUser.login;\n});\n```\n\nIf you have any questions while using Lucia, feel free to ask us on GitHub or Discord. Cheers!","user":{"name":"pilcrowOnPaper","username":"pilcrowonpaper","twitter_username":null,"github_username":"pilcrowOnPaper","user_id":817313,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--QmR-FpC3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/817313/e02766cd-969a-4430-9fac-1a810553521c.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--j_QnVW8f--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/817313/e02766cd-969a-4430-9fac-1a810553521c.jpeg"}}