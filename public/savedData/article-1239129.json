{"type_of":"article","id":1239129,"title":"Using Amazon .NET Lambda Annotations (Preview)","description":"In this post, we’ll explore the new .NET Lambda Annotations framework.  Lambda Annotations is a new...","readable_publish_date":"Nov 1","slug":"using-amazon-net-lambda-annotations-preview-1f2c","path":"/aws-builders/using-amazon-net-lambda-annotations-preview-1f2c","url":"https://dev.to/aws-builders/using-amazon-net-lambda-annotations-preview-1f2c","comments_count":0,"public_reactions_count":4,"collection_id":null,"published_timestamp":"2022-11-01T19:09:12Z","positive_reactions_count":4,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--KPRtMffV--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzxipoj44wnz10de81iz.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--lHZ921AD--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzxipoj44wnz10de81iz.png","canonical_url":"https://medium.com/@anitaandonoska/using-amazon-net-lambda-annotations-preview-95234a3264a9","created_at":"2022-11-01T19:09:13Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-01T19:09:12Z","last_comment_at":"2022-11-01T19:09:12Z","reading_time_minutes":2,"tag_list":"aws, lambda, dotnet, csharp","tags":["aws","lambda","dotnet","csharp"],"body_html":"<p>In this post, we’ll explore the new .NET Lambda Annotations framework.</p>\n\n<p>Lambda Annotations is a new framework introduced with the release of .NET 6 managed runtime for Lambda (currently in preview). Lambda Annotations framework simplifies writing .NET Lambda functions by reducing boilerplate code and synchronizing the Lambda functions implemented in your code with your project’s CloudFormation template.</p>\n\n<h3>\n  <a name=\"how-it-works\" href=\"#how-it-works\">\n  </a>\n  How it works\n</h3>\n\n<p>The Annotations framework makes the experience of writing Lambda feel more natural in C#. The current release is mainly focused on simplifying Lambda functions that are API Gateway invoked, also there are other improvements in regards to Dependency Injection, that can be used with other Lambda invocation types.</p>\n\n<p>Here is an example, with the “LambdaFunction” attribute placed on a method that indicates the method should be exposed as a Lambda function, with the specified MemorySize. You can set other attributes too, like Timeout, Role, Policies, etc. The “RestApi” attribute configures the Lambda function to be called from an API Gateway REST API.</p>\n\n\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/aandonoska/2f095aa56fdd0c6d7ce613e0c7008a7a.js\"></script>\n</div>\n\n\n<p>When the project is compiled, the Annotations framework based on the .NET Lambda attributes generates new code into the build that under the hood handles all of the translation, to the Lambda programming model. Also, it will synchronize all of the C# methods with the “LambdaFunction” attribute in the project’s CloudFormation template. The CloudFormation template can still be edited to add additional AWS resources or to further customize the Lambda function. Configuring CloudFormation properties for the functions using the .NET attributes is optional. If you prefer you can continue to configure the additional settings in the CloudFormation template.</p>\n\n<p>Another attribute, that I am especially excited about is the “LambdaStartup” attribute. Placed on a class, indicates the class should be used as the startup class and is used to configure the dependency injection and middleware. There can only be one class in a Lambda project with this attribute. The “LambdaStartup” attribute really simplifies the configuration of dependency injection.</p>\n\n<p>Here’s an example of how can be used:<br>\n</p>\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/aandonoska/967c9e79d8c7a7759d1a3bb5503d025b.js\"></script>\n</div>\n<br>\nBesides registering custom services, you can register Amazon services as well by using the “AddAWSService” extension method (for this, you need to install the “AWSSDK.Extensions.NETCore.Setup” NuGet package).\n\n<p>The code еxamples can be found <a href=\"https://github.com/aandonoska/aws-examples\">here</a>.</p>\n\n<p>Please note that Lambda Annotations require the deployment of the Lambda function to be done using a CloudFormation template. In the future, other deployment technologies may be supported.</p>\n\n<h3>\n  <a name=\"how-to-get-started\" href=\"#how-to-get-started\">\n  </a>\n  How to get started\n</h3>\n\n<p>To get started with Lambda Annotations, there is a blueprint as part of the Visual Studio AWS Toolkit for Visual Studio 2022. The steps in detail can be found here.</p>\n\n<p>Besides that, you can also use Lambda Annotations within your existing .NET 6 project. To get started you need <a href=\"https://www.nuget.org/packages/Amazon.Lambda.Annotations/\">Amazon.Lambda.Annotations</a> NuGet package. Then you can start using the Lambda Annotation attributes.</p>\n\n","body_markdown":"In this post, we’ll explore the new .NET Lambda Annotations framework.\n\nLambda Annotations is a new framework introduced with the release of .NET 6 managed runtime for Lambda (currently in preview). Lambda Annotations framework simplifies writing .NET Lambda functions by reducing boilerplate code and synchronizing the Lambda functions implemented in your code with your project’s CloudFormation template.\n\n### How it works\nThe Annotations framework makes the experience of writing Lambda feel more natural in C#. The current release is mainly focused on simplifying Lambda functions that are API Gateway invoked, also there are other improvements in regards to Dependency Injection, that can be used with other Lambda invocation types.\n\nHere is an example, with the “LambdaFunction” attribute placed on a method that indicates the method should be exposed as a Lambda function, with the specified MemorySize. You can set other attributes too, like Timeout, Role, Policies, etc. The “RestApi” attribute configures the Lambda function to be called from an API Gateway REST API.\n\n{% gist https://gist.github.com/aandonoska/2f095aa56fdd0c6d7ce613e0c7008a7a %}\n\nWhen the project is compiled, the Annotations framework based on the .NET Lambda attributes generates new code into the build that under the hood handles all of the translation, to the Lambda programming model. Also, it will synchronize all of the C# methods with the “LambdaFunction” attribute in the project’s CloudFormation template. The CloudFormation template can still be edited to add additional AWS resources or to further customize the Lambda function. Configuring CloudFormation properties for the functions using the .NET attributes is optional. If you prefer you can continue to configure the additional settings in the CloudFormation template.\n\nAnother attribute, that I am especially excited about is the “LambdaStartup” attribute. Placed on a class, indicates the class should be used as the startup class and is used to configure the dependency injection and middleware. There can only be one class in a Lambda project with this attribute. The “LambdaStartup” attribute really simplifies the configuration of dependency injection.\n\nHere’s an example of how can be used:\n{% gist https://gist.github.com/aandonoska/967c9e79d8c7a7759d1a3bb5503d025b %}\nBesides registering custom services, you can register Amazon services as well by using the “AddAWSService” extension method (for this, you need to install the “AWSSDK.Extensions.NETCore.Setup” NuGet package).\n\nThe code еxamples can be found [here](https://github.com/aandonoska/aws-examples).\n\nPlease note that Lambda Annotations require the deployment of the Lambda function to be done using a CloudFormation template. In the future, other deployment technologies may be supported.\n\n###How to get started\nTo get started with Lambda Annotations, there is a blueprint as part of the Visual Studio AWS Toolkit for Visual Studio 2022. The steps in detail can be found here.\n\nBesides that, you can also use Lambda Annotations within your existing .NET 6 project. To get started you need [Amazon.Lambda.Annotations](https://www.nuget.org/packages/Amazon.Lambda.Annotations/) NuGet package. Then you can start using the Lambda Annotation attributes.\n","user":{"name":"aandonoska","username":"aandonoska","twitter_username":null,"github_username":"aandonoska","user_id":846975,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--MV9MbBdL--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/846975/17930ed6-e504-43b8-8d52-63289a744d38.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--UPSG9oS1--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/846975/17930ed6-e504-43b8-8d52-63289a744d38.jpeg"},"organization":{"name":"AWS Community Builders ","username":"aws-builders","slug":"aws-builders","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--zmOZQNzv--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"}}