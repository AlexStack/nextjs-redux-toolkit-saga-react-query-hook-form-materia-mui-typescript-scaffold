{"type_of":"article","id":1239442,"title":"React Native vs. Flutter -- a Comparison","description":"by Ejiro Thankgod  The two most popular frameworks for building cross-platform mobile apps are React...","readable_publish_date":"Nov 2","slug":"react-native-vs-flutter-a-comparison-29id","path":"/asayerio_techblog/react-native-vs-flutter-a-comparison-29id","url":"https://dev.to/asayerio_techblog/react-native-vs-flutter-a-comparison-29id","comments_count":1,"public_reactions_count":3,"collection_id":null,"published_timestamp":"2022-11-02T00:08:06Z","positive_reactions_count":3,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--NhNVdbC4--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k03emxg2xw6y92qpudcp.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--GC79xL5J--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k03emxg2xw6y92qpudcp.png","canonical_url":"https://blog.openreplay.com/react-native-vs-flutter--a-comparison/","created_at":"2022-11-02T00:08:07Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-02T00:08:06Z","last_comment_at":"2022-11-05T21:29:15Z","reading_time_minutes":7,"tag_list":"reactnative, flutter, mobile","tags":["reactnative","flutter","mobile"],"body_html":"<p>by <a href=\"https://blog.openreplay.com/authors/ejiro-thankgod\">Ejiro Thankgod</a></p>\n\n<p>The two most popular frameworks for building cross-platform mobile apps are React Native and Flutter. These titans are supported by Facebook and Google, two of the largest tech businesses in the world.<br>\nAccording to Statista, there are more than 6.0 billion mobile users worldwide, and 42% of developers will pick Flutter vs. 38% who will choose React for creating apps. Cordova, the third most popular framework, is only selected by 16% of users. More than 2 million developers have used Flutter, and 500,000 do so monthly. Although the numbers are awe-inspiring, many depend on how popular mobile apps are with users.</p>\n\n<h2>\n  <a name=\"what-is-react-native\" href=\"#what-is-react-native\">\n  </a>\n  What is React Native?\n</h2>\n\n<p>The Facebook-developed mobile programming framework <a href=\"https://reactnative.dev/\">React Native</a> was made public in 2015. Develop a multi-platform application that works on desktops, mobiles, and the web using React Native. React Native lowers the entry level for JavaScript developers by making it comparatively easy to create cross-platform applications with a codebase written in JavaScript.</p>\n\n<h2>\n  <a name=\"what-is-flutter\" href=\"#what-is-flutter\">\n  </a>\n  What is Flutter?\n</h2>\n\n<p>Google developed the <a href=\"https://flutter.dev/\">Flutter</a> cross-platform user interface framework. Since its original release in May 2017, Flutter's popularity has continuously increased. With it, businesses must maintain one codebase when developing apps for many platforms. The time and resources involved in developing and maintaining such software significantly decrease.</p>\n\n<h2>\n  <a name=\"the-differences-between-react-native-and-flutter\" href=\"#the-differences-between-react-native-and-flutter\">\n  </a>\n  The Differences Between React Native And Flutter\n</h2>\n\n<p>React Native and Flutter share many similarities, but they are also quite different in a handful of key ways.</p>\n\n<ul>\n<li><p><strong>Programming Language</strong> React Native uses JavaScript as its programming language, transforming JavaScript components into native components, making it easy for web developers to adapt quickly to React Native for mobile app development. Flutter uses a (not that new) language called Dart, which is less used. Dart has an object-oriented class-based system.</p></li>\n<li><p><strong>Documentation</strong> Both Flutter and React Native have the best documentation materials. The development of apps is made simple for programmers by these recommendations. React Native's documentation is less well-organized because it primarily relies on community-developed dependent libraries. The documentation for Flutter is well-produced, organized, and comprehensive. In contrast, React Native's documentation requires some explanation.</p></li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--14Hzs5LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image01.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--14Hzs5LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image01.png\" alt=\"1\" loading=\"lazy\" width=\"880\" height=\"880\"></a></p>\n\n<ul>\n<li>\n<strong>Project Size</strong> Applications built using React Native have a JavaScript runtime environment. Although they often have larger build sizes, Hermes and ProGuard can be enabled in React Native to decrease this size. However, Flutter apps typically have bigger file sizes. Flutter apps' increased build sizes compel them to occupy more space.</li>\n</ul>\n\n<h2>Open Source Session Replay</h2> \n\n<p><em><a href=\"https://github.com/openreplay/openreplay\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data.</em></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C8eIVPtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/banner-blog_1oYPGT.png\" alt=\"OpenReplay\" loading=\"lazy\" width=\"768\" height=\"400\"></a></p>\n\n<p><em>Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\">start using OpenReplay for free</a>.</em></p>\n\n<h2>\n  <a name=\"comparison-react-native-vs-flutter\" href=\"#comparison-react-native-vs-flutter\">\n  </a>\n  Comparison: React Native Vs. Flutter\n</h2>\n\n<p>We'll compare React Native Vs. Flutter, explore what makes each framework so special, and discover why they're highly sought-after. The comparison will be based on the Performance, Libraries and Packages, Community, and File Structure.</p>\n\n<h3>\n  <a name=\"performance\" href=\"#performance\">\n  </a>\n  Performance\n</h3>\n\n<p>It's difficult to say whether a Flutter or React Native app performs better. There are numerous aspects to consider, like the type of app, codebase, animations, transitions, app size, layout, data passing, the end user's phone, and more, so it will be different for every app. Both frameworks use hot reloading, which speeds up development by allowing you to see changes as soon as they are made.</p>\n\n<p>Contrarily, the Dart code used by Flutter is directly translated into C, which is as near to native as you can go. No bridges are necessary for Flutter code to communicate with native code. It is safe to believe it would improve performance, giving it an edge over React Native, but recently JavaScript bridges (which communicate with the native code and bridges them as a result constitute slow app performance) were replaced with JavaScript Interface in React Native's new architecture to address the performance issue (JSI). Without utilizing bridges, JSI enables developers to call the native module directly.</p>\n\n<p>With the help of their developer and user communities, Flutter and React Native can keep enhancing their performance. On performance, Flutter narrowly prevails right now.</p>\n\n<h3>\n  <a name=\"community\" href=\"#community\">\n  </a>\n  Community\n</h3>\n\n<p>The Flutter and React Native communities are thriving, with numerous conferences, hackathons, and events occurring every year.</p>\n\n<p>It is impossible to overstate the breadth of the community and communication avenues where you may interact with professionals and obtain assistance with your development-related question.</p>\n\n<p>Here is a comparison of each tool's most popular communication routes in more detail:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th></th>\n<th>React Native</th>\n<th>Flutter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Company</td>\n<td>Facebook</td>\n<td>Google</td>\n</tr>\n<tr>\n<td>Year Founded</td>\n<td>2015</td>\n<td>2017</td>\n</tr>\n<tr>\n<td>Github Stars</td>\n<td>104k</td>\n<td>144k</td>\n</tr>\n<tr>\n<td>Github Forks</td>\n<td>22.4k</td>\n<td>23k</td>\n</tr>\n<tr>\n<td>Language</td>\n<td>JavaScript</td>\n<td>Dart</td>\n</tr>\n<tr>\n<td>Number of Apps</td>\n<td>33k</td>\n<td>24k</td>\n</tr>\n<tr>\n<td>Github Issues</td>\n<td>1,899(21,181 Closed)</td>\n<td>10,871(61,383 Closed)</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>As you can see, the Flutter community has expanded more than the React Native community, which is significant since it indicates that Flutter developers are actively fixing more problems. You may get a sense of the speed and assiduity with which unresolved issues reported by developers are being handled by just looking at closed GitHub issues.</p>\n\n<h3>\n  <a name=\"statistical-comparison\" href=\"#statistical-comparison\">\n  </a>\n  Statistical Comparison\n</h3>\n\n<p><em>N/B: Every Data/Information are gained from</em> <a href=\"https://www.statista.com/\"><em>Statista</em></a><em>,</em> <a href=\"https://survey.stackoverflow.co/2022/#technology\"><em>Stack Overflow Survey</em></a><em>, and</em> <a href=\"https://trends.google.com/trends/?geo=NG\"><em>Google Trend</em></a>.</p>\n\n<p>Statista's most recent study states that Flutter will be the top cross-platform mobile development framework in 2021. React Native falls short of Flutter by 4% (42% versus 38% for Flutter). However, it's accurate to claim that both technologies are used almost equally. Hopefully, statistics for 2022 will be out soon.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IaeAX_Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image02.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IaeAX_Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image02.png\" alt=\"2\" loading=\"lazy\" width=\"731\" height=\"461\"></a></p>\n\n<blockquote>\n<p>Cross-platform mobile frameworks employed by developers worldwide in 2019 and 2020. Source: <a href=\"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/\">Statista</a></p>\n</blockquote>\n\n<p>As of 2021, Flutter was leading the race for \"Cross-platform mobile framework used by developers\" on Statista. But there is a current survey made for both frameworks on the recently conducted Stack Overflow Survey, and it includes 2022 statistics as well.</p>\n\n<p>According to the statistics obtained from Stack Overflow Survey, in terms of usage and popularity, Flutter was on the verge of surpassing React Native in 2021. With 0.96%, React Native took precedence over Flutter in 2021. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UTRDQb2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image03.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UTRDQb2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image03.png\" alt=\"3\" loading=\"lazy\" width=\"790\" height=\"654\"></a></p>\n\n<p>In 2022, Flutter has overthrown React Native in the popularity contest. So that technology has taken the lead.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1VsU8xcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image04.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1VsU8xcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image04.png\" alt=\"4\" loading=\"lazy\" width=\"880\" height=\"735\"></a></p>\n\n<blockquote>\n<p>In the <a href=\"https://survey.stackoverflow.co/2022/#section-most-popular-technologies-other-frameworks-and-libraries\">Stack Overflow Survey 2022</a>, Flutter beats React Native in the category \"Most Popular Technology - Other Frameworks.\"</p>\n</blockquote>\n\n<p>A close struggle between the two is evident from results from Google Trends. Flutter overtook React Native for the first time in over two years in April 2020 and has maintained that position through 2022.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_lyMUyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image05.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_lyMUyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image05.png\" alt=\"5\" loading=\"lazy\" width=\"880\" height=\"299\"></a></p>\n\n<blockquote>\n<p>Worldwide  React Native (blue) and Flutter (red) quality trend (2019–2022). Source: <a href=\"https://trends.google.com/trends/explore?date=2019-01-02%202022-01-02&amp;q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg\">Google Trends</a></p>\n</blockquote>\n\n<h3>\n  <a name=\"file-structure\" href=\"#file-structure\">\n  </a>\n  File Structure\n</h3>\n\n<p>The code structure in this part should look extremely familiar if you are already familiar with React for the web. Similar to how React projects are set up, React Native projects follow the same architecture:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tmVovFcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image06.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tmVovFcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image06.png\" alt=\"6\" loading=\"lazy\" width=\"173\" height=\"449\"></a></p>\n\n<p>The widget-based architecture of Flutter is highly distinctive when compared to conventional programming paradigms. Once you comprehend how it operates, it becomes automatic.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gaUzqAvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image07.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gaUzqAvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image07.jpeg\" alt=\"7\" loading=\"lazy\" width=\"301\" height=\"429\"></a></p>\n\n<h2>\n  <a name=\"when-to-apply-either-framework\" href=\"#when-to-apply-either-framework\">\n  </a>\n  When To Apply Either Framework\n</h2>\n\n<p>React Native and Flutter are substantial for fast styling and easy mobile app development. However, it is best to know when to use the different frameworks in developing one's project.</p>\n\n<h3>\n  <a name=\"when-to-use-react-native\" href=\"#when-to-use-react-native\">\n  </a>\n  When to use React Native\n</h3>\n\n<ul>\n<li>You can transit back and forth from a web application to a mobile application, having a single tech stack.</li>\n<li>You have a JavaScript team knowledgeable about your current assets and utilize the plug-ins, modules, and widgets from the npm repository.</li>\n<li>You need to locate a team of React Native engineers quickly (unlike Flutter developers, who are currently harder to find).</li>\n</ul>\n\n<h3>\n  <a name=\"when-to-use-flutter\" href=\"#when-to-use-flutter\">\n  </a>\n  When To Use Flutter\n</h3>\n\n<p>Flutter will function properly if: </p>\n\n<ul>\n<li>Your financial resources are limited (no need to have multiple teams for native Android and iOS development)</li>\n<li>You must quickly release your goods (short deadline)</li>\n<li>Pixel-perfect designs and other elements that make a superb UI are what you wish to have.</li>\n<li>For your users, you must offer a cross-platform experience (mobile, desktop, etc.)</li>\n</ul>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>There is no clear winner in this contest; each of Flutter and React Native has advantages and disadvantages, and the best option relies on your development background as well as the objectives and specifications of your project. Writing mobile apps in React Native makes sense if you are already familiar with JavaScript. However, you might think about giving Flutter a shot if you're hoping for improved performance, stability, and a more harmonious environment amongst ecosystems.</p>\n\n<blockquote>\n<p>A TIP FROM THE EDITOR: Compare how React Native and Flutter do notifications by reading our <a href=\"https://blog.openreplay.com/push-notifications-in-flutter-with-native-notify/\">Push Notifications In Flutter With Native Notify</a> and <a href=\"https://blog.openreplay.com/mobile-push-notifications-with-firebase/\">Mobile Push Notifications With Firebase</a> articles.</p>\n</blockquote>\n\n<p><a href=\"https://newsletter.openreplay.com/\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gxR3i5E2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.openreplay.com/newsletter_Z1P0UIP.png\" alt=\"newsletter\" loading=\"lazy\" width=\"880\" height=\"137\"></a> </p>\n\n","body_markdown":"\nby [Ejiro Thankgod](https://blog.openreplay.com/authors/ejiro-thankgod)\n\n\nThe two most popular frameworks for building cross-platform mobile apps are React Native and Flutter. These titans are supported by Facebook and Google, two of the largest tech businesses in the world.\nAccording to Statista, there are more than 6.0 billion mobile users worldwide, and 42% of developers will pick Flutter vs. 38% who will choose React for creating apps. Cordova, the third most popular framework, is only selected by 16% of users. More than 2 million developers have used Flutter, and 500,000 do so monthly. Although the numbers are awe-inspiring, many depend on how popular mobile apps are with users.\n\n## What is React Native?\n\nThe Facebook-developed mobile programming framework [React Native](https://reactnative.dev/) was made public in 2015. Develop a multi-platform application that works on desktops, mobiles, and the web using React Native. React Native lowers the entry level for JavaScript developers by making it comparatively easy to create cross-platform applications with a codebase written in JavaScript.\n\n## What is Flutter?\n\nGoogle developed the [Flutter](https://flutter.dev/) cross-platform user interface framework. Since its original release in May 2017, Flutter's popularity has continuously increased. With it, businesses must maintain one codebase when developing apps for many platforms. The time and resources involved in developing and maintaining such software significantly decrease.\n\n## The Differences Between React Native And Flutter\n\nReact Native and Flutter share many similarities, but they are also quite different in a handful of key ways.\n\n- **Programming Language** React Native uses JavaScript as its programming language, transforming JavaScript components into native components, making it easy for web developers to adapt quickly to React Native for mobile app development. Flutter uses a (not that new) language called Dart, which is less used. Dart has an object-oriented class-based system.\n\n- **Documentation** Both Flutter and React Native have the best documentation materials. The development of apps is made simple for programmers by these recommendations. React Native's documentation is less well-organized because it primarily relies on community-developed dependent libraries. The documentation for Flutter is well-produced, organized, and comprehensive. In contrast, React Native's documentation requires some explanation.\n\n![1](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image01.png)\n\n- **Project Size** Applications built using React Native have a JavaScript runtime environment. Although they often have larger build sizes, Hermes and ProGuard can be enabled in React Native to decrease this size. However, Flutter apps typically have bigger file sizes. Flutter apps' increased build sizes compel them to occupy more space.\n\n\n\n<h2>Open Source Session Replay</h2> \n\n_<a href=\"https://github.com/openreplay/openreplay\" target=\"_blank\">OpenReplay</a> is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data._\n\n![OpenReplay](https://blog.openreplay.com/banner-blog_1oYPGT.png)\n\n_Start enjoying your debugging experience - <a href=\"https://github.com/openreplay/openreplay\" >start using OpenReplay for free</a>._\n\n\n\n\n## Comparison: React Native Vs. Flutter\n\nWe'll compare React Native Vs. Flutter, explore what makes each framework so special, and discover why they're highly sought-after. The comparison will be based on the Performance, Libraries and Packages, Community, and File Structure.\n\n\n### Performance\n\nIt's difficult to say whether a Flutter or React Native app performs better. There are numerous aspects to consider, like the type of app, codebase, animations, transitions, app size, layout, data passing, the end user's phone, and more, so it will be different for every app. Both frameworks use hot reloading, which speeds up development by allowing you to see changes as soon as they are made.\n\nContrarily, the Dart code used by Flutter is directly translated into C, which is as near to native as you can go. No bridges are necessary for Flutter code to communicate with native code. It is safe to believe it would improve performance, giving it an edge over React Native, but recently JavaScript bridges (which communicate with the native code and bridges them as a result constitute slow app performance) were replaced with JavaScript Interface in React Native's new architecture to address the performance issue (JSI). Without utilizing bridges, JSI enables developers to call the native module directly.\n\nWith the help of their developer and user communities, Flutter and React Native can keep enhancing their performance. On performance, Flutter narrowly prevails right now.\n\n### Community\n\nThe Flutter and React Native communities are thriving, with numerous conferences, hackathons, and events occurring every year.\n\nIt is impossible to overstate the breadth of the community and communication avenues where you may interact with professionals and obtain assistance with your development-related question.\n\nHere is a comparison of each tool's most popular communication routes in more detail:\n\n\n|                | React Native         | Flutter               |\n| -------------- | -------------------- | --------------------- |\n| Company        | Facebook             | Google                |\n| Year Founded   | 2015                 | 2017                  |\n| Github Stars   | 104k                 | 144k                  |\n| Github Forks   | 22.4k                | 23k                   |\n| Language       | JavaScript           | Dart                  |\n| Number of Apps | 33k                  | 24k                   |\n| Github Issues  | 1,899(21,181 Closed) | 10,871(61,383 Closed) |\n\nAs you can see, the Flutter community has expanded more than the React Native community, which is significant since it indicates that Flutter developers are actively fixing more problems. You may get a sense of the speed and assiduity with which unresolved issues reported by developers are being handled by just looking at closed GitHub issues.\n\n\n### Statistical Comparison\n\n*N/B: Every Data/Information are gained from* [*Statista*](https://www.statista.com/)*,* [*Stack Overflow Survey*](https://survey.stackoverflow.co/2022/#technology)*, and* [*Google Trend*](https://trends.google.com/trends/?geo=NG).\n\nStatista's most recent study states that Flutter will be the top cross-platform mobile development framework in 2021. React Native falls short of Flutter by 4% (42% versus 38% for Flutter). However, it's accurate to claim that both technologies are used almost equally. Hopefully, statistics for 2022 will be out soon.\n\n\n![2](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image02.png)\n\n> Cross-platform mobile frameworks employed by developers worldwide in 2019 and 2020. Source: [Statista](https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/)\n\n\nAs of 2021, Flutter was leading the race for \"Cross-platform mobile framework used by developers\" on Statista. But there is a current survey made for both frameworks on the recently conducted Stack Overflow Survey, and it includes 2022 statistics as well.\n\nAccording to the statistics obtained from Stack Overflow Survey, in terms of usage and popularity, Flutter was on the verge of surpassing React Native in 2021. With 0.96%, React Native took precedence over Flutter in 2021. \n\n\n![3](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image03.png)\n\n\nIn 2022, Flutter has overthrown React Native in the popularity contest. So that technology has taken the lead.\n\n![4](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image04.png)\n\n> In the [Stack Overflow Survey 2022](https://survey.stackoverflow.co/2022/#section-most-popular-technologies-other-frameworks-and-libraries), Flutter beats React Native in the category \"Most Popular Technology - Other Frameworks.\"\n\nA close struggle between the two is evident from results from Google Trends. Flutter overtook React Native for the first time in over two years in April 2020 and has maintained that position through 2022.\n\n![5](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image05.png)\n\n> Worldwide  React Native (blue) and Flutter (red) quality trend (2019–2022). Source: [Google Trends](https://trends.google.com/trends/explore?date=2019-01-02%202022-01-02&q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg)\n\n### File Structure\n\nThe code structure in this part should look extremely familiar if you are already familiar with React for the web. Similar to how React projects are set up, React Native projects follow the same architecture:\n\n![6](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image06.png)\n\n\nThe widget-based architecture of Flutter is highly distinctive when compared to conventional programming paradigms. Once you comprehend how it operates, it becomes automatic.\n\n![7](https://blog.openreplay.com/images/react-native-vs-flutter--a-comparison/images/image07.jpeg)\n\n## When To Apply Either Framework\n\nReact Native and Flutter are substantial for fast styling and easy mobile app development. However, it is best to know when to use the different frameworks in developing one's project.\n\n###  When to use React Native\n\n- You can transit back and forth from a web application to a mobile application, having a single tech stack.\n- You have a JavaScript team knowledgeable about your current assets and utilize the plug-ins, modules, and widgets from the npm repository.\n- You need to locate a team of React Native engineers quickly (unlike Flutter developers, who are currently harder to find).\n\n### When To Use Flutter\n\nFlutter will function properly if: \n\n- Your financial resources are limited (no need to have multiple teams for native Android and iOS development)\n- You must quickly release your goods (short deadline)\n- Pixel-perfect designs and other elements that make a superb UI are what you wish to have.\n- For your users, you must offer a cross-platform experience (mobile, desktop, etc.)\n\n## Conclusion\n\nThere is no clear winner in this contest; each of Flutter and React Native has advantages and disadvantages, and the best option relies on your development background as well as the objectives and specifications of your project. Writing mobile apps in React Native makes sense if you are already familiar with JavaScript. However, you might think about giving Flutter a shot if you're hoping for improved performance, stability, and a more harmonious environment amongst ecosystems.\n\n\n> A TIP FROM THE EDITOR: Compare how React Native and Flutter do notifications by reading our [Push Notifications In Flutter With Native Notify](https://blog.openreplay.com/push-notifications-in-flutter-with-native-notify/) and [Mobile Push Notifications With Firebase](https://blog.openreplay.com/mobile-push-notifications-with-firebase/) articles.\n\n\n\n\n\n[![newsletter](https://blog.openreplay.com/newsletter_Z1P0UIP.png)](https://newsletter.openreplay.com/) \n\n\n","user":{"name":"OpenReplay Tech Blog","username":"asayerio_techblog","twitter_username":"asayerio","github_username":"fkereki-OR","user_id":571683,"website_url":"https://blog.openreplay.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cmJLpv_K--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--IJigyy1u--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571683/45e65127-c153-48fb-b5e8-f079879fe709.png"}}