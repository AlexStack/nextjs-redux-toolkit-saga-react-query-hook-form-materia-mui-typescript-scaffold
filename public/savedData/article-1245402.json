{"type_of":"article","id":1245402,"title":"JavaScript Basics| Introduction to variables and their usage.","description":"Introduction Largely every programming language has variables. Variables are storage, specifically,...","readable_publish_date":"Nov 7","slug":"javascript-basics-introduction-to-variables-and-their-usage-5aa9","path":"/annamikayelyan5/javascript-basics-introduction-to-variables-and-their-usage-5aa9","url":"https://dev.to/annamikayelyan5/javascript-basics-introduction-to-variables-and-their-usage-5aa9","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T18:49:40Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7pcAzlSd--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbz273t216ol1qwwan7f.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--btncwKfo--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbz273t216ol1qwwan7f.png","canonical_url":"https://dev.to/annamikayelyan5/javascript-basics-introduction-to-variables-and-their-usage-5aa9","created_at":"2022-11-06T09:07:53Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-07T18:49:40Z","last_comment_at":"2022-11-07T18:49:40Z","reading_time_minutes":3,"tag_list":"variables, javascript, beginners, basicsofjs","tags":["variables","javascript","beginners","basicsofjs"],"body_html":"<p><strong>Introduction</strong><br>\nLargely every programming language has variables. Variables are storage, specifically, they’re storage for data. All code is data underneath. We can store numbers, symbols, sentences, pictures, and all sorts of things inside variables. There’s a huge number of things that we can store. Each variable is identified by a unique name that we give it. You need to know about one very important thing when using variables. A variable name must have a clear meaning when it describes stored data. Variable naming is one of the important and difficult skills in programming. It’s much easier to find information when the variables have good names, that’s why you should think about the right name for a variable. The computer remembers the variable by this name exactly as we wrote it. Once we’ve made a variable, the label we give it is attached to the data stored inside of it. Then whenever we write out an identifier for the variable, the computer will understand that we are referring to the data stored inside of it. (Devmountain, 2016)</p>\n\n<h2>\n  <a name=\"types-of-variables-in-javascript\" href=\"#types-of-variables-in-javascript\">\n  </a>\n  Types of variables in JavaScript\n</h2>\n\n<p>There are three ways you can declare variables in JavaScript let, const, var</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3lqHquZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k99avbv3v0oull7d5fd.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3lqHquZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k99avbv3v0oull7d5fd.png\" alt=\"Image description\" loading=\"lazy\" width=\"803\" height=\"455\"></a><br>\nLet’s start with “var”. It originates from very old times. It’s generally not used in modern scripts but still hides in the old ones.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LU2GL1jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zy4gwmk6y0kl4e24f0b.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LU2GL1jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zy4gwmk6y0kl4e24f0b.png\" alt=\"Image description\" loading=\"lazy\" width=\"644\" height=\"219\"></a></p>\n\n<p>But times have changed and in contemporary language, the most used variables are “let” and “const”. The let keyword in Javascript was introduced in 2015 with ES6. Just like var in Javascript, “let” keyword is also used for variable declaration. But the only difference is the variable declared with the “let” keyword is block-scoped and local variable*.<br>\nAnd the last variable is “const”. Constants are block-scoped, much like variables declared using the let keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared. However, if a constant is an object or array its properties or items can be updated or removed. The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable—just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered. Also, a constant cannot share its name with a function or a variable in the same scope.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F4k4b88j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux1mhnv0y3e045vzinrz.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F4k4b88j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux1mhnv0y3e045vzinrz.png\" alt=\"Image description\" loading=\"lazy\" width=\"880\" height=\"528\"></a></p>\n\n<h2>\n  <a name=\"visibility-of-variables\" href=\"#visibility-of-variables\">\n  </a>\n  Visibility of Variables\n</h2>\n\n<p>A variable is always valid for a certain area. This is the area where it is known and where it can be used. Why would you want to limit the visibility of a variable? For maximum flexibility, wouldn't it be handy if all variables were potentially visible everywhere? As it happens, that arrangement would be too flexible: everywhere in the program, you would have to keep track of the names of all the variables declared anywhere else in the program, so that you didn't accidentally re-use one. Whenever a variable had the wrong value by mistake, you'd have to search the entire program for the bug, because any statement in the entire program could potentially have modified that variable. You would constantly be stepping all over yourself by using a common variable name like i in two parts of your program, and having one snippet of code accidentally overwrite the values being used by another part of the code. The communication would be sort of like an old party line--you'd always be accidentally interrupting other conversations, or having your conversations interrupted.<br>\nTo avoid this confusion, we generally give variables the narrowest or smallest visibility they need. A variable declared within the braces {} of a function is visible only within that function; variables declared within functions are called local variables. If another function somewhere else declares a local variable with the same name, it's a different variable entirely, and the two don't clash with each other.</p>\n\n<p><strong>Changing the visibility</strong><br>\nYou can explicitly change the visibility of a variable. This can be useful in situations where you don't want to use particular project or task variables in templates.</p>\n\n<p>To sum up, this is a very important topic to start learning any programming language. Consider this post as the start of your learning process and put effort watching videos and reading more articles. I leave below some links to videos that were useful for me and I am sure will help to understand the details.</p>\n\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=L9-3VBOjNH4\">https://www.youtube.com/watch?v=L9-3VBOjNH4</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TOkU5HxES1o\">https://www.youtube.com/watch?v=TOkU5HxES1o</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=edlFjlzxkSI\">https://www.youtube.com/watch?v=edlFjlzxkSI</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nAWAnn9y8yw\">https://www.youtube.com/watch?v=nAWAnn9y8yw</a></li>\n</ol>\n\n","body_markdown":"**Introduction**\nLargely every programming language has variables. Variables are storage, specifically, they’re storage for data. All code is data underneath. We can store numbers, symbols, sentences, pictures, and all sorts of things inside variables. There’s a huge number of things that we can store. Each variable is identified by a unique name that we give it. You need to know about one very important thing when using variables. A variable name must have a clear meaning when it describes stored data. Variable naming is one of the important and difficult skills in programming. It’s much easier to find information when the variables have good names, that’s why you should think about the right name for a variable. The computer remembers the variable by this name exactly as we wrote it. Once we’ve made a variable, the label we give it is attached to the data stored inside of it. Then whenever we write out an identifier for the variable, the computer will understand that we are referring to the data stored inside of it. (Devmountain, 2016)\n\n## Types of variables in JavaScript\n\nThere are three ways you can declare variables in JavaScript let, const, var\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k99avbv3v0oull7d5fd.png)\nLet’s start with “var”. It originates from very old times. It’s generally not used in modern scripts but still hides in the old ones.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zy4gwmk6y0kl4e24f0b.png)\n\nBut times have changed and in contemporary language, the most used variables are “let” and “const”. The let keyword in Javascript was introduced in 2015 with ES6. Just like var in Javascript, “let” keyword is also used for variable declaration. But the only difference is the variable declared with the “let” keyword is block-scoped and local variable*.\nAnd the last variable is “const”. Constants are block-scoped, much like variables declared using the let keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared. However, if a constant is an object or array its properties or items can be updated or removed. The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable—just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered. Also, a constant cannot share its name with a function or a variable in the same scope.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux1mhnv0y3e045vzinrz.png)\n\n\n \n\n## Visibility of Variables\nA variable is always valid for a certain area. This is the area where it is known and where it can be used. Why would you want to limit the visibility of a variable? For maximum flexibility, wouldn't it be handy if all variables were potentially visible everywhere? As it happens, that arrangement would be too flexible: everywhere in the program, you would have to keep track of the names of all the variables declared anywhere else in the program, so that you didn't accidentally re-use one. Whenever a variable had the wrong value by mistake, you'd have to search the entire program for the bug, because any statement in the entire program could potentially have modified that variable. You would constantly be stepping all over yourself by using a common variable name like i in two parts of your program, and having one snippet of code accidentally overwrite the values being used by another part of the code. The communication would be sort of like an old party line--you'd always be accidentally interrupting other conversations, or having your conversations interrupted.\nTo avoid this confusion, we generally give variables the narrowest or smallest visibility they need. A variable declared within the braces {} of a function is visible only within that function; variables declared within functions are called local variables. If another function somewhere else declares a local variable with the same name, it's a different variable entirely, and the two don't clash with each other.\n\n**Changing the visibility**\nYou can explicitly change the visibility of a variable. This can be useful in situations where you don't want to use particular project or task variables in templates.\n\nTo sum up, this is a very important topic to start learning any programming language. Consider this post as the start of your learning process and put effort watching videos and reading more articles. I leave below some links to videos that were useful for me and I am sure will help to understand the details.\n\n1. https://www.youtube.com/watch?v=L9-3VBOjNH4\n2. https://www.youtube.com/watch?v=TOkU5HxES1o\n3. https://www.youtube.com/watch?v=edlFjlzxkSI\n4. https://www.youtube.com/watch?v=nAWAnn9y8yw\n\n\n\n\n\n\n","user":{"name":"Anna Mikayelyan","username":"annamikayelyan5","twitter_username":"AnnaMikayelyan5","github_username":null,"user_id":922605,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--GMxoujgf--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/922605/876612cf-b968-430b-8891-18adbfb6928e.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--ND-CwngB--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/922605/876612cf-b968-430b-8891-18adbfb6928e.jpg"}}