{"type_of":"article","id":1243113,"title":"Stripe Identity: ID Authentication Made Simple","description":"by Jan Jaworski           What is Stripe Identity?   There’s no easier way to verify identities than...","readable_publish_date":"Nov 4","slug":"stripe-identity-id-authentication-made-simple-4j7k","path":"/callstackengineers/stripe-identity-id-authentication-made-simple-4j7k","url":"https://dev.to/callstackengineers/stripe-identity-id-authentication-made-simple-4j7k","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-04T12:00:47Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cLIn-AeA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb6mtdb2g8x9s1l0sqi8.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EfezBEem--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb6mtdb2g8x9s1l0sqi8.jpg","canonical_url":"https://www.callstack.com/blog/stripe-identity-id-authentication-made-simple","created_at":"2022-11-04T12:00:47Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-04T12:00:47Z","last_comment_at":"2022-11-04T12:00:47Z","reading_time_minutes":5,"tag_list":"reactnative, security, identitycheck","tags":["reactnative","security","identitycheck"],"body_html":"<p>by <a href=\"https://www.callstack.com/team/jan-jaworski\">Jan Jaworski</a></p>\n\n<h2>\n  <a name=\"what-is-stripe-identity\" href=\"#what-is-stripe-identity\">\n  </a>\n  What is Stripe Identity?\n</h2>\n\n<p>There’s no easier way to verify identities than <a href=\"https://stripe.com/identity\">Stripe Identity</a>. It lets you programmatically confirm the identity of users around the globe by scanning an image of an official form of ID, so you can prevent attacks from fraudsters while minimizing friction for legitimate payments.</p>\n\n<p>Stripe Identity is an <a href=\"https://www.callstack.com/open-source\">open source</a> React Native wrapper for the native Stripe SDKs. The idea is to compare your Face ID with images of you and your IDs by means of biometric technology. </p>\n\n<p>With the Stripe Identity React Native SDK, you can confidently verify the authenticity of ID documents from over 33 countries in your React Native application.</p>\n\n<h2>\n  <a name=\"how-to-use-the-stripe-identity-react-native-sdk\" href=\"#how-to-use-the-stripe-identity-react-native-sdk\">\n  </a>\n  How to use the Stripe Identity React Native SDK\n</h2>\n\n<p>To verify your user’s identity, you need to have a document upload sheet displayed in your application. There are few steps to do that. First of all, you have to install <a href=\"https://github.com/stripe/stripe-identity-react-native\">Stripe Identity React Native SDK</a>.</p>\n\n<p>The next step is to set up a server to create a VerificationSession, which is the programmatic representation of the verification. For security reasons, the VerificationSession API is not directly accessible from the mobile client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the VerificationSession API. </p>\n\n<p>You can think of an ephemeral key as a session authorizing the SDK to retrieve and update a specific VerificationSession object for the duration of the session. After successfully creating a VerificationSession and ephemeral key, send the VerificationSession id and ephemeral key secret to the client to show the document upload sheet. </p>\n\n<p>The third step is to show the “document upload” sheet to the user. With Stripe Identity React Native, you can do this in two ways - via a hook called useStripeIdentity, or a method called presentIdentityVerificationSheet. That depends on whether you want to use it in functional or class based components.</p>\n\n<p>You can find example code in the <a href=\"https://github.com/stripe/stripe-identity-react-native\">repository</a> or <a href=\"https://github.com/stripe/stripe-identity-react-native\">integration guide</a>.</p>\n\n<h2>\n  <a name=\"getting-started-with-the-usestripeidentity-hook\" href=\"#getting-started-with-the-usestripeidentity-hook\">\n  </a>\n  Getting started with the useStripeIdentity hook\n</h2>\n\n<p>The easiest way to use the SDK is to import the useStripeIdentity hook directly in a functional component. You should pass the necessary information you fetched from your server directly to the hook.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from \"react\";\nimport { View, Button, Text, Image } from \"react-native\";\nimport { useStripeIdentity } from \"@stripe/stripe-identity-react-native\";\n\n// brand logo that needs to be passed to Stripe Identity hook\nimport logo from \"./assets/{{YOUR_BRAND_LOGO}}.png\";\n\n// simplified example of fetch function for Stripe Identity\n// it can be replaced with more robust implementation that handles error handling, analytics, etc.\n// other fetching libraries like Axios can be used as a replacement for native fetch()\nconst fetchVerificationSessionParams = async () =&gt; {\n try {\n   const data = await fetch(\n     `${YOUR_SERVER_BASE_URL}/create-verification-session`,\n     {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\"\n       }\n     }\n   );\n   const json = await data.json();\n   return json;\n } catch (e) {\n   return {};\n }\n };\n\n// options needed to make correct request to Stripe Identity\nconst fetchOptions = async () =&gt; {\n const response = await fetchVerificationSessionParams();\n return {\n   sessionId: response.id,\n   ephemeralKeySecret: response.ephemeral_key_secret,\n   brandLogo: Image.resolveAssetSource(logo)\n };\n};\n\nfunction VerifyScreen() {\n // hook provided by Stripe Identity SDK allows API consumers to get important states and values without too much work from their side.\n const { status, present, loading } = useStripeIdentity(fetchOptions);\n\n return (\n   &lt;View&gt;\n     &lt;Button title=\"Verify\" disabled={loading} onPress={present} /&gt;\n     &lt;Text&gt;Status: {status}&lt;/Text&gt;\n   &lt;/View&gt;\n );\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://gist.github.com/callstack-bot/3bae84b3a6a30b6ccb2b383641c158b1#file-code-snippet-1-javascript\">code snippet 1.javascript</a> hosted with ❤ by GitHub</p>\n\n<p>The hook returns 3 fields: <strong>status</strong> (FlowCompleted, FlowCanceled, FlowFailed), <strong>loading</strong> boolean, or <strong>error</strong>, and a method: present. Use the <strong>present</strong> method to display a document verification sheet. Clicking the verify button will open a native modal view.</p>\n\n<h2>\n  <a name=\"using-the-stripe-identity-sdk-without-hooks\" href=\"#using-the-stripe-identity-sdk-without-hooks\">\n  </a>\n  Using the Stripe Identity SDK without hooks\n</h2>\n\n<p>If you use class-based components or prefer to implement the SDK without using hooks in your RN application, you can import an async method called presentIdentityVerificationSheet and prepare your own implementation. You will pass the same parameters as with functional components. </p>\n\n<p>This method returns a status and an optional error.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React from \"react\";\nimport { View, Button, Text } from \"react-native\";\nimport { presentIdentityVerificationSheet } from \"@stripe/stripe-identity-react-native\";\n\nconst fetchVerificationSessionParams = async () =&gt; {\n //  same implementation as in function component\n};\n\nconst fetchOptions = async () =&gt; {\n //  same implementation as in function component\n};\n\nclass VerifyScreen extends React.Component {\n constructor(props) {\n   super(props);\n   this.state = { loading: false, status: undefined, error: undefined };\n }\n\n present = async () =&gt; {\n   // without provided hooks implementation user has to manage error and loading states manually\n   this.setState({ loading: true });\n   const options = await fetchOptions();\n   this.setState({ loading: false });\n   const { status, error } = await presentIdentityVerificationSheet(options);\n   this.setState({ status, error });\n };\n\n render() {\n   return (\n     &lt;View&gt;\n       &lt;View&gt;\n         {this.state.loading ? (\n           &lt;View&gt;\n             &lt;Text&gt;Loading...&lt;/Text&gt;\n           &lt;/View&gt;\n         ) : (\n           &lt;Button title=\"Verify Identity\" onPress={this.present} /&gt;\n         )}\n       &lt;/View&gt;\n       &lt;Text&gt;Status: {this.state.status}&lt;/Text&gt;\n     &lt;/View&gt;\n   );\n }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://gist.github.com/callstack-bot/c4a926e875fe4053fd007a6f7cc38d5b#file-code-snippet-2-javascript\">code snippet 2.javascript</a> hosted with ❤ by GitHub</p>\n\n<h2>\n  <a name=\"verifying-results\" href=\"#verifying-results\">\n  </a>\n  Verifying results\n</h2>\n\n<p>Based on the status (FlowCompleted, FlowCancelled, FlowFails), you'll need to handle these outcomes in your application. Please refer to the <a href=\"https://stripe.com/docs/identity/handle-verification-outcomes\">official documentation</a> to read more about setting up a webhook flow.</p>\n\n<h2>\n  <a name=\"error-handling\" href=\"#error-handling\">\n  </a>\n  Error handling\n</h2>\n\n<p>When implementing such a critical feature for your app, it is important to correctly implement error handling and provide users with clear information about the source of the issue and how they should proceed. If the error is on their side, your application should tell the user what to do to fix the problem. If the problem is due to code or server issues, there should be a clear message saying it.</p>\n\n<p>Stripe Identity SDK provides a number of statuses and messages that can be used to create robust error handling implementation in your application.</p>\n\n<p>Both <code>useStripeIdentity</code> and <code>presentIdentityVerificationSheet</code> provide you with information about the errors.</p>\n\n<h2>\n  <a name=\"typescript-support\" href=\"#typescript-support\">\n  </a>\n  TypeScript support\n</h2>\n\n<p>Stripe Identity React Native SDK provides TypeScript support - it’s actually written in TypeScript. If you use it in your RN project, you can also use the types that SDK provided - StripeError and IdentityVerificationSheetStatus. Both can be useful while using the method presentIdentityVerificationSheet.</p>\n\n<h2>\n  <a name=\"stripe-identity-features\" href=\"#stripe-identity-features\">\n  </a>\n  Stripe Identity features\n</h2>\n\n<p>Stripe Identity SDK offers a number of features that allow you to quickly introduce identity verification in your app. It ensures a secure and law-compliant implementation that should cover most of you and your users’ needs.</p>\n\n<h2>\n  <a name=\"simplified-security\" href=\"#simplified-security\">\n  </a>\n  Simplified security\n</h2>\n\n<p>It’s simple for you to securely collect your user’s personally identifiable information (PII) such as identity document images. Sensitive PII data is sent directly to Stripe Identity instead of passing through your server. More information in the <a href=\"https://stripe.com/docs/security\">integration security guide</a>.</p>\n\n<h2>\n  <a name=\"automatic-document-capture\" href=\"#automatic-document-capture\">\n  </a>\n  Automatic document capture\n</h2>\n\n<p>We automatically capture images of the front and back of government-issued photo ID to ensure a clear and readable image.</p>\n\n<h2>\n  <a name=\"prebuilt-ui\" href=\"#prebuilt-ui\">\n  </a>\n  Prebuilt UI\n</h2>\n\n<p>We provide <a href=\"https://stripe.com/docs/security\">IdentityVerificationSheet</a>, a prebuilt UI that combines all the steps required to collect ID documents, selfies, and ID numbers into a single sheet that displays on top of your app.</p>\n\n<h2>\n  <a name=\"automated-verification\" href=\"#automated-verification\">\n  </a>\n  Automated verification\n</h2>\n\n<p>Stripe Identity's automated verification technology looks for patterns to help determine if an ID document is real or fake and uses distinctive physiological characteristics of faces to match your users' selfies to photos on their ID document.</p>\n\n<p>Collected identity information is checked against a global set of databases to confirm that it exists. Learn more about the <a href=\"https://stripe.com/docs/identity/verification-checks\">verification checks</a> supported by Stripe Identity, <a href=\"https://stripe.com/docs/identity/verification-checks\">accessing verification results</a>, or integration guide on <a href=\"https://stripe.com/docs/identity/access-verification-results\">handling verification outcomes</a>.</p>\n\n<h2>\n  <a name=\"summary\" href=\"#summary\">\n  </a>\n  Summary\n</h2>\n\n<p>Stripe Identity was born to make the ID verification process faster and more efficient. Thanks to the technology used, online businesses can easily confirm their users’ identities. It’s a great convenience and, most importantly, a viable safety measure that should be widely adopted.</p>\n\n<p><em>This article was originally published at <a href=\"https://www.callstack.com/blog/stripe-identity-id-authentication-made-simple\">callstack.com</a> on October 28, 2022.</em></p>\n\n","body_markdown":"by [Jan Jaworski](https://www.callstack.com/team/jan-jaworski)\n\n## What is Stripe Identity?\nThere’s no easier way to verify identities than [Stripe Identity](https://stripe.com/identity). It lets you programmatically confirm the identity of users around the globe by scanning an image of an official form of ID, so you can prevent attacks from fraudsters while minimizing friction for legitimate payments.\n\nStripe Identity is an [open source](https://www.callstack.com/open-source) React Native wrapper for the native Stripe SDKs. The idea is to compare your Face ID with images of you and your IDs by means of biometric technology. \n\nWith the Stripe Identity React Native SDK, you can confidently verify the authenticity of ID documents from over 33 countries in your React Native application.\n\n## How to use the Stripe Identity React Native SDK\nTo verify your user’s identity, you need to have a document upload sheet displayed in your application. There are few steps to do that. First of all, you have to install [Stripe Identity React Native SDK](https://github.com/stripe/stripe-identity-react-native).\n\nThe next step is to set up a server to create a VerificationSession, which is the programmatic representation of the verification. For security reasons, the VerificationSession API is not directly accessible from the mobile client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the VerificationSession API. \n\nYou can think of an ephemeral key as a session authorizing the SDK to retrieve and update a specific VerificationSession object for the duration of the session. After successfully creating a VerificationSession and ephemeral key, send the VerificationSession id and ephemeral key secret to the client to show the document upload sheet. \n\nThe third step is to show the “document upload” sheet to the user. With Stripe Identity React Native, you can do this in two ways - via a hook called useStripeIdentity, or a method called presentIdentityVerificationSheet. That depends on whether you want to use it in functional or class based components.\n\nYou can find example code in the [repository](https://github.com/stripe/stripe-identity-react-native) or [integration guide](https://github.com/stripe/stripe-identity-react-native).\n\n## Getting started with the useStripeIdentity hook\nThe easiest way to use the SDK is to import the useStripeIdentity hook directly in a functional component. You should pass the necessary information you fetched from your server directly to the hook.\n\n```\nimport React from \"react\";\nimport { View, Button, Text, Image } from \"react-native\";\nimport { useStripeIdentity } from \"@stripe/stripe-identity-react-native\";\n\n// brand logo that needs to be passed to Stripe Identity hook\nimport logo from \"./assets/{{YOUR_BRAND_LOGO}}.png\";\n\n// simplified example of fetch function for Stripe Identity\n// it can be replaced with more robust implementation that handles error handling, analytics, etc.\n// other fetching libraries like Axios can be used as a replacement for native fetch()\nconst fetchVerificationSessionParams = async () => {\n try {\n   const data = await fetch(\n     `${YOUR_SERVER_BASE_URL}/create-verification-session`,\n     {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\"\n       }\n     }\n   );\n   const json = await data.json();\n   return json;\n } catch (e) {\n   return {};\n }\n };\n\n// options needed to make correct request to Stripe Identity\nconst fetchOptions = async () => {\n const response = await fetchVerificationSessionParams();\n return {\n   sessionId: response.id,\n   ephemeralKeySecret: response.ephemeral_key_secret,\n   brandLogo: Image.resolveAssetSource(logo)\n };\n};\n\nfunction VerifyScreen() {\n // hook provided by Stripe Identity SDK allows API consumers to get important states and values without too much work from their side.\n const { status, present, loading } = useStripeIdentity(fetchOptions);\n\n return (\n   <View>\n     <Button title=\"Verify\" disabled={loading} onPress={present} />\n     <Text>Status: {status}</Text>\n   </View>\n );\n}\n```\n[code snippet 1.javascript](https://gist.github.com/callstack-bot/3bae84b3a6a30b6ccb2b383641c158b1#file-code-snippet-1-javascript) hosted with ❤ by GitHub\n\nThe hook returns 3 fields: **status** (FlowCompleted, FlowCanceled, FlowFailed), **loading** boolean, or **error**, and a method: present. Use the **present** method to display a document verification sheet. Clicking the verify button will open a native modal view.\n\n## Using the Stripe Identity SDK without hooks\nIf you use class-based components or prefer to implement the SDK without using hooks in your RN application, you can import an async method called presentIdentityVerificationSheet and prepare your own implementation. You will pass the same parameters as with functional components. \n\nThis method returns a status and an optional error.\n\n```\nimport React from \"react\";\nimport { View, Button, Text } from \"react-native\";\nimport { presentIdentityVerificationSheet } from \"@stripe/stripe-identity-react-native\";\n\nconst fetchVerificationSessionParams = async () => {\n //  same implementation as in function component\n};\n\nconst fetchOptions = async () => {\n //  same implementation as in function component\n};\n\nclass VerifyScreen extends React.Component {\n constructor(props) {\n   super(props);\n   this.state = { loading: false, status: undefined, error: undefined };\n }\n\n present = async () => {\n   // without provided hooks implementation user has to manage error and loading states manually\n   this.setState({ loading: true });\n   const options = await fetchOptions();\n   this.setState({ loading: false });\n   const { status, error } = await presentIdentityVerificationSheet(options);\n   this.setState({ status, error });\n };\n\n render() {\n   return (\n     <View>\n       <View>\n         {this.state.loading ? (\n           <View>\n             <Text>Loading...</Text>\n           </View>\n         ) : (\n           <Button title=\"Verify Identity\" onPress={this.present} />\n         )}\n       </View>\n       <Text>Status: {this.state.status}</Text>\n     </View>\n   );\n }\n}\n```\n[code snippet 2.javascript](https://gist.github.com/callstack-bot/c4a926e875fe4053fd007a6f7cc38d5b#file-code-snippet-2-javascript) hosted with ❤ by GitHub\n\n## Verifying results\nBased on the status (FlowCompleted, FlowCancelled, FlowFails), you'll need to handle these outcomes in your application. Please refer to the [official documentation](https://stripe.com/docs/identity/handle-verification-outcomes) to read more about setting up a webhook flow.\n\n## Error handling\nWhen implementing such a critical feature for your app, it is important to correctly implement error handling and provide users with clear information about the source of the issue and how they should proceed. If the error is on their side, your application should tell the user what to do to fix the problem. If the problem is due to code or server issues, there should be a clear message saying it.\n\nStripe Identity SDK provides a number of statuses and messages that can be used to create robust error handling implementation in your application.\n\nBoth `useStripeIdentity` and `presentIdentityVerificationSheet` provide you with information about the errors.\n\n## TypeScript support\nStripe Identity React Native SDK provides TypeScript support - it’s actually written in TypeScript. If you use it in your RN project, you can also use the types that SDK provided - StripeError and IdentityVerificationSheetStatus. Both can be useful while using the method presentIdentityVerificationSheet.\n\n## Stripe Identity features\nStripe Identity SDK offers a number of features that allow you to quickly introduce identity verification in your app. It ensures a secure and law-compliant implementation that should cover most of you and your users’ needs.\n\n## Simplified security\nIt’s simple for you to securely collect your user’s personally identifiable information (PII) such as identity document images. Sensitive PII data is sent directly to Stripe Identity instead of passing through your server. More information in the [integration security guide](https://stripe.com/docs/security).\n\n## Automatic document capture\nWe automatically capture images of the front and back of government-issued photo ID to ensure a clear and readable image.\n\n## Prebuilt UI\nWe provide [IdentityVerificationSheet](https://stripe.com/docs/security), a prebuilt UI that combines all the steps required to collect ID documents, selfies, and ID numbers into a single sheet that displays on top of your app.\n\n## Automated verification\nStripe Identity's automated verification technology looks for patterns to help determine if an ID document is real or fake and uses distinctive physiological characteristics of faces to match your users' selfies to photos on their ID document.\n\nCollected identity information is checked against a global set of databases to confirm that it exists. Learn more about the [verification checks](https://stripe.com/docs/identity/verification-checks) supported by Stripe Identity, [accessing verification results](https://stripe.com/docs/identity/verification-checks), or integration guide on [handling verification outcomes](https://stripe.com/docs/identity/access-verification-results).\n\n## Summary\nStripe Identity was born to make the ID verification process faster and more efficient. Thanks to the technology used, online businesses can easily confirm their users’ identities. It’s a great convenience and, most importantly, a viable safety measure that should be widely adopted.\n\n_This article was originally published at [callstack.com](https://www.callstack.com/blog/stripe-identity-id-authentication-made-simple) on October 28, 2022._","user":{"name":"Callstack Engineers","username":"callstackengineers","twitter_username":"callstackio","github_username":null,"user_id":623378,"website_url":"https://callstack.com/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--YEoLpaaE--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/623378/12c5dee1-efe0-404d-8fe4-20130c332536.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--BOV6_P87--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/623378/12c5dee1-efe0-404d-8fe4-20130c332536.png"}}