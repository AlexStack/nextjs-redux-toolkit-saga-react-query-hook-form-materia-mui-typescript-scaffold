{"type_of":"article","id":1241941,"title":"UI testing safe checks on Appium","description":"The User Interface (UI) of an app is the visual representation of your app and what the users largely...","readable_publish_date":"Nov 3","slug":"ui-testing-safe-checks-on-appium-54ke","path":"/benthemobileguy/ui-testing-safe-checks-on-appium-54ke","url":"https://dev.to/benthemobileguy/ui-testing-safe-checks-on-appium-54ke","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-03T16:46:33Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1241941.png","canonical_url":"https://dev.to/benthemobileguy/ui-testing-safe-checks-on-appium-54ke","created_at":"2022-11-03T16:46:33Z","edited_at":"2022-11-03T17:00:12Z","crossposted_at":null,"published_at":"2022-11-03T16:46:33Z","last_comment_at":"2022-11-03T16:46:33Z","reading_time_minutes":1,"tag_list":"appium, reactnative, javascript","tags":["appium","reactnative","javascript"],"body_html":"<p>The User Interface (UI) of an app is the visual representation of your app and what the users largely interact with. A glitchy UI interpretation of your app can negatively impact your brand, this makes UI testing a necessity before an application can be released to production.</p>\n\n<p>This article is aimed at exploring some automated UI testing safe checks we can use to ensure our UI implementation is predictable and more solid.</p>\n\n<p>Note: All approaches will be focused with Appium (an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms ).</p>\n\n<p><strong>Check visibility of elements</strong></p>\n\n<p>Lets say you want to check for a visibility of a splash screen, you can check if the screen is displayed using isDisplayed() method.</p>\n\n<p><code>List&lt;MobileElement&gt; element = <br>\ndriver.findElementsByAccessibilityId(\"automation id here\"); <br>\nif(element.size()&gt;0){<br>\n//screen is displayed <br>\n} else{ <br>\n//screen is not displayed }<br>\nKeyboard visible</code></p>\n\n<p>In Appium, we can use the isKeyboardShown keyword to ascertain whether or not the soft keyboard is shown.<br>\n<code><br>\ndriver = new AndroidDriver(appiumURL, capabilities); <br>\nboolean isDisplayed = driver.isKeyboardShown();</code></p>\n\n<p><strong>Element over element</strong></p>\n\n<p>Also, in case we want to check if an element is inside another element, we can use an approach like this.</p>\n\n<p><code>private WebElement element= <br>\ndriver.findElementByAccessibilityId(\"First element\")<br>\nfindElementByAccessibilityId(\"Second element\");</code></p>\n\n<p><strong>Further Reading</strong></p>\n\n<p><a href=\"https://appium.io/docs/en/commands/device/keys/is-keyboard-shown/\">Is Keyboard Shown — Appium</a></p>\n\n<p><a href=\"https://blog.logrocket.com/testing-your-react-native-app-with-appium/\">Testing your React Native app with Appium — LogRocket Blog</a></p>\n\n<p><a href=\"https://blog.codemagic.io/mobile-testing-appium-react-native-apps/\">Appium mobile testing — test React Native apps | Codemagic Blog</a></p>\n\n","body_markdown":"The User Interface (UI) of an app is the visual representation of your app and what the users largely interact with. A glitchy UI interpretation of your app can negatively impact your brand, this makes UI testing a necessity before an application can be released to production.\n\nThis article is aimed at exploring some automated UI testing safe checks we can use to ensure our UI implementation is predictable and more solid.\n\nNote: All approaches will be focused with Appium (an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms ).\n\n**Check visibility of elements**\n\nLets say you want to check for a visibility of a splash screen, you can check if the screen is displayed using isDisplayed() method.\n\n\n`List<MobileElement> element = \ndriver.findElementsByAccessibilityId(\"automation id here\"); \nif(element.size()>0){\n//screen is displayed \n} else{ \n//screen is not displayed }\nKeyboard visible`\n\nIn Appium, we can use the isKeyboardShown keyword to ascertain whether or not the soft keyboard is shown.\n`\ndriver = new AndroidDriver(appiumURL, capabilities); \nboolean isDisplayed = driver.isKeyboardShown();`\n\n**Element over element**\n\nAlso, in case we want to check if an element is inside another element, we can use an approach like this.\n\n`private WebElement element= \ndriver.findElementByAccessibilityId(\"First element\")\nfindElementByAccessibilityId(\"Second element\");`\n\n**Further Reading**\n\n[Is Keyboard Shown — Appium](https://appium.io/docs/en/commands/device/keys/is-keyboard-shown/)\n\n[Testing your React Native app with Appium — LogRocket Blog](https://blog.logrocket.com/testing-your-react-native-app-with-appium/)\n\n[Appium mobile testing — test React Native apps | Codemagic Blog](https://blog.codemagic.io/mobile-testing-appium-react-native-apps/)","user":{"name":"Ben Chukwuma","username":"benthemobileguy","twitter_username":null,"github_username":"benthemobileguy","user_id":964348,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--KPJKvb1A--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/964348/1c26c80e-9d2c-4a2f-82ad-f769ded0c5ad.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--g4_jCxeI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/964348/1c26c80e-9d2c-4a2f-82ad-f769ded0c5ad.jpeg"}}