{"type_of":"article","id":1244530,"title":"Testing with Prisma","description":"I have recently been experimenting with full stack app development using next.js and prisma. By the...","readable_publish_date":"Nov 5","slug":"testing-with-prisma-3eo8","path":"/moekidev/testing-with-prisma-3eo8","url":"https://dev.to/moekidev/testing-with-prisma-3eo8","comments_count":0,"public_reactions_count":1,"collection_id":null,"published_timestamp":"2022-11-05T13:16:06Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1244530.png","canonical_url":"https://dev.to/moekidev/testing-with-prisma-3eo8","created_at":"2022-11-05T13:16:06Z","edited_at":"2022-11-05T13:53:58Z","crossposted_at":null,"published_at":"2022-11-05T13:16:06Z","last_comment_at":"2022-11-05T13:16:06Z","reading_time_minutes":3,"tag_list":"prisma, postgres, react, testing","tags":["prisma","postgres","react","testing"],"body_html":"<p>I have recently been experimenting with full stack app development using next.js and prisma. By the way, take a look at the prisma documentation.</p>\n\n<p><a href=\"https://www.prisma.io/docs/guides/testing/integration-testing\">Integration testing with Prisma</a></p>\n\n<blockquote>\n<p>One way to simulate a real world environment is to use Docker to encapsulate a database and some test data. This can be spun up and torn down with the tests and so operate as an isolated environment away from your production databases.</p>\n\n<p>This guide assumes you have Docker and Docker Compose installed on your machine as well as Jest setup in your project.</p>\n</blockquote>\n\n<p>I see what you're saying, but... Do you want to prepare that much for testing? I want to run tests more easily and nimbly.</p>\n\n<p>And this is important, because the documentation does not tell us how to clean up the database easily for each test case, which makes the tests independent and changes their behavior depending on the order of the tests.</p>\n\n<p>So let's do it.</p>\n\n<p>In this case, we have prepared the following schema.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DB_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx prisma generate\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>First, we can use Dotenv to specify the URL of the database for testing.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm i -D dotenv\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># .env.test\nDB_URL=postgresql://user:password@127.0.0.1:5432/example-test\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Next, we will define the test process. Here, let's use the \"pre\" and \"post\" functions of script.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"pretest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"pg_ctl -D db/pgdata start &amp;&amp; dotenv -e .env.test -- prisma migrate dev\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"dotenv -e .env.test -- mocha\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"posttest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"pg_ctl -D db/pgdata stop\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The point here is to use Dotenv's API to use <code>.env.test</code>.</p>\n\n<p>The last thing we need to do is clean up the database, which is the first thing we applied for. In the case of mocha, this is done with beforeEach, afterEach.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">PrismaClient</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@prisma/client</span><span class=\"dl\">'</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">PrismaCleaner</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">prisma</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PrismaClient</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">prisma</span> <span class=\"o\">=</span> <span class=\"nx\">prisma</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">propertyNames</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertyNames</span><span class=\"p\">(</span><span class=\"nx\">prisma</span><span class=\"p\">)</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">modelNames</span> <span class=\"o\">=</span> <span class=\"nx\">propertyNames</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">((</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isModelName</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">async</span> <span class=\"nx\">clean</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Database cleaning...`</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">modelNames</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">modelName</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">prisma</span><span class=\"p\">[</span><span class=\"nx\">modelName</span><span class=\"p\">].</span><span class=\"nx\">deleteMany</span><span class=\"p\">())</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/**\n   * @param {String} name\n   * @returns {Boolean}\n   */</span>\n  <span class=\"nx\">isModelName</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/^</span><span class=\"se\">(</span><span class=\"sr\">_|</span><span class=\"se\">\\$)</span><span class=\"sr\">/</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">assert</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">assert</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">PrismaCleaner</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../index.js</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">PrismaClient</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@prisma/client</span><span class=\"dl\">'</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">prisma</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PrismaClient</span><span class=\"p\">()</span>\n<span class=\"kd\">const</span> <span class=\"nx\">cleaner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PrismaCleaner</span><span class=\"p\">()</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">prisma-cleaner</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nx\">cleaner</span><span class=\"p\">.</span><span class=\"nx\">clean</span><span class=\"p\">()</span> <span class=\"err\">#</span> <span class=\"nx\">This</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">afterEach</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">await</span> <span class=\"nx\">cleaner</span><span class=\"p\">.</span><span class=\"nx\">clean</span><span class=\"p\">()</span> <span class=\"err\">#</span> <span class=\"nx\">This</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">first creation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">creates a user</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">prisma</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">John Lenon</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n          <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">john@example.com</span><span class=\"dl\">'</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n      <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">John Lenon</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">second creation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">creates a user</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">prisma</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">John Wick</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n          <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">john@example.com</span><span class=\"dl\">'</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n      <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">John Wick</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This is all you need to do.</p>\n\n<p>By the way, I found several libraries for this database cleanup, but none of them worked perfectly.</p>\n\n<ul>\n<li><a href=\"https://github.com/emerleite/node-database-cleaner\">emerleite/node-database-cleaner: The simplest way to clean your database after tests</a></li>\n<li><a href=\"https://github.com/blazing-edge-labs/node-postgres-cleaner\">blazing-edge-labs/node-postgres-cleaner: Extremely simple way to clean your postgres database</a></li>\n</ul>\n\n<p>For now, I'll just publish my library this time.</p>\n\n<ul>\n<li><a href=\"https://github.com/cc-kawakami/prisma-cleaner\">cc-kawakami/prisma-cleaner: Prisma Cleaner is a utility for cleaning database with Prisma in testing. You can use in Jest or Mocha, etc.</a></li>\n</ul>\n\n<p>The Prisma development experience is not as bad as I thought it would be, but I feel that the testing environment is not yet ready, so I wanted to commit to it!</p>\n\n<p>Thank you for reading.</p>\n\n","body_markdown":"---\ntitle: Testing with Prisma\npublished: true\ndescription: \ntags: prisma, postgresql, react, testing\n# cover_image: https://direct_url_to_image.jpg\n# Use a ratio of 100:42 for best results.\n# published_at: 2022-11-05 08:43 +0000\n---\n\nI have recently been experimenting with full stack app development using next.js and prisma. By the way, take a look at the prisma documentation.\n\n[Integration testing with Prisma](https://www.prisma.io/docs/guides/testing/integration-testing)\n\n> One way to simulate a real world environment is to use Docker to encapsulate a database and some test data. This can be spun up and torn down with the tests and so operate as an isolated environment away from your production databases.\n\n> This guide assumes you have Docker and Docker Compose installed on your machine as well as Jest setup in your project.\n\nI see what you're saying, but... Do you want to prepare that much for testing? I want to run tests more easily and nimbly.\n\nAnd this is important, because the documentation does not tell us how to clean up the database easily for each test case, which makes the tests independent and changes their behavior depending on the order of the tests.\n\nSo let's do it.\n\nIn this case, we have prepared the following schema.\n\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DB_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String\n}\n```\n\n```\nnpx prisma generate\n```\n\nFirst, we can use Dotenv to specify the URL of the database for testing.\n\n```\nnpm i -D dotenv\n```\n\n```\n# .env.test\nDB_URL=postgresql://user:password@127.0.0.1:5432/example-test\n```\n\nNext, we will define the test process. Here, let's use the \"pre\" and \"post\" functions of script.\n\n```json\n{\n  \"scripts\": {\n    \"pretest\": \"pg_ctl -D db/pgdata start && dotenv -e .env.test -- prisma migrate dev\",\n    \"test\": \"dotenv -e .env.test -- mocha\",\n    \"posttest\": \"pg_ctl -D db/pgdata stop\"\n  }\n}\n```\n\nThe point here is to use Dotenv's API to use `.env.test`.\n\nThe last thing we need to do is clean up the database, which is the first thing we applied for. In the case of mocha, this is done with beforeEach, afterEach.\n\n```javascript\nimport { PrismaClient } from '@prisma/client'\n\nexport class PrismaCleaner {\n  constructor(prisma = new PrismaClient()) {\n    this.prisma = prisma\n    const propertyNames = Object.getOwnPropertyNames(prisma)\n    this.modelNames = propertyNames.filter((name) => this.isModelName(name))\n  }\n\n  async clean() {\n    console.log(`Database cleaning...`)\n    return Promise.all(\n      this.modelNames.map((modelName) => this.prisma[modelName].deleteMany())\n    )\n  }\n\n  /**\n   * @param {String} name\n   * @returns {Boolean}\n   */\n  isModelName(name) {\n    return !name.match(/^(_|\\$)/)\n  }\n}\n```\n\n```javascript\nimport * as assert from 'assert'\nimport { PrismaCleaner } from '../index.js'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\nconst cleaner = new PrismaCleaner()\n\ndescribe('prisma-cleaner', () => {\n  beforeEach(async () => {\n    await cleaner.clean() # This\n  })\n\n  afterEach(async () => {\n    await cleaner.clean() # This\n  })\n\n  describe('first creation', () => {\n    it('creates a user', async () => {\n      const user = await prisma.user.create({\n        data: {\n          name: 'John Lenon',\n          email: 'john@example.com'\n        }\n      })\n      assert.equal(user.name, 'John Lenon')\n    })\n  })\n\n  describe('second creation', () => {\n    it('creates a user', async () => {\n      const user = await prisma.user.create({\n        data: {\n          name: 'John Wick',\n          email: 'john@example.com'\n        }\n      })\n      assert.equal(user.name, 'John Wick')\n    })\n  })\n})\n```\n\nThis is all you need to do.\n\nBy the way, I found several libraries for this database cleanup, but none of them worked perfectly.\n\n- [emerleite/node-database-cleaner: The simplest way to clean your database after tests](https://github.com/emerleite/node-database-cleaner)\n- [blazing-edge-labs/node-postgres-cleaner: Extremely simple way to clean your postgres database](https://github.com/blazing-edge-labs/node-postgres-cleaner)\n\nFor now, I'll just publish my library this time.\n\n- [cc-kawakami/prisma-cleaner: Prisma Cleaner is a utility for cleaning database with Prisma in testing. You can use in Jest or Mocha, etc.](https://github.com/cc-kawakami/prisma-cleaner)\n\nThe Prisma development experience is not as bad as I thought it would be, but I feel that the testing environment is not yet ready, so I wanted to commit to it!\n\nThank you for reading.\n","user":{"name":"Moeki Kawakami","username":"moekidev","twitter_username":"moekidev","github_username":"cc-kawakami","user_id":962103,"website_url":"https://moeki.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--L7pQMfLe--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/962103/5e19d73b-c7cc-40f6-a838-6571936cbfb8.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--YVLFMWil--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/962103/5e19d73b-c7cc-40f6-a838-6571936cbfb8.jpeg"}}