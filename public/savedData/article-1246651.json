{"type_of":"article","id":1246651,"title":"Google Page Speed Insights and Magento 2","description":"My name is Sergey. I am CTO at Magecom. My article is based on a talk I gave at Magento Meetup #11,...","readable_publish_date":"Nov 7","slug":"google-page-speed-insights-and-magento-2-5ei9","path":"/magecomcompany/google-page-speed-insights-and-magento-2-5ei9","url":"https://dev.to/magecomcompany/google-page-speed-insights-and-magento-2-5ei9","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T15:38:12Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ezJIJL8E--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mx2cqlgjkdfml4smhyf.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--QUx9HukI--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mx2cqlgjkdfml4smhyf.jpg","canonical_url":"https://dev.to/magecomcompany/google-page-speed-insights-and-magento-2-5ei9","created_at":"2022-11-07T15:38:12Z","edited_at":"2022-11-07T15:44:54Z","crossposted_at":null,"published_at":"2022-11-07T15:38:12Z","last_comment_at":"2022-11-07T15:38:12Z","reading_time_minutes":13,"tag_list":"magento2, css, javascript, webdev","tags":["magento2","css","javascript","webdev"],"body_html":"<p>My name is Sergey. I am CTO at Magecom. My article is based on a talk I gave at <a href=\"https://magecom.net/events/\">Magento Meetup #11</a>, where I talked about the results of the work of our entire Magecom team. </p>\n\n<p>By the way, registration for <a href=\"https://magecom.net/events/\">Magento Meetup #12</a> is <strong>open</strong> now, all talks will be in English! It will take place on <strong>November 17 at 6 pm EET</strong>  :)</p>\n\n<p>Let's say you have a task to improve the performance of a site about which you still know almost nothing. For example, if this is a new client who came with a specific problem since the website on Magento 2 is working slowly. </p>\n\n<p>The task that the team and I solved was assembling a set of universal solutions suitable for most projects. The main project requirement was to make solutions be with a minimum estimate and as automated as possible to save the estimate. The conditions under which solutions can be applied include a minimum set of project knowledge so that an engineer outside the project context can use these solutions.</p>\n\n<h2>\n  <a name=\"google-pagespeed-insights\" href=\"#google-pagespeed-insights\">\n  </a>\n  Google PageSpeed Insights\n</h2>\n\n<p>To evaluate the results of our work, we use Google PageSpeed Insights.</p>\n\n<p>It is a set of scripts for measuring metrics (but not only). First of all, I would say that this is a tool a client uses to confirm their feelings that their site is somehow slow. It means that the same tool can be used to show the client the effectiveness of your work in improving performance. There may be purely subjective feelings of the website speed, but the numbers are better.</p>\n\n<p>In fact, the benefits of Google PageSpeed Insights are not over. Besides the fact that it can measure and visually demonstrate the performance of the site, but also gives recommendations on how to improve this performance. </p>\n\n<h2>\n  <a name=\"how-we-see-this-process\" href=\"#how-we-see-this-process\">\n  </a>\n  How we see this process\n</h2>\n\n<p>Quite often, you can see such a life flow of a client’s project.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qfIMHXI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkp158rqtl1m3w9dnssi.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qfIMHXI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkp158rqtl1m3w9dnssi.png\" alt=\"Magento perfomance I see\" loading=\"lazy\" width=\"695\" height=\"319\"></a></p>\n\n<p>At the start, when Magento is configured, it has a small performance out of the box. Next, when the Nth number of modules and a theme are introduced, the performance decreases even more. At the go-live stage, the volume of content increases since there’re many products, pages, widgets on the homepage, and numerous categories in the main navigation menu ( nodes in DOM). As a result, the performance fails. After the go-live, we can see that the website works slowly, so we spend a couple of days on doing something with that, slightly improve the performance, but not even reaching the indicators at the beginning of the development process.</p>\n\n<p>The second line is the hours spent on improving performance based on this approach.</p>\n\n<h2>\n  <a name=\"how-we-would-like-to-see-this-process\" href=\"#how-we-would-like-to-see-this-process\">\n  </a>\n  How we would like to see this process\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9gOj9-71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb1opxglacp4ffprcucb.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9gOj9-71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb1opxglacp4ffprcucb.png\" alt=\"Magento perfomance I want to see\" loading=\"lazy\" width=\"695\" height=\"320\"></a><br>\nWe would like to have everything to the maximum at the start of the project and during development. Without doubt, a slight drawdown is allowed, especially at the go-live stage, but after relatively little effort, we should return the indicators to normal.</p>\n\n<p>But for this, you need to make a small investment (up to 8 hours) at the start of the project and during the development period.</p>\n\n<p>My article is about what can be done during these 8 hours at the start of the project. And it doesn’t matter if you are starting a project from scratch or if it has just entered your company. Our task is to improve the standardized performance as much as possible.</p>\n\n<p>How did we develop this procedure? We just took the path of least resistance and started checking everything to make it meet Google PageSpeed Insights and Lighthouse.</p>\n<h2>\n  <a name=\"prerequisites-measure-performance\" href=\"#prerequisites-measure-performance\">\n  </a>\n  Prerequisites: measure performance\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Uc0dWg8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4na9426l3z9q52acpfgt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Uc0dWg8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4na9426l3z9q52acpfgt.png\" alt=\"Measure perfomance\" loading=\"lazy\" width=\"695\" height=\"495\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install -g lighthouse-ci\nnpx lighthouse-ci https://som.e/plp.html --filename=plp.html\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The main rule here is that you should measure performance.</p>\n\n<p>It's great that there are tools that allow you to do this automatically. It’s also good if you already have CI/CD configured. You can install Lighthouse CI, an npm package that can be run during pushes and deployments. It will give you a report during every pull request so you can always see which pull request is breaking performance.</p>\n\n<p>Let's say we installed a module and added 150K UI scripts to the front of all pages, although it’s just a store locator. It is better to avoid the situation when you introduce a store locator and, without measuring anything, implement an in-store pick up on the checkout based on this store locator. Then it turns out that it is very slow, and you need to remove this whole thing, but the checkout is already built on it. Of course, it is better when you immediately receive notifications about this and can instantly fix it.</p>\n\n<p>As a result, the first thing to start is setting up the performance measurement.</p>\n\n<h2>\n  <a name=\"what-google-pagespeed-recommends-us\" href=\"#what-google-pagespeed-recommends-us\">\n  </a>\n  What Google PageSpeed recommends us\n</h2>\n\n<p>To evaluate performance, Google Page Speed Insights measures several metrics and also evaluates some site parameters that can significantly affect these metrics. For each such parameter, there are <a href=\"https://web.dev/lighthouse-performance/\">recommendations</a> on how to improve it if it suddenly turns out to be in the red (and not only in the red) zone. Sometimes these are general recommendations; sometimes, they are personalized for a specific platform.</p>\n\n<h3>\n  <a name=\"do-not-load-images-that-are-not-visible-on-the-first-screen\" href=\"#do-not-load-images-that-are-not-visible-on-the-first-screen\">\n  </a>\n  Do not load images that are not visible on the first screen\n</h3>\n\n<p>Do not load images into the browser that users won’t see on the first screen. You don’t need to load them until they scroll to them or until your slider starts scrolling through these images, . It is possible that they won't scroll to them, and there is no point in wasting network and browser resources to load them.<br>\nThere are several solutions to this issue:</p>\n\n<ul>\n<li>The old way: go to the marketplace, find the extension with lazy load and install it.</li>\n<li>New way: since HTML5 supports the lazy loading of images, you need to add the loading=lazy attribute to the img tag.</li>\n</ul>\n\n<p>At Magecom, we created an extension for this, which  looks something like this if you skip details:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>/**\n * @see \\Magento\\Framework\\Controller\\ResultInterface::renderResult\n */\npublic function afterRenderResult(\n    \\Magento\\Framework\\Controller\\ResultInterface $subject,\n    \\Magento\\Framework\\Controller\\ResultInterface $result,\n    \\Magento\\Framework\\App\\ResponseInterface $response\n): \\Magento\\Framework\\Controller\\ResultInterface\n{\n    $content = $response-&gt;getBody();\n    $content = $this-&gt;imageProcessor-&gt;process($content);\n    $response-&gt;setBody($content);\n    return $result;\n}\npublic function process(string $content): string\n{\n    $closure = function (array $match) {\n         return str_replace('&lt;img', '&lt;img loading=\"lazy\"', $match[0]);\n    };\n\n    return preg_replace_callback('/(&lt;\\s*img[^&gt;]+&gt;)/i', $closure, $content);\n}\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Before the server returns the html to the browser, we go through this html regularly and add the loading=”lazy” attribute to all IMG tags. That's it.</p>\n\n<h3>\n  <a name=\"reduce-server-response-time\" href=\"#reduce-server-response-time\">\n  </a>\n  Reduce server response time\n</h3>\n\n<p>In fact, and it’s the most painful topic. If we skip the details, we can state that Magento is slow.</p>\n\n<p>The main reason that is often mentioned in the context of this problem is the significant number of modules that are not the fact that will be used in the application. As a result, one way to improve this indicator is to turn off unused modules. You can find several reports and talks on this topic on various sites, and it was even mentioned on Mageconf. There are many solutions  on how to turn off modules if you are not using MSI or GraphQL, for example. Lots of solutions.</p>\n\n<p>The effect is obvious since the more modules we remove, the fewer configs will be collected, and the whole thing will work faster. The effect will be maximum if you remove the maximum number of modules.</p>\n\n<p>To do this, we developed a module that does a little trick like this.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>public function getUnusedModules(): array\n{\n    $allModules = $this-&gt;getAllModules();\n    $requiredModules = $this-&gt;getRequiredModules();\n    $unusedModules = array_diff_key($allModules, $requiredModules);\n    ksort($unusedModules);\n    return $unusedModules;\n}\n\nprivate function getRequiredModules(): array\n{\n    $requiredModules = [];\n    $modules = $this-&gt;configProvider-&gt;getConfig();\n\n    foreach ($modules as $moduleName) {\n        $this-&gt;addRequiredModules($requiredModules, $moduleName);\n    }\n    ksort($requiredModules);\n    return $requiredModules;\n}\n\nprivate function addRequiredModules(array &amp;$requiredModules, string $moduleName): void\n{\n    if (array_key_exists($moduleName, $requiredModules)) {\n        return;\n    }\n\n    $module = $this-&gt;moduleRepository-&gt;getModuleByModuleName($moduleName);\n    $requiredModules[$moduleName] = $module;\n    foreach ($module-&gt;getDependencies() as $dependency) {\n        $type = $dependency['type'];\n        $dependencyName = $dependency['module'];\n        if ($type === 'hard') {\n            $this-&gt;addRequiredModules($requiredModules, $dependencyModule-&gt;getFullName());\n        }\n    }\n}\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We create a whitelist of modules that are used on the project, for example, Magento_ConfigurableProduct, Magento_Checkout, Magento_Sitemap, add to this list all the dependencies of these modules (see the composer.json require section) and dependencies of those dependencies, and so on recursively, until we get the complete list of modules used on the project. And then, we remove all the remaining modules by listing them in the replace section in the composer.json of the project.</p>\n\n<p>If we skip the details, the main methods here are <strong>getUnusedModules</strong>, which returns us a list of modules that are not used in the project. It takes all the modules, and those that are necessary, calculate the difference and returns a list of modules that are not required.</p>\n\n<p>An interesting point is how getRequiredModules is calculated. It just implements the main algorithm of the module, which I described above.</p>\n\n<p>It is a fairly simple script, but it allows us to get the most extensive possible list of modules that can be removed.</p>\n\n<h4>\n  <a name=\"preload-key-request\" href=\"#preload-key-request\">\n  </a>\n  Preload Key Request\n</h4>\n\n<p>There are resources on the site that you may need from the very beginning of the page loading. It would be great if they were already loaded from the start and not delayed until the moment they appear in the DOM.</p>\n\n<p>The solution may be as follows: you need to find these resources and add them to the xml layout through the link and specify the relation preload.</p>\n\n<p>On <a href=\"https://web.dev/uses-rel-preload/\">web.dev</a>, where this algorithm is described, you can see how to read it. Or you can start Google PageSpeed lnsights in the report to see which resources are fundamental to add to <strong>preload</strong>.</p>\n\n<h3>\n  <a name=\"minify-css\" href=\"#minify-css\">\n  </a>\n  Minify CSS\n</h3>\n\n<p>This point is already implemented in Magento. All we have to do is enable minification. I suggest doing this at the stage when we launch the project.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>bin/magento config:set dev/css/minify_files 1 --lock-config\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>For example, in our company, the configuration of the deployment project is automated, so it is added to scripts with builds. We have a project from the start in config.php that we minify scripts. If someone needs them to be non-minified locally in developer mode, they override the settings in env.php.</p>\n\n<h3>\n  <a name=\"minify-javascript\" href=\"#minify-javascript\">\n  </a>\n  Minify JavaScript\n</h3>\n\n<p>If you don't have <a href=\"https://web.dev/unminified-javascript/\">minification for JavaScript</a> enabled, Lighthouse will not be satisfied and recommend you turn off default minification and use <strong>Terser</strong>. At the same time, if you allow minification in Magento, then it will be satisfied and will not notice that you are using Magento minification and not Terser.</p>\n\n<p><strong>Terser</strong> works better, but there is not much profit, so I don’t recommend using it just for this. Terser will be helpful to us a little later, and you can see it on Github.com.</p>\n\n<p>There are other options if you do not want to install and configure <strong>Terser</strong>.</p>\n\n<h3>\n  <a name=\"eliminate-renderblocking-resources\" href=\"#eliminate-renderblocking-resources\">\n  </a>\n  Eliminate render-blocking resources\n</h3>\n\n<p>The task is to display the first screen to users as soon as possible so that they start interacting with the site as quickly as possible. All we do not need on the first screen, we place in the footer and do not load directly from the start. The primary resources are CSS and JavaScript.</p>\n\n<p>Google Page Speed Insights recommends doing the following steps.</p>\n\n<p>For CSS, we need to enable <strong>critical CSS</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>php bin/magento config:set dev/css/use_css_critical_path 1 --lock-config\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>There is a <a href=\"https://github.com/addyosmani/critical\">tool</a> that allows generating critical CSS and determining which CSS is critical and which is not. It helps to separate it into files, and there is also an <a href=\"https://www.npmjs.com/package/grunt-critical\">npm package</a> for that.</p>\n\n<p>As for JavaScript, moving them to the footer is recommended, so they do not slow down page loading.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>php bin/magento config:set dev/js/move_script_to_bottom 1 --lock-config\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As it turned out, the recommendations are pretty controversial.</p>\n\n<p>Applying these recommendations slightly improves the First Contentful Paint score but significantly degrades the Cumulative Layout Shift. And therefore, if we measure the performance BEFORE and AFTER these settings, then we will see performance degradation at the end.<br>\nAs a result, we do not apply these recommendations by default.</p>\n<h3>\n  <a name=\"keep-request-counts-low\" href=\"#keep-request-counts-low\">\n  </a>\n  Keep Request Counts Low\n</h3>\n\n<p>The most well-known moment is <a href=\"https://web.dev/resource-summary/\">Keep Request Counts Low</a>. The number of requests from the frontend is huge, they need to be reduced, and everything is quite simple here.</p>\n\n<p>We include merge CSS. Instead of hundreds of CSS files, one merged is loaded.</p>\n\n<p>CSS:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>php bin/magento config:set dev/css/merge_css_files 1 --lock-config\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As for JavaScript,<a href=\"https://github.com/magesuite/magepack-magento\"> Magepack</a> is an advanced bundler, has proven itself very well on projects, and is easy to configure.</p>\n\n<p>JavaScript:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>composer require creativestyle/magesuite-magepack\nnpm install -g magepack\n\nbin/magento config:set dev/js/merge_files 0 --lock-config\nbin/magento config:set dev/js/enable_magepack_js_bundling 1 --lock-config\n\nmagepack generate --cms-url=\"{HOMEPAGE_URL}\" --category-url=\"{PLP_URL}\" --product-url=\"{PDP_URL}\"\nmagepack bundle\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>By the way, here we still need Terser because if we use the Magepack bundler, we first need to generate statics, and then, based on a specific config, we assemble bundles from these statics. And only after that do we already minify the bundles. And if we enable Magento minification, then we force Magepack to work with minified files.</p>\n\n<h3>\n  <a name=\"avoid-excessive-dom-size\" href=\"#avoid-excessive-dom-size\">\n  </a>\n  Avoid excessive DOM size\n</h3>\n\n<p>If you have more than 3000 nodes on the page, then Lighthouse will definitely be dissatisfied with that. It cannot be fixed quickly, and there is no general rule for how to do this.</p>\n\n<p>There are several indirect ways of.</p>\n\n<ol>\n<li>Disable Page Builder. Disabling it can reduce the number of nodes. But Page Builder is an important element of the online store, so this step should be discussed with the client. Perhaps the client paid for a Magento license to have a Page Builder here or hired a content manager with no knowledge of HTML just because there is a Page Builder. If there are no such strict requirements, you can try to stop using the Page Builder to reduce the DOM size.</li>\n<li>Load some content via Ajax. For example, you have 1000 categories in your store, and they are all on the menu. You load them, and inside, you have <ul> and 1000 <li>, and also in each one, for example, <span> or other elements.\nBy using Ajax you can leave only the top-level menu and pull up the lower levels.</span>\n</li>\n</ul>\n</li>\n</ol>\n\n<h3>\n  <a name=\"show-images-in-nextgen-formats\" href=\"#show-images-in-nextgen-formats\">\n  </a>\n  Show images in <a href=\"https://web.dev/uses-webp-images/\">next-gen formats</a>\n</h3>\n\n<p>A new image format, WebP, has appeared, which is not inferior in quality to JPEG and also takes up less space. You can directly install any module from the <a href=\"https://marketplace.magento.com/catalogsearch/result/?q=webp\">marketplace</a> that will convert on the fly.</p>\n\n<p>There is an option to use the resources of various CDNs, such as <a href=\"https://developer.fastly.com/reference/io/format/\">Fastly</a> and <a href=\"https://blog.cloudflare.com/a-very-webp-new-year-from-cloudflare/\">Cloudflare</a>. They can convert your images to the WebP format and work better than modules. The CDN determines whether the browser supports the WebP format and if so, it converts JPEG to WebP on the fly.</p>\n\n<h3>\n  <a name=\"serve-static-resources-with-an-efficient-caching-policy\" href=\"#serve-static-resources-with-an-efficient-caching-policy\">\n  </a>\n  Serve static resources with an efficient caching policy\n</h3>\n\n<p>Everything is good here by default because the default settings nginx have already configured the correct cache policy for all types of resources. The only point is if we start using the nginx config in WebP. Magento does not know about WebP, and you will need to add it to the appropriate section.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>locator /media/{\n     try_files  $uri  $uri/ /get.php?$args;\nlocation ~ ^/media/theme_customization/.*\\.xml {\n      deny all;\n}\nlocation ~* \\. (ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|webp)$  {\n           add_header  Cache-Control “public”;\n           add_header X-Frame-Options “SAMEORIGIN” ;\n          expires +1y;\n          try_files $uri $uri/ /get.php?$args;\n}\nlocation ~* \\. (zip|gz|gzip|bz2|csv|xml)$ {\n         add_header Cache-Control “no-store”;\n         add_header X-Frame-Options “SAMEORIGIN” ;\n         expires         offf:\n         try_files  $uri $uri/ /get.php?$args;\n}\nadd_header X-Frame-Options “SAMEORIGIN” ;\n}\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"remove-unused-css\" href=\"#remove-unused-css\">\n  </a>\n  Remove unused CSS\n</h3>\n\n<p>As soon as we enable <strong>Merge CSS</strong>, Lighthouse starts complaining about it. We have one large file with all the CSS from the entire site, and on each specific CSS page, it starts diagnosing that Merge CSS files need to be turned off.</p>\n\n<p>But with Merge CSS being turned off, the indicators are lower. Therefore, as with render-blocking resources, we ignore this recommendation.</p>\n\n<h3>\n  <a name=\"enable-text-compression\" href=\"#enable-text-compression\">\n  </a>\n  Enable text compression\n</h3>\n\n<p>The server should give scripts and all text files in a compressed way (gzip). Everything is fine here — the nginx config gzips them by default.</p>\n\n<p>There is also a small micro-adjustment, which is to enable the minification of html files. This setting will remove all extra spaces and hyphens. Of course, in this case, you won’t save much, but we’ll save an extra byte:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>php bin/magento config:set dev/template/minify_html 1 --lock-config\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"efficient-image-encoding\" href=\"#efficient-image-encoding\">\n  </a>\n  Efficient image encoding\n</h3>\n\n<p>If the CDN has an image optimization function, and you load it with good quality, then it raises them out to web quality and gives the browser a minimum of content. There are also a bunch of <a href=\"https://marketplace.magento.com/catalogsearch/result/?q=optimize%20image\">extensions</a> that do the same thing, and we recommend <a href=\"https://marketplace.magento.com/apptrian-image-optimizer.html\">Apptrian</a>. We use it often and have no problems with it.</p>\n\n<h2>\n  <a name=\"core-web-vitals\" href=\"#core-web-vitals\">\n  </a>\n  Core Web Vitals\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uPQjm8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2356li7yumyzaewaivo.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uPQjm8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2356li7yumyzaewaivo.png\" alt=\"Google Page Speed Insights\" loading=\"lazy\" width=\"695\" height=\"484\"></a><br>\nGoogle Page Speed Insights measures metrics in two conceptually different contexts.</p>\n\n<p>Lab Data are measurements made in laboratory conditions on some standardized hardware, with particular characteristics, and the latest version of the browser installed, which is Google Chrome. Based on these metrics, you are given recommendations for improving performance.</p>\n\n<p>Field Data are almost the same parameters but are measured on the devices of specific users.</p>\n\n<p>Without a doubt, these data can be very different from each other. And the effect of applying these recommendations can be very different.</p>\n\n<p>For example, suppose most customers use the site through the Internet Explorer browser (because these are some government agencies where outdated software can be used). In that case, they may not notice that you added the loading=lazy attribute to the images because this browser does not support this attribute.</p>\n\n<p>By default, we consider that these recommendations apply only to lab data. It may take more time to analyze customer devices to improve performance for customers.</p>\n\n<h2>\n  <a name=\"whats-next\" href=\"#whats-next\">\n  </a>\n  What's next\n</h2>\n\n<p>It is not a complete list of recommendations. Some we still haven't tested firsthand, and they're in our TODO backlog. But the effect of their corrections should not be significant because, as a rule, Google Page Speed Insights does not swear at them when we are dealing with Magento.</p>\n\n<p>There are also some metrics (for example, reduce JavaScript execution time) that cannot be improved quickly, and you will have to dive deep into the project to understand how you can fix it.<br>\nNow TODO list looks like this:</p>\n\n<ul>\n<li>\n<a href=\"https://web.dev/uses-responsive-images/\">Properly size images</a>;</li>\n<li>\n<a href=\"https://web.dev/bootup-time/\">Reduce JavaScript execution time</a>;</li>\n<li>\n<a href=\"https://web.dev/uses-rel-preconnect/\">Preconnect to required origins</a>;</li>\n<li>\n<a href=\"https://web.dev/redirects/\">Avoid multiple page redirects</a>;</li>\n<li>\n<a href=\"https://web.dev/efficient-animated-content/\">Use video formats for animated content</a>;</li>\n<li>\n<a href=\"https://web.dev/third-party-summary/\">Reduce the impact of third-party code</a>;</li>\n<li>\n<a href=\"https://web.dev/non-composited-animations/\">Avoid non-composited animations</a>;</li>\n<li>\n<a href=\"https://web.dev/third-party-facades/\">Lazy load third-party resources with facades</a>;</li>\n<li>\n<a href=\"https://web.dev/total-byte-weight/\">Avoid enormous network payloads</a>;</li>\n<li>\n<a href=\"https://web.dev/critical-request-chains/\">Avoid chaining critical requests</a>;</li>\n<li>\n<a href=\"https://web.dev/user-timings/\">User Timing marks and measures</a>;</li>\n<li>\n<a href=\"https://web.dev/mainthread-work-breakdown/\">Minimize main thread work</a>;</li>\n<li>\n<a href=\"https://web.dev/font-display/\">Ensure text remains visible during Webfont load</a>.</li>\n</ul>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>As a result, we looked at some simple and reliable ways to improve the site's performance so that Google Page Speed Insights will also like it.</p>\n\n<p>If you have other ways to solve the problem raised here, write in the comments.</p>\n\n<p><em>Note: Google Page Speed Insights is just a web service. And the set of metrics is another tool called Lighthouse for simplicity. Google Page Speed Insights just uses this tool. But for simplicity, the article only uses the name Google Page Speed Insights, even when it's more about Lighthouse.</em></p>\n\n","body_markdown":"My name is Sergey. I am CTO at Magecom. My article is based on a talk I gave at [Magento Meetup #11](https://magecom.net/events/), where I talked about the results of the work of our entire Magecom team. \n\nBy the way, registration for [Magento Meetup #12](https://magecom.net/events/) is **open** now, all talks will be in English! It will take place on **November 17 at 6 pm EET**  :)\n\nLet's say you have a task to improve the performance of a site about which you still know almost nothing. For example, if this is a new client who came with a specific problem since the website on Magento 2 is working slowly. \n\nThe task that the team and I solved was assembling a set of universal solutions suitable for most projects. The main project requirement was to make solutions be with a minimum estimate and as automated as possible to save the estimate. The conditions under which solutions can be applied include a minimum set of project knowledge so that an engineer outside the project context can use these solutions.\n\n##Google PageSpeed Insights\nTo evaluate the results of our work, we use Google PageSpeed Insights.\n\nIt is a set of scripts for measuring metrics (but not only). First of all, I would say that this is a tool a client uses to confirm their feelings that their site is somehow slow. It means that the same tool can be used to show the client the effectiveness of your work in improving performance. There may be purely subjective feelings of the website speed, but the numbers are better.\n\nIn fact, the benefits of Google PageSpeed Insights are not over. Besides the fact that it can measure and visually demonstrate the performance of the site, but also gives recommendations on how to improve this performance. \n\n## How we see this process\nQuite often, you can see such a life flow of a client’s project.\n\n![Magento perfomance I see](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkp158rqtl1m3w9dnssi.png)\n\nAt the start, when Magento is configured, it has a small performance out of the box. Next, when the Nth number of modules and a theme are introduced, the performance decreases even more. At the go-live stage, the volume of content increases since there’re many products, pages, widgets on the homepage, and numerous categories in the main navigation menu ( nodes in DOM). As a result, the performance fails. After the go-live, we can see that the website works slowly, so we spend a couple of days on doing something with that, slightly improve the performance, but not even reaching the indicators at the beginning of the development process.\n \nThe second line is the hours spent on improving performance based on this approach.\n\n## How we would like to see this process\n\n![Magento perfomance I want to see](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb1opxglacp4ffprcucb.png)\nWe would like to have everything to the maximum at the start of the project and during development. Without doubt, a slight drawdown is allowed, especially at the go-live stage, but after relatively little effort, we should return the indicators to normal.\n\nBut for this, you need to make a small investment (up to 8 hours) at the start of the project and during the development period.\n\nMy article is about what can be done during these 8 hours at the start of the project. And it doesn’t matter if you are starting a project from scratch or if it has just entered your company. Our task is to improve the standardized performance as much as possible.\n\nHow did we develop this procedure? We just took the path of least resistance and started checking everything to make it meet Google PageSpeed Insights and Lighthouse.\n\n## Prerequisites: measure performance\n\n![Measure perfomance](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4na9426l3z9q52acpfgt.png)\n\n```\nnpm install -g lighthouse-ci\nnpx lighthouse-ci https://som.e/plp.html --filename=plp.html\n\n```\nThe main rule here is that you should measure performance.\n \nIt's great that there are tools that allow you to do this automatically. It’s also good if you already have CI/CD configured. You can install Lighthouse CI, an npm package that can be run during pushes and deployments. It will give you a report during every pull request so you can always see which pull request is breaking performance.\n\nLet's say we installed a module and added 150K UI scripts to the front of all pages, although it’s just a store locator. It is better to avoid the situation when you introduce a store locator and, without measuring anything, implement an in-store pick up on the checkout based on this store locator. Then it turns out that it is very slow, and you need to remove this whole thing, but the checkout is already built on it. Of course, it is better when you immediately receive notifications about this and can instantly fix it.\n\nAs a result, the first thing to start is setting up the performance measurement.\n\n## What Google PageSpeed recommends us\nTo evaluate performance, Google Page Speed Insights measures several metrics and also evaluates some site parameters that can significantly affect these metrics. For each such parameter, there are [recommendations](https://web.dev/lighthouse-performance/) on how to improve it if it suddenly turns out to be in the red (and not only in the red) zone. Sometimes these are general recommendations; sometimes, they are personalized for a specific platform.\n\n### Do not load images that are not visible on the first screen\nDo not load images into the browser that users won’t see on the first screen. You don’t need to load them until they scroll to them or until your slider starts scrolling through these images, . It is possible that they won't scroll to them, and there is no point in wasting network and browser resources to load them.\nThere are several solutions to this issue:\n\n- The old way: go to the marketplace, find the extension with lazy load and install it.\n- New way: since HTML5 supports the lazy loading of images, you need to add the loading=lazy attribute to the img tag.\n\nAt Magecom, we created an extension for this, which  looks something like this if you skip details:\n\n```\n/**\n * @see \\Magento\\Framework\\Controller\\ResultInterface::renderResult\n */\npublic function afterRenderResult(\n    \\Magento\\Framework\\Controller\\ResultInterface $subject,\n    \\Magento\\Framework\\Controller\\ResultInterface $result,\n    \\Magento\\Framework\\App\\ResponseInterface $response\n): \\Magento\\Framework\\Controller\\ResultInterface\n{\n    $content = $response->getBody();\n    $content = $this->imageProcessor->process($content);\n    $response->setBody($content);\n    return $result;\n}\npublic function process(string $content): string\n{\n    $closure = function (array $match) {\n         return str_replace('<img', '<img loading=\"lazy\"', $match[0]);\n    };\n\n    return preg_replace_callback('/(<\\s*img[^>]+>)/i', $closure, $content);\n}\n\n```\nBefore the server returns the html to the browser, we go through this html regularly and add the loading=”lazy” attribute to all IMG tags. That's it.\n\n### Reduce server response time\nIn fact, and it’s the most painful topic. If we skip the details, we can state that Magento is slow.\n\nThe main reason that is often mentioned in the context of this problem is the significant number of modules that are not the fact that will be used in the application. As a result, one way to improve this indicator is to turn off unused modules. You can find several reports and talks on this topic on various sites, and it was even mentioned on Mageconf. There are many solutions  on how to turn off modules if you are not using MSI or GraphQL, for example. Lots of solutions.\n\nThe effect is obvious since the more modules we remove, the fewer configs will be collected, and the whole thing will work faster. The effect will be maximum if you remove the maximum number of modules.\n\nTo do this, we developed a module that does a little trick like this.\n\n```\npublic function getUnusedModules(): array\n{\n    $allModules = $this->getAllModules();\n    $requiredModules = $this->getRequiredModules();\n    $unusedModules = array_diff_key($allModules, $requiredModules);\n    ksort($unusedModules);\n    return $unusedModules;\n}\n\nprivate function getRequiredModules(): array\n{\n    $requiredModules = [];\n    $modules = $this->configProvider->getConfig();\n\n    foreach ($modules as $moduleName) {\n        $this->addRequiredModules($requiredModules, $moduleName);\n    }\n    ksort($requiredModules);\n    return $requiredModules;\n}\n\nprivate function addRequiredModules(array &$requiredModules, string $moduleName): void\n{\n    if (array_key_exists($moduleName, $requiredModules)) {\n        return;\n    }\n\n    $module = $this->moduleRepository->getModuleByModuleName($moduleName);\n    $requiredModules[$moduleName] = $module;\n    foreach ($module->getDependencies() as $dependency) {\n        $type = $dependency['type'];\n        $dependencyName = $dependency['module'];\n        if ($type === 'hard') {\n            $this->addRequiredModules($requiredModules, $dependencyModule->getFullName());\n        }\n    }\n}\n\n```\nWe create a whitelist of modules that are used on the project, for example, Magento_ConfigurableProduct, Magento_Checkout, Magento_Sitemap, add to this list all the dependencies of these modules (see the composer.json require section) and dependencies of those dependencies, and so on recursively, until we get the complete list of modules used on the project. And then, we remove all the remaining modules by listing them in the replace section in the composer.json of the project.\n\nIf we skip the details, the main methods here are **getUnusedModules**, which returns us a list of modules that are not used in the project. It takes all the modules, and those that are necessary, calculate the difference and returns a list of modules that are not required.\n\nAn interesting point is how getRequiredModules is calculated. It just implements the main algorithm of the module, which I described above.\n\nIt is a fairly simple script, but it allows us to get the most extensive possible list of modules that can be removed.\n\n#### Preload Key Request\nThere are resources on the site that you may need from the very beginning of the page loading. It would be great if they were already loaded from the start and not delayed until the moment they appear in the DOM.\n\nThe solution may be as follows: you need to find these resources and add them to the xml layout through the link and specify the relation preload.\n\nOn [web.dev](https://web.dev/uses-rel-preload/), where this algorithm is described, you can see how to read it. Or you can start Google PageSpeed lnsights in the report to see which resources are fundamental to add to **preload**.\n\n### Minify CSS\nThis point is already implemented in Magento. All we have to do is enable minification. I suggest doing this at the stage when we launch the project.\n```\nbin/magento config:set dev/css/minify_files 1 --lock-config\n```\nFor example, in our company, the configuration of the deployment project is automated, so it is added to scripts with builds. We have a project from the start in config.php that we minify scripts. If someone needs them to be non-minified locally in developer mode, they override the settings in env.php.\n\n### Minify JavaScript \nIf you don't have [minification for JavaScript](https://web.dev/unminified-javascript/) enabled, Lighthouse will not be satisfied and recommend you turn off default minification and use **Terser**. At the same time, if you allow minification in Magento, then it will be satisfied and will not notice that you are using Magento minification and not Terser.\n\n**Terser** works better, but there is not much profit, so I don’t recommend using it just for this. Terser will be helpful to us a little later, and you can see it on Github.com.\n\nThere are other options if you do not want to install and configure **Terser**.\n\n### Eliminate render-blocking resources\nThe task is to display the first screen to users as soon as possible so that they start interacting with the site as quickly as possible. All we do not need on the first screen, we place in the footer and do not load directly from the start. The primary resources are CSS and JavaScript.\n\nGoogle Page Speed Insights recommends doing the following steps.\n\nFor CSS, we need to enable **critical CSS**.\n```\nphp bin/magento config:set dev/css/use_css_critical_path 1 --lock-config\n```\nThere is a [tool](https://github.com/addyosmani/critical) that allows generating critical CSS and determining which CSS is critical and which is not. It helps to separate it into files, and there is also an [npm package](https://www.npmjs.com/package/grunt-critical) for that.\n\nAs for JavaScript, moving them to the footer is recommended, so they do not slow down page loading.\n```\nphp bin/magento config:set dev/js/move_script_to_bottom 1 --lock-config\n```\nAs it turned out, the recommendations are pretty controversial.\n\nApplying these recommendations slightly improves the First Contentful Paint score but significantly degrades the Cumulative Layout Shift. And therefore, if we measure the performance BEFORE and AFTER these settings, then we will see performance degradation at the end.\nAs a result, we do not apply these recommendations by default.\n\n### Keep Request Counts Low\nThe most well-known moment is [Keep Request Counts Low](https://web.dev/resource-summary/). The number of requests from the frontend is huge, they need to be reduced, and everything is quite simple here.\n\nWe include merge CSS. Instead of hundreds of CSS files, one merged is loaded.\n\nCSS:\n```\nphp bin/magento config:set dev/css/merge_css_files 1 --lock-config\n```\nAs for JavaScript,[ Magepack](https://github.com/magesuite/magepack-magento) is an advanced bundler, has proven itself very well on projects, and is easy to configure.\n\nJavaScript:\n\n```\ncomposer require creativestyle/magesuite-magepack\nnpm install -g magepack\n\nbin/magento config:set dev/js/merge_files 0 --lock-config\nbin/magento config:set dev/js/enable_magepack_js_bundling 1 --lock-config\n\nmagepack generate --cms-url=\"{HOMEPAGE_URL}\" --category-url=\"{PLP_URL}\" --product-url=\"{PDP_URL}\"\nmagepack bundle\n\n```\nBy the way, here we still need Terser because if we use the Magepack bundler, we first need to generate statics, and then, based on a specific config, we assemble bundles from these statics. And only after that do we already minify the bundles. And if we enable Magento minification, then we force Magepack to work with minified files.\n\n### Avoid excessive DOM size\nIf you have more than 3000 nodes on the page, then Lighthouse will definitely be dissatisfied with that. It cannot be fixed quickly, and there is no general rule for how to do this.\n\nThere are several indirect ways of.\n\n1. Disable Page Builder. Disabling it can reduce the number of nodes. But Page Builder is an important element of the online store, so this step should be discussed with the client. Perhaps the client paid for a Magento license to have a Page Builder here or hired a content manager with no knowledge of HTML just because there is a Page Builder. If there are no such strict requirements, you can try to stop using the Page Builder to reduce the DOM size.\n2. Load some content via Ajax. For example, you have 1000 categories in your store, and they are all on the menu. You load them, and inside, you have <ul> and 1000 <li>, and also in each one, for example, <span> or other elements.\nBy using Ajax you can leave only the top-level menu and pull up the lower levels.\n\n### Show images in [next-gen formats](https://web.dev/uses-webp-images/)\nA new image format, WebP, has appeared, which is not inferior in quality to JPEG and also takes up less space. You can directly install any module from the [marketplace](https://marketplace.magento.com/catalogsearch/result/?q=webp) that will convert on the fly.\n\nThere is an option to use the resources of various CDNs, such as [Fastly](https://developer.fastly.com/reference/io/format/) and [Cloudflare](https://blog.cloudflare.com/a-very-webp-new-year-from-cloudflare/). They can convert your images to the WebP format and work better than modules. The CDN determines whether the browser supports the WebP format and if so, it converts JPEG to WebP on the fly.\n\n### Serve static resources with an efficient caching policy\nEverything is good here by default because the default settings nginx have already configured the correct cache policy for all types of resources. The only point is if we start using the nginx config in WebP. Magento does not know about WebP, and you will need to add it to the appropriate section.\n\n```\nlocator /media/{\n     try_files  $uri  $uri/ /get.php?$args;\nlocation ~ ^/media/theme_customization/.*\\.xml {\n      deny all;\n}\nlocation ~* \\. (ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|webp)$  {\n           add_header  Cache-Control “public”;\n           add_header X-Frame-Options “SAMEORIGIN” ;\n          expires +1y;\n          try_files $uri $uri/ /get.php?$args;\n}\nlocation ~* \\. (zip|gz|gzip|bz2|csv|xml)$ {\n         add_header Cache-Control “no-store”;\n         add_header X-Frame-Options “SAMEORIGIN” ;\n         expires         offf:\n         try_files  $uri $uri/ /get.php?$args;\n}\nadd_header X-Frame-Options “SAMEORIGIN” ;\n}\n\n```\n\n### Remove unused CSS\nAs soon as we enable **Merge CSS**, Lighthouse starts complaining about it. We have one large file with all the CSS from the entire site, and on each specific CSS page, it starts diagnosing that Merge CSS files need to be turned off.\n\nBut with Merge CSS being turned off, the indicators are lower. Therefore, as with render-blocking resources, we ignore this recommendation.\n\n### Enable text compression\nThe server should give scripts and all text files in a compressed way (gzip). Everything is fine here — the nginx config gzips them by default.\n\nThere is also a small micro-adjustment, which is to enable the minification of html files. This setting will remove all extra spaces and hyphens. Of course, in this case, you won’t save much, but we’ll save an extra byte:\n\n```\nphp bin/magento config:set dev/template/minify_html 1 --lock-config\n```\n\n### Efficient image encoding\nIf the CDN has an image optimization function, and you load it with good quality, then it raises them out to web quality and gives the browser a minimum of content. There are also a bunch of [extensions](https://marketplace.magento.com/catalogsearch/result/?q=optimize%20image) that do the same thing, and we recommend [Apptrian](https://marketplace.magento.com/apptrian-image-optimizer.html). We use it often and have no problems with it.\n\n## Core Web Vitals\n\n![Google Page Speed Insights](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2356li7yumyzaewaivo.png)\nGoogle Page Speed Insights measures metrics in two conceptually different contexts.\n\nLab Data are measurements made in laboratory conditions on some standardized hardware, with particular characteristics, and the latest version of the browser installed, which is Google Chrome. Based on these metrics, you are given recommendations for improving performance.\n\nField Data are almost the same parameters but are measured on the devices of specific users.\n\nWithout a doubt, these data can be very different from each other. And the effect of applying these recommendations can be very different.\n\nFor example, suppose most customers use the site through the Internet Explorer browser (because these are some government agencies where outdated software can be used). In that case, they may not notice that you added the loading=lazy attribute to the images because this browser does not support this attribute.\n\nBy default, we consider that these recommendations apply only to lab data. It may take more time to analyze customer devices to improve performance for customers.\n\n## What's next\nIt is not a complete list of recommendations. Some we still haven't tested firsthand, and they're in our TODO backlog. But the effect of their corrections should not be significant because, as a rule, Google Page Speed Insights does not swear at them when we are dealing with Magento.\n\nThere are also some metrics (for example, reduce JavaScript execution time) that cannot be improved quickly, and you will have to dive deep into the project to understand how you can fix it.\nNow TODO list looks like this:\n\n- [Properly size images](https://web.dev/uses-responsive-images/);\n- [Reduce JavaScript execution time](https://web.dev/bootup-time/);\n- [Preconnect to required origins](https://web.dev/uses-rel-preconnect/);\n- [Avoid multiple page redirects](https://web.dev/redirects/);\n- [Use video formats for animated content](https://web.dev/efficient-animated-content/);\n- [Reduce the impact of third-party code](https://web.dev/third-party-summary/);\n- [Avoid non-composited animations](https://web.dev/non-composited-animations/);\n- [Lazy load third-party resources with facades](https://web.dev/third-party-facades/);\n- [Avoid enormous network payloads](https://web.dev/total-byte-weight/);\n- [Avoid chaining critical requests](https://web.dev/critical-request-chains/);\n- [User Timing marks and measures](https://web.dev/user-timings/);\n- [Minimize main thread work](https://web.dev/mainthread-work-breakdown/);\n- [Ensure text remains visible during Webfont load](https://web.dev/font-display/).\n\n## Conclusion\nAs a result, we looked at some simple and reliable ways to improve the site's performance so that Google Page Speed Insights will also like it.\n\nIf you have other ways to solve the problem raised here, write in the comments.\n\n_Note: Google Page Speed Insights is just a web service. And the set of metrics is another tool called Lighthouse for simplicity. Google Page Speed Insights just uses this tool. But for simplicity, the article only uses the name Google Page Speed Insights, even when it's more about Lighthouse._\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","user":{"name":"Magecom","username":"magecomcompany","twitter_username":null,"github_username":"Anastasia22m","user_id":949276,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--kxsGStZG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/949276/87e71912-035d-443c-b8c0-833baa339ce9.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--_5Xj3gbZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/949276/87e71912-035d-443c-b8c0-833baa339ce9.png"}}