{"type_of":"article","id":1235535,"title":"How to implement Server Side Rendering for Material UI's media queries in NextJs to avoid flash?","description":"What is this post about?   This post will help you to implement server side rendering(SSR)...","readable_publish_date":"Oct 29","slug":"how-to-implement-server-side-rendering-for-material-uis-media-queries-in-nextjs-to-avoid-flash-jpi","path":"/rakshitnayak/how-to-implement-server-side-rendering-for-material-uis-media-queries-in-nextjs-to-avoid-flash-jpi","url":"https://dev.to/rakshitnayak/how-to-implement-server-side-rendering-for-material-uis-media-queries-in-nextjs-to-avoid-flash-jpi","comments_count":0,"public_reactions_count":4,"collection_id":null,"published_timestamp":"2022-10-29T18:02:04Z","positive_reactions_count":4,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ksKyUeVv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfy0jkzmnrz4ronstjk5.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Rqk6r1wF--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfy0jkzmnrz4ronstjk5.jpg","canonical_url":"https://dev.to/rakshitnayak/how-to-implement-server-side-rendering-for-material-uis-media-queries-in-nextjs-to-avoid-flash-jpi","created_at":"2022-10-29T18:02:04Z","edited_at":"2022-10-29T18:05:32Z","crossposted_at":null,"published_at":"2022-10-29T18:02:04Z","last_comment_at":"2022-10-29T18:02:04Z","reading_time_minutes":3,"tag_list":"javascript, nextjs, mui, react","tags":["javascript","nextjs","mui","react"],"body_html":"<h2>\n  <a name=\"what-is-this-post-about\" href=\"#what-is-this-post-about\">\n  </a>\n  What is this post about?\n</h2>\n\n<p>This post will help you to implement server side rendering(SSR) for Material UI's media queries if you are using NextJs with MUI(formerly Material-UI). If you implement useMediaQuery using SSR you will avoid the flash of desktop view in the mobile width devices during initial second of the render when you load a page. This post will explain each step to you to make it much more clear.</p>\n\n<h2>\n  <a name=\"why-do-you-see-the-flash-of-desktop-view-during-initial-render-in-mobile-\" href=\"#why-do-you-see-the-flash-of-desktop-view-during-initial-render-in-mobile-\">\n  </a>\n  Why do you see the flash of desktop view during initial render in mobile ?\n</h2>\n\n<p>Since useMediaQuery Defaults to false. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. If your code contains lines something like below then majorly you will see the flash<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const xs = useMediaQuery(theme.breakpoints.down('sm'))\n...\nreturn(\n  {xs ?\n     &lt;p&gt;Small device&lt;/p&gt;\n  :\n     &lt;p&gt;Regular size device&lt;/p&gt;\n  }\n)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"more-context-of-flash\" href=\"#more-context-of-flash\">\n  </a>\n  More context of flash\n</h2>\n\n<ul>\n<li><p>If you load the page in mobile, initial second during render will return \"Regular size device\" and then to \"small device\" but the case it should render is \"Small device\" during initial render itself.</p></li>\n<li><p>This happens due to not using correct method of useMediaQuery during ssR</p></li>\n</ul>\n\n<p>Here is the <a href=\"https://mui.com/material-ui/react-use-media-query/#server-side-rendering\">useMediaquery mui</a>  documentation but its really confusing how to implement in your code, so below are the steps</p>\n\n<h2>\n  <a name=\"step-1-get-device-type-from-server-side-appgetinitialprops\" href=\"#step-1-get-device-type-from-server-side-appgetinitialprops\">\n  </a>\n  Step 1: Get device type from server side App.getInitialProps\n</h2>\n\n<ul>\n<li>I assume your _app.js looks like below,\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// _app.js\nimport NextApp from 'next/app';\nimport { createTheme } from '@mui/material';\n\n\nconst App = ({ Component, pageProps }) =&gt; {\n\n  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      //your default component styling goes here\n    }\n  });\n\n  return (\n    &lt;ThemeProvider theme={theme}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/ThemeProvider&gt;\n  ); \n};\n\nApp.getInitialProps = async (context) =&gt; {\n  return {\n    ...NextApp.getInitialProps(context),\n  };\n};\n\nexport default App;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>Edit App.getInitialProps to get deviceType, for this you require <a href=\"https://www.npmjs.com/package/ua-parser-js\">ua-parser-js</a>. install this package and Parse the user agent string of the client to extract device type\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>App.getInitialProps = async (context) =&gt; {\n  let deviceType;\n\n  if (context.ctx.req) {\n    deviceType = parser(context.ctx.req.headers['user-agent']).device.type || 'desktop';\n  }\n\n  return {\n    ...NextApp.getInitialProps(context),\n    deviceType,\n  };\n};\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"step-2-provide-an-implementation-of-ssr-matchmedia\" href=\"#step-2-provide-an-implementation-of-ssr-matchmedia\">\n  </a>\n  Step 2: Provide an implementation of ssr matchMedia\n</h2>\n\n<ul>\n<li>Pass deviceType as prop and the following code in the function</li>\n<li>The recommended way for emulating match media is Using <a href=\"https://github.com/ericf/css-mediaquery\">css-mediaquery</a>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const App = ({ Component, pageProps, deviceType }) =&gt; {\n  const ssrMatchMedia = (query) =&gt; ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n ........\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"step-3-override-muiusemediaquery-default-props-in-theme\" href=\"#step-3-override-muiusemediaquery-default-props-in-theme\">\n  </a>\n  Step 3: Override MuiUseMediaQuery default props in theme\n</h2>\n\n<ul>\n<li>The useMediaQuery is set to false as default. In order to detect the device width in server side you need to change the default props as the ssrMatchMedia defined above.So Add a following lines of code\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    }\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<ul>\n<li>This will set the deviceType during server side rendering and apply the mediaQuery before loading the page.</li>\n</ul>\n\n<h2>\n  <a name=\"so-final-code-looks-something-like-below-and-you-can-use-usemediaquery-in-any-component-to-avoid-the-flash\" href=\"#so-final-code-looks-something-like-below-and-you-can-use-usemediaquery-in-any-component-to-avoid-the-flash\">\n  </a>\n  so final code looks something like below and you can use useMediaQuery in any component to avoid the flash\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// _app.js\nimport NextApp from 'next/app';\nimport parser from 'ua-parser-js';\nimport mediaQuery from 'css-mediaquery';\n\nimport { createTheme } from '@mui/material';\n\n\nconst App = ({ Component, pageProps, deviceType }) =&gt; {\n  const ssrMatchMedia = (query) =&gt; ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n\n  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    }\n  });\n\n\n  return (\n    &lt;ThemeProvider theme={theme}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/ThemeProvider&gt;\n  ); \n};\n\nApp.getInitialProps = async (context) =&gt; {\n  let deviceType;\n\n  if (context.ctx.req) {\n    deviceType = parser(context.ctx.req.headers['user-agent']).device.type || 'desktop';\n  }\n\n  return {\n    ...NextApp.getInitialProps(context),\n    deviceType,\n  };\n};\n\nexport default App;\n\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>If you follow the above steps you will avoid the flash and the case explained in context of flash works smooth.</p>\n\n<p>That's it guys thank you :)</p>\n\n","body_markdown":"## What is this post about?\nThis post will help you to implement server side rendering(SSR) for Material UI's media queries if you are using NextJs with MUI(formerly Material-UI). If you implement useMediaQuery using SSR you will avoid the flash of desktop view in the mobile width devices during initial second of the render when you load a page. This post will explain each step to you to make it much more clear.\n\n## Why do you see the flash of desktop view during initial render in mobile ?\nSince useMediaQuery Defaults to false. In order to perform the server-side rendering reconciliation, it needs to render twice. A first time with nothing and a second time with the children. This double pass rendering cycle comes with a drawback. If your code contains lines something like below then majorly you will see the flash\n\n```\nconst xs = useMediaQuery(theme.breakpoints.down('sm'))\n...\nreturn(\n  {xs ?\n     <p>Small device</p>\n  :\n     <p>Regular size device</p>\n  }\n)\n```\n\n## More context of flash\n\n- If you load the page in mobile, initial second during render will return \"Regular size device\" and then to \"small device\" but the case it should render is \"Small device\" during initial render itself.\n\n- This happens due to not using correct method of useMediaQuery during ssR\n\nHere is the [useMediaquery mui](https://mui.com/material-ui/react-use-media-query/#server-side-rendering)  documentation but its really confusing how to implement in your code, so below are the steps\n\n## Step 1: Get device type from server side App.getInitialProps\n\n- I assume your _app.js looks like below,\n```\n// _app.js\nimport NextApp from 'next/app';\nimport { createTheme } from '@mui/material';\n\n\nconst App = ({ Component, pageProps }) => {\n\n  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      //your default component styling goes here\n    }\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  ); \n};\n\nApp.getInitialProps = async (context) => {\n  return {\n    ...NextApp.getInitialProps(context),\n  };\n};\n\nexport default App;\n```\n\n- Edit App.getInitialProps to get deviceType, for this you require [ua-parser-js](https://www.npmjs.com/package/ua-parser-js). install this package and Parse the user agent string of the client to extract device type\n\n```\nApp.getInitialProps = async (context) => {\n  let deviceType;\n\n  if (context.ctx.req) {\n    deviceType = parser(context.ctx.req.headers['user-agent']).device.type || 'desktop';\n  }\n\n  return {\n    ...NextApp.getInitialProps(context),\n    deviceType,\n  };\n};\n```\n\n## Step 2: Provide an implementation of ssr matchMedia\n\n- Pass deviceType as prop and the following code in the function\n- The recommended way for emulating match media is Using [css-mediaquery](https://github.com/ericf/css-mediaquery)\n\n```\nconst App = ({ Component, pageProps, deviceType }) => {\n  const ssrMatchMedia = (query) => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n ........\n```\n## Step 3: Override MuiUseMediaQuery default props in theme\n\n- The useMediaQuery is set to false as default. In order to detect the device width in server side you need to change the default props as the ssrMatchMedia defined above.So Add a following lines of code \n\n```\n  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    }\n```\n\n- This will set the deviceType during server side rendering and apply the mediaQuery before loading the page.\n\n## so final code looks something like below and you can use useMediaQuery in any component to avoid the flash\n\n```\n// _app.js\nimport NextApp from 'next/app';\nimport parser from 'ua-parser-js';\nimport mediaQuery from 'css-mediaquery';\n\nimport { createTheme } from '@mui/material';\n\n\nconst App = ({ Component, pageProps, deviceType }) => {\n  const ssrMatchMedia = (query) => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n\n  const theme = createTheme({\n    // your MUI theme configuration goes here\n    components: {\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    }\n  });\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  ); \n};\n\nApp.getInitialProps = async (context) => {\n  let deviceType;\n\n  if (context.ctx.req) {\n    deviceType = parser(context.ctx.req.headers['user-agent']).device.type || 'desktop';\n  }\n\n  return {\n    ...NextApp.getInitialProps(context),\n    deviceType,\n  };\n};\n\nexport default App;\n\n```\n\n## Conclusion\nIf you follow the above steps you will avoid the flash and the case explained in context of flash works smooth.\n\nThat's it guys thank you :)","user":{"name":"Rakshit Nayak","username":"rakshitnayak","twitter_username":null,"github_username":"rakshitnayak","user_id":505917,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cEAQpCCE--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/505917/1979057f-75ff-405c-9841-7877dca5adb2.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--5zbcJCTw--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/505917/1979057f-75ff-405c-9841-7877dca5adb2.jpeg"}}