{"type_of":"article","id":1243519,"title":"DynamoDB ACID Transactions- What, Why, & How?","description":"Amazon DynamoDB is a fast, flexible, fully managed NoSQL database service designed for single-digit...","readable_publish_date":"Nov 4","slug":"dynamodb-acid-transactions-what-why-how-mcf","path":"/hirendhaduk_/dynamodb-acid-transactions-what-why-how-mcf","url":"https://dev.to/hirendhaduk_/dynamodb-acid-transactions-what-why-how-mcf","comments_count":0,"public_reactions_count":1,"collection_id":null,"published_timestamp":"2022-11-04T17:02:41Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1243519.png","canonical_url":"https://dev.to/hirendhaduk_/dynamodb-acid-transactions-what-why-how-mcf","created_at":"2022-11-04T17:02:42Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-04T17:02:41Z","last_comment_at":"2022-11-04T17:02:41Z","reading_time_minutes":3,"tag_list":"aws, database, serverless, cloud","tags":["aws","database","serverless","cloud"],"body_html":"<p>Amazon DynamoDB is a fast, flexible, fully managed NoSQL database service designed for single-digit millisecond performance at any scale. And many leading companies, including Disney, Salesforce, Snap Inc, Dropbox, Capital One, and more, use DynamoDB for various use cases.</p>\n\n<p>But if you have worked with DynamoDB, you may have experienced challenges when implementing business logic that requires multiple, all-or-nothing operations within and across one or more tables. To eliminate such complexities and expand use cases, AWS introduced native support for DynamoDB transactions. And yes, DynamoDB also supports ACID transactions! This article discusses what ACID transactions are and why and how you should use them in DynamoDB.</p>\n\n<h2>\n  <a name=\"what-are-acid-transactions\" href=\"#what-are-acid-transactions\">\n  </a>\n  What are ACID transactions?\n</h2>\n\n<p>The term ACID transactions has been around for decades. It describes the ideal properties of database transactions such as below:</p>\n\n<ul>\n<li>\n<strong>Atomic</strong>: A quality that ensures each transaction is fully committed or not at all. It treats each transaction as a single unit of change to the database and cannot be partially completed. The transaction is either committed or rolled back.</li>\n<li>\n<strong>Consistent</strong>: A quality that ensures the database is in a consistent and valid state after a transaction is committed. It prevents the database from being corrupted or causing data integrity issues.</li>\n<li>\n<strong>Isolated</strong>: It guarantees that transactions are not dependent on each other. A transaction is executed in such a way that it does not affect other transactions.</li>\n<li>\n<strong>Durable</strong>: It guarantees that a transaction is committed even if the system fails and there is no breakdown in the event of failures (such as power loss).</li>\n</ul>\n\n<p>DynamoDB is designed to provide ACID transactions along with scalability. The transactions simplify code by executing multiple, all-or-nothing actions within and across tables with a single API call. They also provide atomicity, consistency, isolation, and durability (ACID) in DynamoDB, enabling developers to maintain data correctness in applications more quickly.</p>\n\n<p>DynamoDB provides ACID transactions across one or more tables within a single AWS account and region. And they are available globally in all standard AWS Regions. As for pricing, there is no additional cost to enable transactions for DynamoDB tables. You only pay for reads and writes that are part of your transaction. However, DynamoDB performs two underlying reads or writes of every item in the transaction - one to prepare the transaction and one to commit the transaction. The read/write operations are also visible in Amazon CloudWatch metrics.</p>\n\n<h2>\n  <a name=\"why-use-dynamodb-acid-transactions\" href=\"#why-use-dynamodb-acid-transactions\">\n  </a>\n  Why use DynamoDB ACID transactions?\n</h2>\n\n<p>DynamoDB’s native, server-side support for transactions simplifies the developer experience. They can extend the scale, performance, and enterprise benefits of DynamoDB to a broader range of mission-critical workloads. Many use cases become easier and faster to implement with transactions, such as:</p>\n\n<ul>\n<li>Executing financial transactions</li>\n<li>Managing and fulfilling orders</li>\n<li>Building multiplayer game engines</li>\n<li>Coordinating actions across distributed services and components</li>\n</ul>\n\n<p>You can support more sophisticated workloads and business logic that require updating, adding, and deleting multiple items as a single, all-or-nothing operation. For example, with DynamoDB transactions, you can group multiple actions together and submit them as a single atomic transaction. </p>\n\n<p>For more on how DynamoDB transactions work and best practices for using them, you can refer to this official <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html\">developer guide</a>. And to achieve maximum performance and cost-efficiency in DynamoDB, check out this detailed blog on Amazon <a href=\"https://www.simform.com/blog/dynamodb-best-practices/\">DynamoDB best practices</a>.</p>\n\n<h2>\n  <a name=\"dynamodb-transactions-in-action\" href=\"#dynamodb-transactions-in-action\">\n  </a>\n  DynamoDB transactions in action\n</h2>\n\n<p>Let’s take an example of an online financial transaction to understand DynamoDB transactions in action. You want to order a pizza, so you order it online and pay via the food delivery app. But you do not receive the notification of a successful payment seconds later. Now what?</p>\n\n<p>In this case, there is no need to write or update anything in the database unless all parts of the whole operation are complete. Here, DynamoDB ACID transactions come handy. In the above operation, there are multiple steps that happen almost simultaneously and require all-or-nothing execution as below–</p>\n\n<p>Receive request to make a payment → Verify there are sufficient funds in the originating account → Debit the originating account → Credit the receiving account</p>\n\n<p>Thus, ACID transactions are essential for implementing critical use cases successfully in the cloud. To get started with and enable Amazon DynamoDB transactions, download the latest AWS SDK or the AWS CLI (Command Line Interface). For a better understanding, you can follow these <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-example.html\">DynamoDB transactions examples</a>.</p>\n\n","body_markdown":"Amazon DynamoDB is a fast, flexible, fully managed NoSQL database service designed for single-digit millisecond performance at any scale. And many leading companies, including Disney, Salesforce, Snap Inc, Dropbox, Capital One, and more, use DynamoDB for various use cases.\n\nBut if you have worked with DynamoDB, you may have experienced challenges when implementing business logic that requires multiple, all-or-nothing operations within and across one or more tables. To eliminate such complexities and expand use cases, AWS introduced native support for DynamoDB transactions. And yes, DynamoDB also supports ACID transactions! This article discusses what ACID transactions are and why and how you should use them in DynamoDB.\n\n##What are ACID transactions?\n\nThe term ACID transactions has been around for decades. It describes the ideal properties of database transactions such as below:\n\n- **Atomic**: A quality that ensures each transaction is fully committed or not at all. It treats each transaction as a single unit of change to the database and cannot be partially completed. The transaction is either committed or rolled back.\n- **Consistent**: A quality that ensures the database is in a consistent and valid state after a transaction is committed. It prevents the database from being corrupted or causing data integrity issues.\n- **Isolated**: It guarantees that transactions are not dependent on each other. A transaction is executed in such a way that it does not affect other transactions.\n- **Durable**: It guarantees that a transaction is committed even if the system fails and there is no breakdown in the event of failures (such as power loss).\n\nDynamoDB is designed to provide ACID transactions along with scalability. The transactions simplify code by executing multiple, all-or-nothing actions within and across tables with a single API call. They also provide atomicity, consistency, isolation, and durability (ACID) in DynamoDB, enabling developers to maintain data correctness in applications more quickly.\n\nDynamoDB provides ACID transactions across one or more tables within a single AWS account and region. And they are available globally in all standard AWS Regions. As for pricing, there is no additional cost to enable transactions for DynamoDB tables. You only pay for reads and writes that are part of your transaction. However, DynamoDB performs two underlying reads or writes of every item in the transaction - one to prepare the transaction and one to commit the transaction. The read/write operations are also visible in Amazon CloudWatch metrics.\n\n##Why use DynamoDB ACID transactions?\n\nDynamoDB’s native, server-side support for transactions simplifies the developer experience. They can extend the scale, performance, and enterprise benefits of DynamoDB to a broader range of mission-critical workloads. Many use cases become easier and faster to implement with transactions, such as:\n\n- Executing financial transactions\n- Managing and fulfilling orders\n- Building multiplayer game engines\n- Coordinating actions across distributed services and components\n\nYou can support more sophisticated workloads and business logic that require updating, adding, and deleting multiple items as a single, all-or-nothing operation. For example, with DynamoDB transactions, you can group multiple actions together and submit them as a single atomic transaction. \n\nFor more on how DynamoDB transactions work and best practices for using them, you can refer to this official [developer guide](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html). And to achieve maximum performance and cost-efficiency in DynamoDB, check out this detailed blog on Amazon [DynamoDB best practices](https://www.simform.com/blog/dynamodb-best-practices/).\n\n##DynamoDB transactions in action\n\nLet’s take an example of an online financial transaction to understand DynamoDB transactions in action. You want to order a pizza, so you order it online and pay via the food delivery app. But you do not receive the notification of a successful payment seconds later. Now what?\n\nIn this case, there is no need to write or update anything in the database unless all parts of the whole operation are complete. Here, DynamoDB ACID transactions come handy. In the above operation, there are multiple steps that happen almost simultaneously and require all-or-nothing execution as below–\n\nReceive request to make a payment → Verify there are sufficient funds in the originating account → Debit the originating account → Credit the receiving account\n\n\nThus, ACID transactions are essential for implementing critical use cases successfully in the cloud. To get started with and enable Amazon DynamoDB transactions, download the latest AWS SDK or the AWS CLI (Command Line Interface). For a better understanding, you can follow these [DynamoDB transactions examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-example.html).\n\n","user":{"name":"Hiren Dhaduk","username":"hirendhaduk_","twitter_username":"HirenDhaduk_","github_username":null,"user_id":241665,"website_url":"https://www.simform.com/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ztR8ea1f--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/241665/108cc2e7-b012-4a4a-b566-6387415171b2.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--sMftdP0j--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/241665/108cc2e7-b012-4a4a-b566-6387415171b2.jpg"}}