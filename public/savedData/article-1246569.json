{"type_of":"article","id":1246569,"title":"Superpeer Cloudflare Workers Adventure","description":"Hi everyone üëã,  In this article, I'll explain how we found a solution for our SEO problems in...","readable_publish_date":"Nov 7","slug":"superpeer-cloudflare-workers-adventure-7ld","path":"/akingundogdu/superpeer-cloudflare-workers-adventure-7ld","url":"https://dev.to/akingundogdu/superpeer-cloudflare-workers-adventure-7ld","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-07T15:20:59Z","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--pNe8DpNW--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1uisscp0gs73ov6hb4d.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--yrAc5tXi--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1uisscp0gs73ov6hb4d.png","canonical_url":"https://dev.to/akingundogdu/superpeer-cloudflare-workers-adventure-7ld","created_at":"2022-11-07T12:55:19Z","edited_at":"2022-11-07T15:26:03Z","crossposted_at":null,"published_at":"2022-11-07T15:20:59Z","last_comment_at":"2022-11-07T15:20:59Z","reading_time_minutes":10,"tag_list":"javascript, serverless, programming, webdev","tags":["javascript","serverless","programming","webdev"],"body_html":"<p>Hi everyone üëã,</p>\n\n<p>In this article, I'll explain how we found a solution for our SEO problems in Superpeer and explain all the tools we use in details.</p>\n\n<p>First things first, if you want to dive deep into the problem where it comes from, please read the section below before continuing.</p>\n\n<p><details>\n  <summary>## What is the main problem?</summary>\n  <h2>\n  <a name=\"what-is-the-main-problem\" href=\"#what-is-the-main-problem\">\n  </a>\n  What is the main problem?\n</h2>\n\n<p>JavaScript web pages make SEO an already tricky field, much more complicated.</p>\n\n<p>SEO is one of the more technical fields within the digital marketing space. It‚Äôs like the popular circus act where the juggler spins three plates on poles. Technical SEO is like doing that on a tightrope. JavaScript SEO is lighting the tightrope, the plates, and yourself on fire.</p>\n\n<p>It‚Äôs a tricky balancing act. Not only does your website need to be formatted in a way that makes it easy for search engines to process it, but it needs to perform better and load faster than the competition.</p>\n\n<p>However, the nice thing about technical SEO is that you have direct control over one of the ranking factors.</p>\n\n<p>How do you make your JavaScript website easy for Google to read and understand while giving your visitors a good web experience at the same time?</p>\n\n<p>The answer: <strong><em>Dynamic rendering.</em></strong></p>\n<h2>\n  <a name=\"what-happens-when-google-visits-your-webpage\" href=\"#what-happens-when-google-visits-your-webpage\">\n  </a>\n  What Happens When Google Visits Your Webpage\n</h2>\n\n<p>Google uses an automated program, known as a bot, to index and catalogue every web page on the Internet.</p>\n\n<p>Google‚Äôs stated purpose is to provide the user with the best possible result for a given query. To accomplish this, it seeks to understand what content is on a given web page and assess its relative importance to other web pages about the same topic.</p>\n\n<p>Most modern web development is done with three main programming languages: HTML, CSS, and JavaScript.</p>\n\n<p><a href=\"https://www.searchenginejournal.com/rendering-seo-introduction/330399/#close\">Google processes HTML</a> in two steps: crawl and index. First, Googlebot crawls the HTML on a page. It reads the text and outgoing links on a page and parses out the keywords that help determine what the web page is about. Then, Googlebot indexes the page.</p>\n\n<p>Google, and other search engines, prefer content that‚Äôs rendered in static HTML.</p>\n\n<p>With JavaScript, this process is more complicated. Rendering JavaScript comes in three stages:</p>\n\n<ul>\n<li>Crawl</li>\n<li>Render</li>\n<li>Index</li>\n</ul>\n\n<p>Google has to process JavaScript multiple times in order for it to fully understand the content in it. This process is known as rendering. When Google encounters JavaScript on a web page, it puts it into a queue and comes back to it once it has the resources to render it.</p>\n<h2>\n  <a name=\"the-problem-with-javascript-seo\" href=\"#the-problem-with-javascript-seo\">\n  </a>\n  The Problem With JavaScript SEO\n</h2>\n\n<p>HTML is standard in web development. Search engines can render HTML-based content easily. By comparison, it‚Äôs more difficult for search engines to process Javascript. It‚Äôs resource-intensive.</p>\n\n<p>What this means is that web pages based on JavaScript eat up your crawl budget. Google states that its web crawler can process JavaScript. However, this hasn‚Äôt yet been proven. It requires more resources from Google to crawl, index, and render your JavaScript pages. Other search engines such as Bing and DuckDuckGo are unable to parse JavaScript at all.</p>\n\n<p>Because search engines have to use more resources to render your JavaScript pages, it‚Äôs likely many elements of your page won‚Äôt get indexed at all. Google and other search engines could skip over your metadata and canonical tags, for example, which are critical for SEO.</p>\n\n<p>The thing is, Javascript provides a good user experience. It‚Äôs the reason why you‚Äôre able to make flashy websites that make your users go, ‚ÄúWow, that was so cool!‚Äù</p>\n\n<p>How do you make a modern web experience without sacrificing your SEO?</p>\n\n<p>Most developers accomplish this with server-side rendering. üòÖ</p>\n<h2>\n  <a name=\"whats-the-difference-between-clientside-and-serverside-rendering\" href=\"#whats-the-difference-between-clientside-and-serverside-rendering\">\n  </a>\n  What‚Äôs the Difference Between Client-side and Server-side Rendering?\n</h2>\n\n<p>Most JavaScript frameworks such as Angular, Vue, and React default to client-side rendering. They wait to fully load your web page‚Äôs content until they can do so within the browser on the user‚Äôs end. In other words, they render the content for humans rather than on the server for search engines to see it.</p>\n\n<p>Client-side rendering is cheaper than other alternatives. It also reduces the strain on your servers without adding more work for your developers.</p>\n\n<p>However, it carries the chance of a poor user experience. For example, it adds seconds of load time to your web pages, which can lead to a high bounce rate.</p>\n\n<p>Client-side rendering affects bots as well. Googlebot uses a two-wave indexing system. It crawls and indexes the static HTML first and then crawls the JavaScript content once it has the resources. This means your JavaScript content might be missed in the indexing process.</p>\n\n<p>That isn‚Äôt good. You need Google to see that content if you want to rank higher than your competitors and to be found by your customers.</p>\n\n<p>So what‚Äôs the alternative? For most development teams, it‚Äôs server-side rendering: configuring your JavaScript so that content is rendered on your website‚Äôs own server rather than on the client-side browser.</p>\n\n<p>This renders your JavaScript content in advance, making it readable for bots. SSR has performance benefits as well. Both bots and humans get faster experiences, and there‚Äôs no risk of partial indexing or missing content.</p>\n<h2>\n  <a name=\"so-why-doesnt-everyone-just-use-serverside-rendering\" href=\"#so-why-doesnt-everyone-just-use-serverside-rendering\">\n  </a>\n  So, Why Doesn‚Äôt Everyone Just Use Server-Side Rendering?\n</h2>\n\n<p>If server-side rendering were easy, then every website would do it, and <a href=\"https://developers.google.com/search/docs/guides/javascript-seo-basics\">JavaScript SEO</a> wouldn‚Äôt be a problem. But, server-side rendering isn‚Äôt easy.</p>\n\n<p>SSR is expensive, time-consuming, and difficult to execute. You need a competent web development team to put it in place.</p>\n<h2>\n  <a name=\"end\" href=\"#end\">\n  </a>\n  end\n</h2>\n\n\n</details>\n</p>\n\n<h2>\n  <a name=\"how-did-we-found-solutions-to-all-of-these-problems-in-superpeer\" href=\"#how-did-we-found-solutions-to-all-of-these-problems-in-superpeer\">\n  </a>\n  How did we found solutions to all of these problems in Superpeer?\n</h2>\n\n<p>Superpeer uses Vue.js in the frontend part like most modern companies, and since it works completely in SPA structure, we have experienced these problems.</p>\n\n<p>We thought it would take a lot of time to make changes in the existing code base structure to convert it to a hybrid system like SSR to find solutions to the SEO problem.</p>\n\n<p>Forget all things; we don't want to make architecture level changes in our code for SEO or SSR because superpeer is actively working in production, and we make super-fast feature deployment almost every week, which is very risky for us. Therefore we wanted to solve these problems by trying different ways.</p>\n\n<p>As a result of all these experiences, we thought that <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a> would solve our problems, and after a certain R&amp;D process, we decided to proceed with Cloudflare Workers on this adventure.</p>\n\n<p>Apart from our SEO issues, we were hosting the Superpeer's frontend on Netlify. Netlify has many advantages as well as disadvantages. We were experiencing some caching problems, especially in production deployments, and that things take many disadvantages for us. During R&amp;D time, we were very happy when we saw Cloudflare Workers serving a static site.</p>\n\n<p>Let's deep dive into each process that we have done in Superpeer Cloudflare Workers process.</p>\n\n<h2>\n  <a name=\"serve-superpeer-frontend-on-cloudflare-workers%C2%A0sites\" href=\"#serve-superpeer-frontend-on-cloudflare-workers%C2%A0sites\">\n  </a>\n  Serve Superpeer frontend on Cloudflare Workers¬†Sites\n</h2>\n\n<p>Cloudflare Workers have the ability to serve a static site. After getting acquainted with this ability, we decided to transfer our frontend serving into here. After building a frontend application before the deployment stage, we deploy to our built dist directory with the wrangler CLI of Cloudflare Workers.</p>\n\n<p>Wrangler is a superpower CLI, and it helps to make a lot of things in a single command script. To work with this, you need to create a configuration file, as seen below.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b8MbfJD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rjlyhcnyzdktln9hj6k.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b8MbfJD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rjlyhcnyzdktln9hj6k.png\" alt=\"Wrangler. toml file\" loading=\"lazy\" width=\"880\" height=\"298\"></a></p>\n\n<h2>\n  <a name=\"how-did-cloudflare-workers-help-to-work-raw-indexhtml-endraw-page-like-ssr\" href=\"#how-did-cloudflare-workers-help-to-work-raw-indexhtml-endraw-page-like-ssr\">\n  </a>\n  How did Cloudflare workers help to work <code>index.html</code> page like SSR?\n</h2>\n\n<p>As you may know, all SPA frameworks need a starting point to render, and this is index.html in all of them.</p>\n\n<p>In Superpeer frontend structure, the Vue.js searches for the <code>#app</code> div HTML tag in index.html for the rendering process.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qwjp5fE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao56q4jec2j3pv6dyle6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qwjp5fE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao56q4jec2j3pv6dyle6.png\" alt=\"Superpeer index.html file\" loading=\"lazy\" width=\"880\" height=\"252\"></a></p>\n\n<p>As you can see in the picture above, we have defined the div element with <code>#content-placeholder</code> id in the body tags, and we make a request to the backend API from the Cloudflare Workers index.js file to fetch the HTML that we need to be rendered for SEO. This method allows our pages to work like SSR.</p>\n\n<p>If you go to <code>www.superpeer.com/akingundogdu</code> address and view page source, you can see rendered HTML.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mVdxoyd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fxqls43ellwo3yhfb3f.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mVdxoyd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fxqls43ellwo3yhfb3f.png\" alt=\"Our host landing page content placeholder section\" loading=\"lazy\" width=\"880\" height=\"519\"></a></p>\n\n<h2>\n  <a name=\"open-graph-meta-tags-implementation\" href=\"#open-graph-meta-tags-implementation\">\n  </a>\n  Open Graph meta tags implementation\n</h2>\n\n<p>Open Graph meta tags are snippets of code that control how URLs are displayed when shared on social media.</p>\n\n<p>They‚Äôre part of Facebook‚Äôs Open Graph protocol and are also used by other social media sites, including LinkedIn and Twitter (if Twitter Cards are absent).</p>\n\n<p>You can find them in the <code>&lt;head&gt;</code> section of a webpage. Any tags <code>og:</code> before a property name are Open Graph tags. If you want to get more knowledge about that, you can read it here.</p>\n\n<p>We have added the necessary meta tags to our <code>index.html</code> page, as shown in the picture below.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZYtIKcbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g4whglohgndbzd8rntg.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZYtIKcbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g4whglohgndbzd8rntg.png\" alt=\"index.html meta tags\" loading=\"lazy\" width=\"880\" height=\"282\"></a></p>\n\n<p>In the Cloudflare Workers <code>index.js</code> file, we replaced the related meta tags ‚Äãwith the data we fetched from the backend API.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--L8G_xjid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwlnxmc5558xpjq1878.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--L8G_xjid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwlnxmc5558xpjq1878.png\" alt=\"CF Worker index.js\" loading=\"lazy\" width=\"880\" height=\"334\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y_NknpQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5lrs8o9xnaibjhke8ky.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y_NknpQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5lrs8o9xnaibjhke8ky.png\" alt=\"Our host landing page meta tags\" loading=\"lazy\" width=\"880\" height=\"592\"></a></p>\n\n<h2>\n  <a name=\"lets-deep-dive-cloudflare-workers-indexjs-file\" href=\"#lets-deep-dive-cloudflare-workers-indexjs-file\">\n  </a>\n  Let‚Äôs deep dive Cloudflare Workers index.js file.\n</h2>\n\n<p>All that we have explained above are working in Cloudflare Workers <code>index.js</code> file. In this chapter, I‚Äôll be explaining how Cloudflare Workers manage these process starting from the coming first request on the <code>www.superpeer.com</code>.</p>\n\n<p>Since we serve our frontend on Cloudflare Workers, we don‚Äôt need to do anything extra for our HTML, CSS, Font, etc. files and also Cloudflare Workers runs automatically for each request coming to <code>www.superpeer.com</code> domain.</p>\n\n<h2>\n  <a name=\"how-does-raw-shouldfetch-endraw-variable-decided-path\" href=\"#how-does-raw-shouldfetch-endraw-variable-decided-path\">\n  </a>\n  How does <code>shouldFetch</code> variable decided path\n</h2>\n\n<p>If you go to <code>www.superpeer.com/akingundogdu</code> address, you will see that many files have been requested.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xkXuYWSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb678wt0uqa2b0qtq9k3.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xkXuYWSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb678wt0uqa2b0qtq9k3.png\" alt=\"Network\" loading=\"lazy\" width=\"880\" height=\"742\"></a></p>\n\n<p>If we don‚Äôt control and separate these incoming requests, we‚Äôll make too many backend API requests, and it would cause unnecessary delays in response times. To solve that, we separate these requests using the regex, as you have seen in the picture below, to decrease backend API requests.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lOI8c1oU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q57ou51fdhn13xr2f6g.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lOI8c1oU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q57ou51fdhn13xr2f6g.png\" alt=\"ShouldFetch Regex\" loading=\"lazy\" width=\"880\" height=\"217\"></a></p>\n\n<p>If the client makes a request to <code>www.superpeer.com/akingundogdu</code> address, shouldFetch variable return the true, if <code>www.superpeer.com/xxxx.js|css</code> request comes, <code>shouldFetch</code> variable return the false.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r3cfLh2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b2elscikbgkihsnbj8j.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r3cfLh2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b2elscikbgkihsnbj8j.png\" alt=\"ShouldFetch decide section\" loading=\"lazy\" width=\"880\" height=\"233\"></a></p>\n\n<h2>\n  <a name=\"how-cloudflare-workers-fetch-necessary-data-from-backend-api\" href=\"#how-cloudflare-workers-fetch-necessary-data-from-backend-api\">\n  </a>\n  How Cloudflare Workers fetch necessary data from backend API?\n</h2>\n\n<p>To get the necessary data, Cloudflare Workers makes a request <code>flash.superpeer.com</code> with the URL.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LET0Ql65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odud5ffrf88ee6jy6nko.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LET0Ql65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odud5ffrf88ee6jy6nko.png\" alt=\"The code section of Fetching data from the Superpeer‚Äôs API\" loading=\"lazy\" width=\"880\" height=\"400\"></a></p>\n\n<p>On the backend side, the incoming URL is parsed, the necessary parameters in the URL are taken, and the required business logic is adapted page by page and the desired data and HTML return as a JSON response.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XbL4TK_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezknjtjd400w4221eeo5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XbL4TK_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezknjtjd400w4221eeo5.png\" alt=\"Backend API Logic\" loading=\"lazy\" width=\"880\" height=\"670\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nmha88U2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfnqkafner0tq1d3kzx9.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nmha88U2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfnqkafner0tq1d3kzx9.png\" alt=\"Backend API result\" loading=\"lazy\" width=\"880\" height=\"445\"></a></p>\n\n<p>After the worker fetched the data it needs from the backend API, it renders the HTML content to be served from the Cloudflare Workers <code>KV</code> and replaces the meta tags in the <code>index.html</code> file using the <code>handleReplacement</code> function.</p>\n\n<p>Also, the HTMLRewriter of Cloudflare Workers, handles replacing the HTML process quickly with the transform method without string processing.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b2R0_xPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yso9o26cz5pc42ahde5d.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b2R0_xPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yso9o26cz5pc42ahde5d.png\" alt=\"Cloudflare Worker Main Logic\" loading=\"lazy\" width=\"880\" height=\"449\"></a></p>\n\n<h2>\n  <a name=\"why-do-we-use-cloudflare-workers-kv-for\" href=\"#why-do-we-use-cloudflare-workers-kv-for\">\n  </a>\n  Why do we use Cloudflare Workers KV for?\n</h2>\n\n<p>We use KV to cache all coming requests based on URLs. As an example, when the request to <code>www.superpeer.com/akingundogdu</code> address, if it is in the <code>KV</code> by route, it directly returns the cached result as a response. This mechanism has a positive effect on response performances and backend API requests.</p>\n\n<p>The picture below shows the <code>SUPERPEER_KV</code> key-value store namespace, which is specially set for the production environment.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--B_rcbvqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8dkzflt4wey1ry44fge.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--B_rcbvqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8dkzflt4wey1ry44fge.png\" alt=\"Cloudflare SUPERPEER_KV variable\" loading=\"lazy\" width=\"880\" height=\"205\"></a></p>\n\n<p>Using the Cloudflare Workers environment structure as the cache key, we generate a unique id for each deployment and dynamically set it to the environment variable name. <code>RELEASE_ID</code>.</p>\n\n<p>Example for cache key <code>@RELEASE_ID_www.superpeer.com/akingundogdu@</code></p>\n\n<p>In this way, all of our caches are automatically invalidated every time we do a new deployment. In the picture below, you can see the latest <code>RELEASE_ID</code> assigned as the <code>ENV</code> variable.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uNxAeEWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp4jqdkgqtighfj53weq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uNxAeEWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp4jqdkgqtighfj53weq.png\" alt=\"ENV variable screen for superpeer.com\" loading=\"lazy\" width=\"880\" height=\"247\"></a></p>\n\n<p>You can see the cached HTML sources stored in <code>SUPERPEER_KV</code> according to these keys.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ONzKbJuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9uem8ki46xorkmi0yo5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ONzKbJuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9uem8ki46xorkmi0yo5.png\" alt=\"Cached HTML results by URL\" loading=\"lazy\" width=\"880\" height=\"211\"></a></p>\n\n<p>In the picture below, you can see all the codes explaining the entire Cloudflare Workers process.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TZnwbVeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnzosqhqc9ppr6uign21.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TZnwbVeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnzosqhqc9ppr6uign21.png\" alt=\"Cloudflare Workers index.js\" loading=\"lazy\" width=\"880\" height=\"607\"></a></p>\n\n<h2>\n  <a name=\"how-superpeer-work-after-using-cloudflare-workers\" href=\"#how-superpeer-work-after-using-cloudflare-workers\">\n  </a>\n  How Superpeer work after using Cloudflare Workers?\n</h2>\n\n<p>There are many types of pages in the superpeer, and these pages can be shared on many platforms. We solved our problems by creating different special templates for these pages.</p>\n\n<p>You can see all results by template types</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AylsDaBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk6pe0z4s00x6jy7eku8.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AylsDaBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk6pe0z4s00x6jy7eku8.png\" alt=\"Our host landing page link preview on slack\" loading=\"lazy\" width=\"631\" height=\"462\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Mp5LlGGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yykdhzc94vbcru02wf3i.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Mp5LlGGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yykdhzc94vbcru02wf3i.png\" alt=\"Our host landing page link preview on Twitter\" loading=\"lazy\" width=\"880\" height=\"445\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XtqMuPUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz2np1ishp56kwl9n3cm.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XtqMuPUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz2np1ishp56kwl9n3cm.png\" alt=\"Our event detail page link preview on slack\" loading=\"lazy\" width=\"880\" height=\"557\"></a></p>\n\n<p>Thank you very much for reading so far! ‚ù§Ô∏è</p>\n\n<p>If you have any questions, don‚Äôt hesitate to contact the following platforms.</p>\n\n<p>Thanks, üëã</p>\n\n<p>Platforms: <a href=\"https://www.linkedin.co.uk/in/akingundogdu\">Linkedin</a>, <a href=\"https://twitter.com/akngundogdu\">Twitter</a>, <a href=\"https://superpeer.com/akingundogdu\">Superpeer</a></p>\n\n<p>Referenced Sources:</p>\n\n<p><u><a href=\"https://www.youtube.com/watch?v=WFlDSL7Nrzw\">https://www.youtube.com/watch?v=WFlDSL7Nrzw</a></u></p>\n\n<p><u><a href=\"https://www.youtube.com/watch?v=KMEgJRqYzzg\">https://www.youtube.com/watch?v=KMEgJRqYzzg</a><br>\n</u><br>\n<u><a href=\"https://www.youtube.com/watch?v=QcXmGQqtUn0\">https://www.youtube.com/watch?v=QcXmGQqtUn0</a><br>\n</u><br>\n<u><a href=\"https://www.youtube.com/watch?v=5dkzFrJ044o\">https://www.youtube.com/watch?v=5dkzFrJ044o</a><br>\n</u><br>\n<u><a href=\"https://www.youtube.com/watch?v=48NWaLkDcME\">https://www.youtube.com/watch?v=48NWaLkDcME</a><br>\n</u><br>\n<u><a href=\"https://www.youtube.com/watch?v=4lGzIZqVN8Q\">https://www.youtube.com/watch?v=4lGzIZqVN8Q</a><br>\n</u><br>\n<u><a href=\"https://www.smashingmagazine.com/\">https://www.smashingmagazine.com/</a><br>\n</u><br>\n<u><a href=\"https://www.cloudflare.com/\">https://www.cloudflare.com/</a><br>\n</u><br>\n<u><a href=\"https://prerender.io/\">https://prerender.io/</a><br>\n</u><br>\n<a href=\"https://developers.cloudflare.com/\">https://developers.cloudflare.com/</a></p>\n\n","body_markdown":"Hi everyone üëã,\n\nIn this article, I'll explain how we found a solution for our SEO problems in Superpeer and explain all the tools we use in details.\n\nFirst things first, if you want to dive deep into the problem where it comes from, please read the section below before continuing.\n\n{% details ## What is the main problem? %} \n\n## What is the main problem?\n\nJavaScript web pages make SEO an already tricky field, much more complicated.\n\n\nSEO is one of the more technical fields within the digital marketing space. It‚Äôs like the popular circus act where the juggler spins three plates on poles. Technical SEO is like doing that on a tightrope. JavaScript SEO is lighting the tightrope, the plates, and yourself on fire.\n\nIt‚Äôs a tricky balancing act. Not only does your website need to be formatted in a way that makes it easy for search engines to process it, but it needs to perform better and load faster than the competition.\n\nHowever, the nice thing about technical SEO is that you have direct control over one of the ranking factors.\n\nHow do you make your JavaScript website easy for Google to read and understand while giving your visitors a good web experience at the same time?\n\nThe answer: **_Dynamic rendering._**\n\n\n\n\n## What Happens When Google Visits Your Webpage\n\nGoogle uses an automated program, known as a bot, to index and catalogue every web page on the Internet.\n\nGoogle‚Äôs stated purpose is to provide the user with the best possible result for a given query. To accomplish this, it seeks to understand what content is on a given web page and assess its relative importance to other web pages about the same topic.\n\nMost modern web development is done with three main programming languages: HTML, CSS, and JavaScript.\n\n[Google processes HTML](https://www.searchenginejournal.com/rendering-seo-introduction/330399/#close) in two steps: crawl and index. First, Googlebot crawls the HTML on a page. It reads the text and outgoing links on a page and parses out the keywords that help determine what the web page is about. Then, Googlebot indexes the page.\n\nGoogle, and other search engines, prefer content that‚Äôs rendered in static HTML.\n\nWith JavaScript, this process is more complicated. Rendering JavaScript comes in three stages:\n\n- Crawl\n- Render\n- Index\n\nGoogle has to process JavaScript multiple times in order for it to fully understand the content in it. This process is known as rendering. When Google encounters JavaScript on a web page, it puts it into a queue and comes back to it once it has the resources to render it.\n\n## The Problem With JavaScript SEO\n\nHTML is standard in web development. Search engines can render HTML-based content easily. By comparison, it‚Äôs more difficult for search engines to process Javascript. It‚Äôs resource-intensive.\n\nWhat this means is that web pages based on JavaScript eat up your crawl budget. Google states that its web crawler can process JavaScript. However, this hasn‚Äôt yet been proven. It requires more resources from Google to crawl, index, and render your JavaScript pages. Other search engines such as Bing and DuckDuckGo are unable to parse JavaScript at all.\n\nBecause search engines have to use more resources to render your JavaScript pages, it‚Äôs likely many elements of your page won‚Äôt get indexed at all. Google and other search engines could skip over your metadata and canonical tags, for example, which are critical for SEO.\n\nThe thing is, Javascript provides a good user experience. It‚Äôs the reason why you‚Äôre able to make flashy websites that make your users go, ‚ÄúWow, that was so cool!‚Äù\n\nHow do you make a modern web experience without sacrificing your SEO?\n\nMost developers accomplish this with server-side rendering. üòÖ\n\n\n## What‚Äôs the Difference Between Client-side and Server-side Rendering?\n\nMost JavaScript frameworks such as Angular, Vue, and React default to client-side rendering. They wait to fully load your web page‚Äôs content until they can do so within the browser on the user‚Äôs end. In other words, they render the content for humans rather than on the server for search engines to see it.\n\nClient-side rendering is cheaper than other alternatives. It also reduces the strain on your servers without adding more work for your developers.\n\nHowever, it carries the chance of a poor user experience. For example, it adds seconds of load time to your web pages, which can lead to a high bounce rate.\n\nClient-side rendering affects bots as well. Googlebot uses a two-wave indexing system. It crawls and indexes the static HTML first and then crawls the JavaScript content once it has the resources. This means your JavaScript content might be missed in the indexing process.\n\nThat isn‚Äôt good. You need Google to see that content if you want to rank higher than your competitors and to be found by your customers.\n\nSo what‚Äôs the alternative? For most development teams, it‚Äôs server-side rendering: configuring your JavaScript so that content is rendered on your website‚Äôs own server rather than on the client-side browser.\n\nThis renders your JavaScript content in advance, making it readable for bots. SSR has performance benefits as well. Both bots and humans get faster experiences, and there‚Äôs no risk of partial indexing or missing content.\n\n## So, Why Doesn‚Äôt Everyone Just Use Server-Side Rendering?\n\nIf server-side rendering were easy, then every website would do it, and [JavaScript SEO](https://developers.google.com/search/docs/guides/javascript-seo-basics) wouldn‚Äôt be a problem. But, server-side rendering isn‚Äôt easy.\n\nSSR is expensive, time-consuming, and difficult to execute. You need a competent web development team to put it in place.\n\n## end\n{% enddetails %}\n\n\n## How did we found solutions to all of these problems in Superpeer?\n\nSuperpeer uses Vue.js in the frontend part like most modern companies, and since it works completely in SPA structure, we have experienced these problems.\n\nWe thought it would take a lot of time to make changes in the existing code base structure to convert it to a hybrid system like SSR to find solutions to the SEO problem.\n\nForget all things; we don't want to make architecture level changes in our code for SEO or SSR because superpeer is actively working in production, and we make super-fast feature deployment almost every week, which is very risky for us. Therefore we wanted to solve these problems by trying different ways.\n\nAs a result of all these experiences, we thought that [Cloudflare Workers](https://workers.cloudflare.com/) would solve our problems, and after a certain R&D process, we decided to proceed with Cloudflare Workers on this adventure.\n\nApart from our SEO issues, we were hosting the Superpeer's frontend on Netlify. Netlify has many advantages as well as disadvantages. We were experiencing some caching problems, especially in production deployments, and that things take many disadvantages for us. During R&D time, we were very happy when we saw Cloudflare Workers serving a static site.\n\nLet's deep dive into each process that we have done in Superpeer Cloudflare Workers process.\n\n## Serve Superpeer frontend on Cloudflare Workers¬†Sites\n\nCloudflare Workers have the ability to serve a static site. After getting acquainted with this ability, we decided to transfer our frontend serving into here. After building a frontend application before the deployment stage, we deploy to our built dist directory with the wrangler CLI of Cloudflare Workers.\n\nWrangler is a superpower CLI, and it helps to make a lot of things in a single command script. To work with this, you need to create a configuration file, as seen below.\n\n\n![Wrangler. toml file](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rjlyhcnyzdktln9hj6k.png)\n\n## How did Cloudflare workers help to work `index.html` page like SSR?\n\nAs you may know, all SPA frameworks need a starting point to render, and this is index.html in all of them.\n\nIn Superpeer frontend structure, the Vue.js searches for the `#app` div HTML tag in index.html for the rendering process.\n\n\n![Superpeer index.html file](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao56q4jec2j3pv6dyle6.png)\n\n\nAs you can see in the picture above, we have defined the div element with `#content-placeholder` id in the body tags, and we make a request to the backend API from the Cloudflare Workers index.js file to fetch the HTML that we need to be rendered for SEO. This method allows our pages to work like SSR.\n\nIf you go to `www.superpeer.com/akingundogdu` address and view page source, you can see rendered HTML.\n\n![Our host landing page content placeholder section](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fxqls43ellwo3yhfb3f.png)\n\n\n## Open Graph meta tags implementation\n\nOpen Graph meta tags are snippets of code that control how URLs are displayed when shared on social media.\n\nThey‚Äôre part of Facebook‚Äôs Open Graph protocol and are also used by other social media sites, including LinkedIn and Twitter (if Twitter Cards are absent).\n\nYou can find them in the `<head>` section of a webpage. Any tags `og:` before a property name are Open Graph tags. If you want to get more knowledge about that, you can read it here.\n\nWe have added the necessary meta tags to our `index.html` page, as shown in the picture below.\n\n\n![index.html meta tags](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g4whglohgndbzd8rntg.png)\n\n\nIn the Cloudflare Workers `index.js` file, we replaced the related meta tags ‚Äãwith the data we fetched from the backend API.\n\n![CF Worker index.js](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwlnxmc5558xpjq1878.png)\n\n\n\n![Our host landing page meta tags](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5lrs8o9xnaibjhke8ky.png)\n\n\n\n## Let‚Äôs deep dive Cloudflare Workers index.js file.\n\nAll that we have explained above are working in Cloudflare Workers `index.js` file. In this chapter, I‚Äôll be explaining how Cloudflare Workers manage these process starting from the coming first request on the `www.superpeer.com`.\n\nSince we serve our frontend on Cloudflare Workers, we don‚Äôt need to do anything extra for our HTML, CSS, Font, etc. files and also Cloudflare Workers runs automatically for each request coming to `www.superpeer.com` domain.\n\n## How does `shouldFetch` variable decided path\n\nIf you go to `www.superpeer.com/akingundogdu` address, you will see that many files have been requested.\n\n\n![Network](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb678wt0uqa2b0qtq9k3.png)\n\nIf we don‚Äôt control and separate these incoming requests, we‚Äôll make too many backend API requests, and it would cause unnecessary delays in response times. To solve that, we separate these requests using the regex, as you have seen in the picture below, to decrease backend API requests.\n\n\n![ShouldFetch Regex](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q57ou51fdhn13xr2f6g.png)\n\nIf the client makes a request to `www.superpeer.com/akingundogdu` address, shouldFetch variable return the true, if `www.superpeer.com/xxxx.js|css` request comes, `shouldFetch` variable return the false.\n\n\n![ShouldFetch decide section](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b2elscikbgkihsnbj8j.png)\n\n\n## How Cloudflare Workers fetch necessary data from backend API?\n\nTo get the necessary data, Cloudflare Workers makes a request `flash.superpeer.com` with the URL.\n\n![The code section of Fetching data from the Superpeer‚Äôs API](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odud5ffrf88ee6jy6nko.png)\n\nOn the backend side, the incoming URL is parsed, the necessary parameters in the URL are taken, and the required business logic is adapted page by page and the desired data and HTML return as a JSON response.\n\n\n![Backend API Logic](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezknjtjd400w4221eeo5.png)\n\n\n![Backend API result](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfnqkafner0tq1d3kzx9.png)\n\n\nAfter the worker fetched the data it needs from the backend API, it renders the HTML content to be served from the Cloudflare Workers `KV` and replaces the meta tags in the `index.html` file using the `handleReplacement` function.\n\nAlso, the HTMLRewriter of Cloudflare Workers, handles replacing the HTML process quickly with the transform method without string processing.\n\n\n![Cloudflare Worker Main Logic](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yso9o26cz5pc42ahde5d.png)\n\n## Why do we use Cloudflare Workers KV for?\n\nWe use KV to cache all coming requests based on URLs. As an example, when the request to `www.superpeer.com/akingundogdu` address, if it is in the `KV` by route, it directly returns the cached result as a response. This mechanism has a positive effect on response performances and backend API requests.\n\nThe picture below shows the `SUPERPEER_KV` key-value store namespace, which is specially set for the production environment.\n\n\n![Cloudflare SUPERPEER_KV variable](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8dkzflt4wey1ry44fge.png)\n\n\nUsing the Cloudflare Workers environment structure as the cache key, we generate a unique id for each deployment and dynamically set it to the environment variable name. `RELEASE_ID`.\n\nExample for cache key `@RELEASE_ID_www.superpeer.com/akingundogdu@`\n\nIn this way, all of our caches are automatically invalidated every time we do a new deployment. In the picture below, you can see the latest `RELEASE_ID` assigned as the `ENV` variable.\n\n\n![ENV variable screen for superpeer.com](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp4jqdkgqtighfj53weq.png)\n\nYou can see the cached HTML sources stored in `SUPERPEER_KV` according to these keys.\n\n\n\n![Cached HTML results by URL](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9uem8ki46xorkmi0yo5.png)\n\n\nIn the picture below, you can see all the codes explaining the entire Cloudflare Workers process.\n\n\n![Cloudflare Workers index.js](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnzosqhqc9ppr6uign21.png)\n\n\n## How Superpeer work after using Cloudflare Workers?\n\nThere are many types of pages in the superpeer, and these pages can be shared on many platforms. We solved our problems by creating different special templates for these pages.\n\nYou can see all results by template types\n\n\n\n![Our host landing page link preview on slack](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk6pe0z4s00x6jy7eku8.png)\n\n\n![Our host landing page link preview on Twitter](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yykdhzc94vbcru02wf3i.png)\n\n\n![Our event detail page link preview on slack](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz2np1ishp56kwl9n3cm.png)\n\n\nThank you very much for reading so far! ‚ù§Ô∏è\n\nIf you have any questions, don‚Äôt hesitate to contact the following platforms.\n\nThanks, üëã\n\nPlatforms: [Linkedin](https://www.linkedin.co.uk/in/akingundogdu), [Twitter](https://twitter.com/akngundogdu), [Superpeer](https://superpeer.com/akingundogdu)\n\nReferenced Sources:\n\n<u>https://www.youtube.com/watch?v=WFlDSL7Nrzw</u>\n\n<u>https://www.youtube.com/watch?v=KMEgJRqYzzg\n</u>\n<u>https://www.youtube.com/watch?v=QcXmGQqtUn0\n</u>\n<u>https://www.youtube.com/watch?v=5dkzFrJ044o\n</u>\n<u>https://www.youtube.com/watch?v=48NWaLkDcME\n</u>\n<u>https://www.youtube.com/watch?v=4lGzIZqVN8Q\n</u>\n<u>https://www.smashingmagazine.com/\n</u>\n<u>https://www.cloudflare.com/\n</u>\n<u>https://prerender.io/\n</u>\nhttps://developers.cloudflare.com/\n","user":{"name":"Akƒ±n G√ºndoƒüdu","username":"akingundogdu","twitter_username":"akngundogdu","github_username":"akingundogdu","user_id":967672,"website_url":"https://www.linkedin.co.uk/in/akingundogdu","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--MVY-WvuV--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/967672/a38e6352-4501-43b5-b16a-71e6128b2beb.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--7csYO_7X--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/967672/a38e6352-4501-43b5-b16a-71e6128b2beb.jpg"}}