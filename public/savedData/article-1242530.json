{"type_of":"article","id":1242530,"title":"React.js Controlled vs Uncontrolled","description":"Controlled Components   These components are controlled by react state. For example, if we...","readable_publish_date":"Nov 4","slug":"reactjs-controlled-vs-uncontrolled-8n3","path":"/pedrouzcategui/reactjs-controlled-vs-uncontrolled-8n3","url":"https://dev.to/pedrouzcategui/reactjs-controlled-vs-uncontrolled-8n3","comments_count":3,"public_reactions_count":18,"collection_id":null,"published_timestamp":"2022-11-04T01:18:45Z","positive_reactions_count":18,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1242530.png","canonical_url":"https://dev.to/pedrouzcategui/reactjs-controlled-vs-uncontrolled-8n3","created_at":"2022-11-04T01:18:46Z","edited_at":"2022-11-04T01:21:20Z","crossposted_at":null,"published_at":"2022-11-04T01:18:45Z","last_comment_at":"2022-11-04T16:53:31Z","reading_time_minutes":2,"tag_list":"react, reactnative, javascript, webdev","tags":["react","reactnative","javascript","webdev"],"body_html":"<h2>\n  <a name=\"controlled-components\" href=\"#controlled-components\">\n  </a>\n  Controlled Components\n</h2>\n\n<p>These components are controlled by react state. For example, if we have a form, and we have the model of that form represented by a react state, and the inputs are linked as two way binding (menaning that changing the input value will change the react state, and that input value is going to be the value of that state) then we have a controlled component.</p>\n\n<p>We can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">setName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleSubmit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">`Name: </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"App\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>Controlled Component<span class=\"p\">&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">onSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSubmit</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>Name:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"name\"</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">name</span><span class=\"si\">}</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setName</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"submit\"</span><span class=\"p\">&gt;</span>Submit<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"uncontrolled-components\" href=\"#uncontrolled-components\">\n  </a>\n  Uncontrolled Components\n</h2>\n\n<p>These components, by definition, are not controlled by the react state, but by the DOM (Document Object Model)</p>\n\n<p>These components uses ref to access their own state.</p>\n\n<p>Usually, uncontrolled components are dependant on the browser, like Inputs of every type, Window Resizing, HTML Canvas Elements, and so on.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useRef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">inputRef</span> <span class=\"o\">=</span> <span class=\"nx\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleSubmit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">`Name: </span><span class=\"p\">${</span><span class=\"nx\">inputRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"App\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>Uncontrolled Component<span class=\"p\">&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">onSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSubmit</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>Name :<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"name\"</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">inputRef</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"submit\"</span><span class=\"p\">&gt;</span>Submit<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>For example, In React, an  is always an uncontrolled component because its value can only be set by a user, and not programmatically.</p>\n\n<p>Anything that we control with the DOM that can't be done with a React State, we do with <strong>Refs</strong>.</p>\n\n<h2>\n  <a name=\"react-refs\" href=\"#react-refs\">\n  </a>\n  React Refs\n</h2>\n\n<p><em>When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref.</em> - <a href=\"https://beta.reactjs.org/learn/referencing-values-with-refs\">https://beta.reactjs.org/learn/referencing-values-with-refs</a></p>\n\n<p>The common way to use refs in functional components is to <code>useRef()</code> hook.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"kd\">const</span> <span class=\"nx\">LoginPage</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">passwordRef</span> <span class=\"o\">=</span> <span class=\"nx\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">handleSubmit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">`This is your password </span><span class=\"p\">${</span><span class=\"nx\">passwordRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span><span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">onSubmit</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSubmit</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"email\"</span> <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"email\"</span><span class=\"p\">/&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"password\"</span> <span class=\"na\">name</span><span class=\"p\">=</span><span class=\"s\">\"password\"</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">passwordRef</span><span class=\"si\">}</span><span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Is recommended to initiallize refs to null, since is the DOM is not mounted when loading the page and will not know about the input value beforehand.</p>\n\n<p>We also can forward refs, is not very used in react, but we can use React.forwardRef() to create components that forwards ref to child components.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"kd\">const</span> <span class=\"nx\">Button</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">forwardRef</span><span class=\"p\">((</span><span class=\"nx\">props</span><span class=\"p\">,</span> <span class=\"nx\">ref</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">ref</span><span class=\"si\">}</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"FancyButton\"</span><span class=\"p\">&gt;</span>\n        <span class=\"si\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"si\">}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">));</span>\n\n<span class=\"c1\">// Now we can pass forward refs to this component.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">buttonRef</span> <span class=\"o\">=</span> <span class=\"nx\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n<span class=\"p\">&lt;</span><span class=\"nc\">Button</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">ref</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click me!<span class=\"p\">&lt;/</span><span class=\"nc\">Button</span><span class=\"p\">&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Stay tunned for more software engineering posts!</p>\n\n","body_markdown":"## Controlled Components  \n\nThese components are controlled by react state. For example, if we have a form, and we have the model of that form represented by a react state, and the inputs are linked as two way binding (menaning that changing the input value will change the react state, and that input value is going to be the value of that state) then we have a controlled component.\n\nWe can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input.\n\n```jsx\nimport { useState } from 'react';\n  \nfunction App() {\n  const [name, setName] = useState('');\n  \n  function handleSubmit() {\n    alert(`Name: ${name}`);\n  }\n    \n  return (\n    <div className=\"App\">\n      <h3>Controlled Component</h3>\n      <form onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <input name=\"name\" value={name} onChange={(e) => setName(e.target.value)} />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n  \nexport default App;\n```\n\n## Uncontrolled Components\n\nThese components, by definition, are not controlled by the react state, but by the DOM (Document Object Model)\n\nThese components uses ref to access their own state.\n\nUsually, uncontrolled components are dependant on the browser, like Inputs of every type, Window Resizing, HTML Canvas Elements, and so on.\n\n```jsx\nimport React, { useRef } from 'react';\n  \nfunction App() {\n  const inputRef = useRef(null);\n  \n  function handleSubmit() {\n    alert(`Name: ${inputRef.current.value}`);\n  }\n  \n  return (\n    <div className=\"App\">\n      <h3>Uncontrolled Component</h3>\n      <form onSubmit={handleSubmit}>\n        <label>Name :</label>\n        <input type=\"text\" name=\"name\" ref={inputRef} />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n  \nexport default App;\n```\n\nFor example, In React, an <input type=\"file\" /> is always an uncontrolled component because its value can only be set by a user, and not programmatically.\n\nAnything that we control with the DOM that can't be done with a React State, we do with **Refs**.\n\n## React Refs\n\n_When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref._ - https://beta.reactjs.org/learn/referencing-values-with-refs\n\nThe common way to use refs in functional components is to `useRef()` hook.\n\n```jsx\nconst LoginPage = () => {\n    const passwordRef = useRef(null);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        alert(`This is your password ${passwordRef.current.value}`)\n\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input type=\"email\" name=\"email\"/>\n            <input type=\"password\" name=\"password\" ref={passwordRef}/>\n        </form>\n    )\n}\n```\n\nIs recommended to initiallize refs to null, since is the DOM is not mounted when loading the page and will not know about the input value beforehand.\n\nWe also can forward refs, is not very used in react, but we can use React.forwardRef() to create components that forwards ref to child components.\n\n```jsx\nconst Button = React.forwardRef((props, ref)=>(\n    <button ref={ref} className=\"FancyButton\">\n        {props.children}\n    </button>\n));\n\n// Now we can pass forward refs to this component.\nconst buttonRef = useRef(null);\n<Button ref={ref}>Click me!</Button>\n```\n\nStay tunned for more software engineering posts!\n","user":{"name":"Pedro Uzcátegui","username":"pedrouzcategui","twitter_username":"P3droUzcategui","github_username":"pedrouzcategui","user_id":570546,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--NII0yNPu--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570546/4539975b-35bb-4362-890c-fce9c3ea00b1.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--ZMd_XjZa--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570546/4539975b-35bb-4362-890c-fce9c3ea00b1.jpg"}}