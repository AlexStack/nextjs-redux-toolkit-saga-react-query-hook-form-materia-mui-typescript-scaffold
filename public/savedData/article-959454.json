{"type_of":"article","id":959454,"title":"Testing a Text Field component integrating Mui's Text Field with React Hook Form","description":"Subject Under Test   An input component integrating TextFeild of  mui with React Hook Form....","readable_publish_date":"Jan 18","slug":"testing-a-text-field-component-integrating-muis-text-field-with-react-hook-form-14fe","path":"/rexebin/testing-a-text-field-component-integrating-muis-text-field-with-react-hook-form-14fe","url":"https://dev.to/rexebin/testing-a-text-field-component-integrating-muis-text-field-with-react-hook-form-14fe","comments_count":0,"public_reactions_count":1,"collection_id":16269,"published_timestamp":"2022-01-18T13:46:57Z","positive_reactions_count":1,"cover_image":null,"social_image":"https://dev.to/social_previews/article/959454.png","canonical_url":"https://dev.to/rexebin/testing-a-text-field-component-integrating-muis-text-field-with-react-hook-form-14fe","created_at":"2022-01-18T13:46:34Z","edited_at":"2022-01-22T12:00:53Z","crossposted_at":null,"published_at":"2022-01-18T13:46:57Z","last_comment_at":"2022-01-18T13:46:57Z","reading_time_minutes":2,"tag_list":"reacthookform, mui, testing, react","tags":["reacthookform","mui","testing","react"],"body_html":"<h3>\n  <a name=\"subject-under-test\" href=\"#subject-under-test\">\n  </a>\n  Subject Under Test\n</h3>\n\n<p>An input component integrating <code>TextFeild</code> of  <code>mui</code> with React Hook Form. It uses the <code>Controller</code> component from React Hook Form(RHF) and configures <code>TextField</code> to handle validations and more. I use this component instead of <code>TextField</code> from <code>mui</code> in all my forms. There are three benefits to this approach(adaptor pattern):</p>\n\n<ol>\n<li>It provides RHF integration</li>\n<li>It is a customised version of <code>TextField</code> with some common functions that meet the business requirements</li>\n<li>It is an adaptor bridging the RHF forms and <code>mui</code> so that the form components do not depend <code>mui</code>, which made upgrading or replacing <code>mui</code> very easy.</li>\n</ol>\n\n<h3>\n  <a name=\"target-users\" href=\"#target-users\">\n  </a>\n  Target Users\n</h3>\n\n<p>The SUT's target users are developers, and it is to be used inside an RHF form only. Therefore the behaviours and tests are focused on the expectations of the developers.</p>\n\n<h3>\n  <a name=\"behaviours\" href=\"#behaviours\">\n  </a>\n  Behaviours\n</h3>\n\n<ol>\n<li>It inherits all the behaviours from <code>TextField</code> of <code>mui</code> and accepts all <code>TextField</code> props as-is.</li>\n<li>It takes <code>name</code>, <code>formContext</code> and <code>defaultValue</code> required props and registers the <code>TextField</code> to the form context of RHF</li>\n<li>It has two modes: edit mode and read-only mode.  In read-only mode, it is disabled and rendered as a standard(underline) <code>TextField</code>. In edit mode, it is rendered as outlined <code>TextField</code>.</li>\n<li>It hides if <code>hidden</code> is true.</li>\n<li>It builds in the <code>required</code> validation rule and takes a <code>required</code> prop.</li>\n<li>It accepts validation rules and enforces them.</li>\n<li>It formats numbers with thousands separator commas by default and accept <code>numericProps</code> of type <code>NumberFormatProps</code> from <code>react-number-format</code> for further customisation.</li>\n<li>It defaults to size small.</li>\n<li>It takes an optional <code>onChange</code> prop. On change,  it will trigger the given <code>onChange</code> method and update input value.</li>\n</ol>\n\n<h3>\n  <a name=\"code\" href=\"#code\">\n  </a>\n  Code\n</h3>\n\n\n<div class=\"ltag_gist-liquid-tag\">\n  <script id=\"gist-ltag\" src=\"https://gist.github.com/rexebin/5ae75b0a625bb5e126e116357aa8956c.js\"></script>\n</div>\n\n\n<h3>\n  <a name=\"notes\" href=\"#notes\">\n  </a>\n  Notes\n</h3>\n\n<ol>\n<li>\n<code>TestComponent</code> shows the usage of the SUT. Its props are extended from the SUT's props so that the tests can configure the SUT on the fly.</li>\n<li>For good orders, the tests are grouped into four categories: appearance, behaviours, validations and number formatting.</li>\n<li>Appearance tests depend on how <code>mui</code> renders its <code>TextField</code> and assert the class names rendered by <code>mui</code>.</li>\n<li>Validation tests depend on RHF's validations and the render helper text of <code>TextField</code>.</li>\n<li>The tests use <code>userEvent</code> to mimic end-user browser interactions.</li>\n<li>\n<code>onSubmit</code> is mocked and cleared before each test.</li>\n<li>\n<code>EpicTextField</code> is a styled <code>TextField</code> with <code>@emotion/styled</code>\n</li>\n</ol>\n\n","body_markdown":"### Subject Under Test\n\nAn input component integrating `TextFeild` of  `mui` with React Hook Form. It uses the `Controller` component from React Hook Form(RHF) and configures `TextField` to handle validations and more. I use this component instead of `TextField` from `mui` in all my forms. There are three benefits to this approach(adaptor pattern):\n\n1. It provides RHF integration\n2. It is a customised version of `TextField` with some common functions that meet the business requirements\n3. It is an adaptor bridging the RHF forms and `mui` so that the form components do not depend `mui`, which made upgrading or replacing `mui` very easy.\n\n### Target Users\n\nThe SUT's target users are developers, and it is to be used inside an RHF form only. Therefore the behaviours and tests are focused on the expectations of the developers.\n\n### Behaviours\n\n1. It inherits all the behaviours from `TextField` of `mui` and accepts all `TextField` props as-is.\n2. It takes `name`, `formContext` and `defaultValue` required props and registers the `TextField` to the form context of RHF\n3. It has two modes: edit mode and read-only mode.  In read-only mode, it is disabled and rendered as a standard(underline) `TextField`. In edit mode, it is rendered as outlined `TextField`.\n4. It hides if `hidden` is true.\n5. It builds in the `required` validation rule and takes a `required` prop.\n6. It accepts validation rules and enforces them.\n7. It formats numbers with thousands separator commas by default and accept `numericProps` of type `NumberFormatProps` from `react-number-format` for further customisation.\n8. It defaults to size small.\n9. It takes an optional `onChange` prop. On change,  it will trigger the given `onChange` method and update input value.\n\n### Code\n{%gist\nhttps://gist.github.com/rexebin/5ae75b0a625bb5e126e116357aa8956c\n%}\n### Notes\n\n1. `TestComponent` shows the usage of the SUT. Its props are extended from the SUT's props so that the tests can configure the SUT on the fly.\n2. For good orders, the tests are grouped into four categories: appearance, behaviours, validations and number formatting.\n3. Appearance tests depend on how `mui` renders its `TextField` and assert the class names rendered by `mui`.\n4. Validation tests depend on RHF's validations and the render helper text of `TextField`.\n5. The tests use `userEvent` to mimic end-user browser interactions.\n6. `onSubmit` is mocked and cleared before each test.\n7. `EpicTextField` is a styled `TextField` with `@emotion/styled`\n","user":{"name":"Rex","username":"rexebin","twitter_username":"rexebin","github_username":"rexebin","user_id":339459,"website_url":"https://www.epicerp.app","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UebRz_K5--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/339459/9276c4f3-d496-477c-bad1-26991c25e375.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--WOmU0qhh--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/339459/9276c4f3-d496-477c-bad1-26991c25e375.jpeg"}}