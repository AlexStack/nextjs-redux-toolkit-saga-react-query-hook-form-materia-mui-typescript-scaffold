{"type_of":"article","id":1089400,"title":"React Native for Web Apps","description":"Wouldn't it be cool if we could just write an app once? In stead of having to create a native version...","readable_publish_date":"Oct 26","slug":"react-native-for-web-apps-8g3","path":"/raulsposito/react-native-for-web-apps-8g3","url":"https://dev.to/raulsposito/react-native-for-web-apps-8g3","comments_count":0,"public_reactions_count":2,"collection_id":null,"published_timestamp":"2022-10-26T15:03:09Z","positive_reactions_count":2,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rf8sBY7x--/c_imagga_scale,f_auto,fl_progressive,h_420,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28lg5drymymbvo2b5kuv.gif","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--2Ev0Pq4w--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28lg5drymymbvo2b5kuv.gif","canonical_url":"https://dev.to/raulsposito/react-native-for-web-apps-8g3","created_at":"2022-05-19T01:59:27Z","edited_at":null,"crossposted_at":null,"published_at":"2022-10-26T15:03:09Z","last_comment_at":"2022-10-26T15:03:09Z","reading_time_minutes":7,"tag_list":"reactnative, react, javascript","tags":["reactnative","react","javascript"],"body_html":"<p>Wouldn't it be cool if we could just write an app once? In stead of having to create a native version for mobile and then develop a whole new codebase for a Web App? Wouldn't it be much more time/cost effective?</p>\n\n<p>React Native is a full JavaScript framework and one of the cool things it does is that it translates the React Native tags into Native tags, to Kotlin/Java in the case of Android and to Swift/ObjC in the case of IOS.</p>\n\n<p>So in the case of adding a View tag it would translate to ViewGroup in Kotlin or UIView in the case of Swift. And we don't have to worry about all that, RN just does it for us.</p>\n\n<p>So following this logic, we should just have a package that translates the native modules into html elements compiled on the browser and that way we can just create the build for web, using the same code we use to deploy the Native version for Google Play or App Store. </p>\n\n<p>That package is <a href=\"https://www.npmjs.com/package/react-native-web\">react-native-web</a></p>\n\n<p>And you can also learn a lot more about it <a href=\"https://necolas.github.io/react-native-web/\">here</a></p>\n\n<p>If you're thinking this is crazy or kind of a long shot, let me tell you several names in the industry (big names) use this same package to build their web apps from their actual React Native codebase.</p>\n\n<p>With this package we can create a new build for the web that we can deploy to AWS amplify or Firebase hosting or whatever host you like. It would be a full web build you can deploy. :)</p>\n\n<p>So we're covered! We have IOS, Android and Desktop and we only had to code it once.</p>\n\n<p>Unless you're making something super intricate or specific in your app, this should cover most simple projects or MVP's.</p>\n\n<p>Let's take a look into more detail on how all this is done, step by step:</p>\n\n<p>You will fist need several dependencies to run the React Native CLI. (Node, watchman, cocoapods, react-native)<br>\nAnd also x-code which is super heavy and takes a bit to download form <a href=\"https://developer.apple.com/xcode/\">the official apple link</a>.</p>\n\n<p>Make sure Node version is 14 or above.</p>\n\n<p>You can get more details on alternative setups <a href=\"https://reactnative.dev/docs/environment-setup\">here</a>.</p>\n\n<p>Then, you can choose to start the project with just React Native or we can use Expo which would simplify the build process for us whenever we are exporting for web. </p>\n\n<p><strong>As any react project</strong>, node package execute:</p>\n\n<p><code>npx react-native init MyAwesomeProject</code></p>\n\n<p><strong>As Expo</strong> project:</p>\n\n<p><code>npm install --global expo-cli &amp;&amp; npx create-expo-app MyAwesomeProject</code></p>\n\n<p>As you would expect this will create the basic template and folder structure for you to start working on your project.</p>\n\n<p>Then to start the project <code>npx react-native start</code> or <code>npx expo start</code></p>\n\n<p>This will start the metro bundler and pull up our project on the emulator.</p>\n\n<p>Ok, now let's make it web!</p>\n\n<p>We need to add the dependencies <code>npm install react-dom react-native-web</code></p>\n\n<p>Cool, so after the installation we can pull up the project and we should see it in both mobile and web versions if we decide to go to the browser and type the localhost port, we should see the web version of our app.</p>\n\n<p>In that web version, you might want to go ahead and inspect the page just to find out that it's no longer React Native elements, they're actually <code>html</code> in the browser now. The <code>view</code>s got compiled into <code>html</code>.</p>\n\n<p>Alright, how do we extract all this into a build so we can host it on our server?</p>\n\n<p>Easiest way I know would be <strong>with Expo</strong>:</p>\n\n<p><code>expo build:web</code></p>\n\n<p>This will generate the new build in a root level folder and that content we can host wherever we like on the web!</p>\n\n<p>For the <strong>traditional version</strong> we should follow the docs advice and install a few plugins for optimization first:</p>\n\n<p><code>npm install --save-dev babel-plugin-react-native-web<br>\n</code></p>\n\n<p>This Babel plugin is recommended for the build.</p>\n\n<p>Next, we would need to alias our <code>react-native</code> into <code>react-native-web</code> so babel-plugin-module-resolver is required.</p>\n\n<p><code>npm install --save-dev babel-plugin-module-resolver<br>\n</code></p>\n\n<p>This will all be configured from our webpack config file, so go ahead and add the following to your <code>babel.config.js</code> file: </p>\n\n<p><code>npm install --save-dev babel-plugin-module-resolver<br>\n</code></p>\n\n<p>All good so far, now for our web version we will need to create two entry files living at root path. <code>index.html</code> and <code>index.web.js</code>.</p>\n\n<p>/index.html<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>React Native on the Web!<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">content=</span><span class=\"s\">\"initial-scale=1,width=device-width\"</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">httpEquiv=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content=</span><span class=\"s\">\"IE=edge\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;style&gt;</span>\n      <span class=\"c\">/* These styles make the body full-height */</span>\n      <span class=\"nt\">html</span><span class=\"o\">,</span>\n      <span class=\"nt\">body</span><span class=\"o\">,</span>\n      <span class=\"nf\">#root</span> <span class=\"p\">{</span>\n        <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"o\">/*</span> <span class=\"nt\">These</span> <span class=\"nt\">styles</span> <span class=\"nt\">disable</span> <span class=\"nt\">body</span> <span class=\"nt\">scrolling</span> <span class=\"nt\">if</span> <span class=\"nt\">you</span> <span class=\"nt\">are</span> <span class=\"nt\">using</span> <span class=\"o\">&lt;</span><span class=\"nt\">ScrollView</span><span class=\"o\">&gt;</span> <span class=\"o\">*/</span>\n      <span class=\"nt\">body</span> <span class=\"p\">{</span>\n        <span class=\"nl\">overflow</span><span class=\"p\">:</span> <span class=\"nb\">hidden</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c\">/* These styles make the root element flex and column wise filling */</span>\n      <span class=\"nf\">#root</span> <span class=\"p\">{</span>\n        <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n        <span class=\"nl\">flex-direction</span><span class=\"p\">:</span> <span class=\"n\">column</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"react-native-web-app\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src=</span><span class=\"s\">\"/bundle.web.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Notice the script name src=\"/bundle.web.js\", We'll be using this file name while configuring webpack.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">/</span><span class=\"nx\">index</span><span class=\"p\">.</span><span class=\"nx\">web</span><span class=\"p\">.</span><span class=\"nx\">js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppRegistry</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-native</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./src/components/App</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">name</span> <span class=\"k\">as</span> <span class=\"nx\">appName</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./app.json</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">AppRegistry</span><span class=\"p\">.</span><span class=\"nx\">registerComponent</span><span class=\"p\">(</span><span class=\"nx\">appName</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">App</span><span class=\"p\">);</span>\n\n<span class=\"nx\">AppRegistry</span><span class=\"p\">.</span><span class=\"nx\">runApplication</span><span class=\"p\">(</span><span class=\"nx\">appName</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">rootTag</span><span class=\"p\">:</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">react-native-web-app</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you look at the file above, you might notice that on the third line <code>import App from './src/components/App';</code> I'm importing an App component, which is different from our standard output for our React Native App. This is because, we will need a differential output for this build to happen, otherwise we would get an error because of the imports we are using that are not part of the RN public API. </p>\n\n<p>For example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span>\n <span class=\"nx\">Colors</span><span class=\"p\">,</span>\n <span class=\"nx\">Header</span><span class=\"p\">,</span>\n <span class=\"nx\">ReloadInstructions</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-native/Libraries/NewAppScreen</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As stated by Nicolas Gallagher via <a href=\"https://github.com/necolas/react-native-web/discussions/2052\">this discussion</a>.</p>\n\n<blockquote>\n<p>\"First, we should not be loading any of the RN package on web, especially not parts that aren't part of the public API . Second, as mentioned in the inline comments of the config web/webpack.config.js, we need to explicitly list everything in node_modules that needs compiling.\"</p>\n</blockquote>\n\n<p>So this is basically why we create a different file, to reference as output. And that file would not have the imports or would not be referencing any of the library components we used for our Mobile version. This will have to be resolved in a 'web' way for this one.</p>\n\n<p>Great! We got ahead of that issue and back in track for our export. </p>\n\n<p>Next, we'll need dive into Compiling and Bundling using Webpack for bundling and Babel for transpiling along with babel-loader.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install --save-dev babel-loader url-loader webpack webpack-cli webpack-dev-server\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install --save-dev babel-plugin-react-native-web\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Cool, now let's create a <code>/web/webpack.config.js</code> file and start configuring webpack using the <a href=\"https://necolas.github.io/react-native-web/docs/multi-platform/\">official docs</a> with a small twist to add jsx support ;).</p>\n\n<p><code>webpack.config.js</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">webpack</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">appDirectory</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">../</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// This is needed for webpack to compile JavaScript.</span>\n<span class=\"c1\">// Many OSS React Native packages are not compiled to ES5 before being</span>\n<span class=\"c1\">// published. If you depend on uncompiled packages they may cause webpack build</span>\n<span class=\"c1\">// errors. To fix this webpack can be configured to compile to the necessary</span>\n<span class=\"c1\">// `node_module`.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">babelLoaderConfiguration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.(</span><span class=\"sr\">js</span><span class=\"se\">)</span><span class=\"sr\">|</span><span class=\"se\">(</span><span class=\"sr\">jsx</span><span class=\"se\">)</span><span class=\"sr\">$/</span><span class=\"p\">,</span>\n  <span class=\"c1\">// Add every directory that needs to be compiled by Babel during the build.</span>\n  <span class=\"na\">include</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">appDirectory</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">index.web.js</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">appDirectory</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">src</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">appDirectory</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">node_modules/react-native-uncompiled</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">loader</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">babel-loader</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">options</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">cacheDirectory</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"c1\">// The 'metro-react-native-babel-preset' preset is recommended to match React Native's packager</span>\n      <span class=\"na\">presets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">module:metro-react-native-babel-preset</span><span class=\"dl\">'</span><span class=\"p\">],</span>\n      <span class=\"c1\">// Re-write paths to import only the modules needed by the app</span>\n      <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"dl\">'</span><span class=\"s1\">react-native-web</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span>\n          <span class=\"dl\">'</span><span class=\"s1\">module-resolver</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n          <span class=\"p\">{</span>\n            <span class=\"na\">alias</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"dl\">'</span><span class=\"s1\">^react-native$</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">react-native-web</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n          <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// This is needed for webpack to import static images in JavaScript files.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">imageLoaderConfiguration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.(</span><span class=\"sr\">gif|jpe</span><span class=\"se\">?</span><span class=\"sr\">g|png|svg</span><span class=\"se\">)</span><span class=\"sr\">$/</span><span class=\"p\">,</span>\n  <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">loader</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">url-loader</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">options</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">[name].[ext]</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">esModule</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// load any web API polyfills</span>\n    <span class=\"c1\">// path.resolve(appDirectory, 'polyfills-web.js'),</span>\n    <span class=\"c1\">// your web-specific entry file</span>\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">appDirectory</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">index.web.js</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n  <span class=\"p\">],</span>\n\n  <span class=\"c1\">// configures where the build ends up</span>\n  <span class=\"na\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">bundle.web.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">appDirectory</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">dist</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"c1\">// ...the rest of your config</span>\n\n  <span class=\"na\">module</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">rules</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">babelLoaderConfiguration</span><span class=\"p\">,</span> <span class=\"nx\">imageLoaderConfiguration</span><span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"na\">resolve</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// This will only alias the exact import \"react-native\"</span>\n    <span class=\"na\">alias</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"dl\">'</span><span class=\"s1\">react-native$</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">react-native-web</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// If you're working on a multi-platform React Native app, web-specific</span>\n    <span class=\"c1\">// module implementations should be written in files using the extension</span>\n    <span class=\"c1\">// `.web.js`.</span>\n    <span class=\"na\">extensions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">.web.js</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">.js</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">.jsx</span><span class=\"dl\">'</span><span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We are ALMOST there!</p>\n\n<p>Just need to setup which scripts we'll be using to actually run this on the web. So let's take a look at <code>/package.json</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  \"scripts\": {\n    \"web\": \"webpack serve -d source-map --mode development --config \\\"./web/webpack.config.js\\\" --inline --color --hot\",\n    \"build:web\": \"webpack --mode production --config \\\"./web/webpack.config.js\\\" --hot\"\n  }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>After adding the correct scripts we should be able to run <code>npm run web</code> on the command line and get our app to run!</p>\n\n<p>You might want to navigate to port <a href=\"http://localhost:8080\">http://localhost:8080</a> to see your webapp running.</p>\n\n<p><strong>Conclusion:</strong><br>\nAs you might have noticed, the Expo path is waaaay simpler and get's a lot done for you. If you want to dive into the regular RN way, I really hope this guide serves a purpose for that matter. </p>\n\n<p>I would recommend using the tools available to make it simple, as stated on the official docs:</p>\n\n<blockquote>\n<p>\"If you are interested in making a multi-platform app it is strongly recommended that you use Expo (or learn from the source code for the Web integration). Expo includes web support and takes care of all the configuration work required.\"</p>\n</blockquote>\n\n<p>Feel free to build for ANY platform!</p>\n\n<p>Hope you enjoyed the extensive article :)</p>\n\n<p><a href=\"https://necolas.github.io/react-native-web\">react-native-web docs</a><br>\n<a href=\"https://necolas.github.io/react-native-web/docs/multi-platform/\">Multi-Platform-React-Native</a><br>\n<a href=\"https://necolas.github.io/react-native-web/docs/setup/\">Setup - react-native-web</a><br>\n<a href=\"https://dev.to/shivams136/create-react-native-app-for-android-ios-and-web-without-expo-48lc\">React Native for Web without Expo - by shivams136</a></p>\n\n","body_markdown":"Wouldn't it be cool if we could just write an app once? In stead of having to create a native version for mobile and then develop a whole new codebase for a Web App? Wouldn't it be much more time/cost effective?\n\nReact Native is a full JavaScript framework and one of the cool things it does is that it translates the React Native tags into Native tags, to Kotlin/Java in the case of Android and to Swift/ObjC in the case of IOS.\n\nSo in the case of adding a View tag it would translate to ViewGroup in Kotlin or UIView in the case of Swift. And we don't have to worry about all that, RN just does it for us.\n\nSo following this logic, we should just have a package that translates the native modules into html elements compiled on the browser and that way we can just create the build for web, using the same code we use to deploy the Native version for Google Play or App Store. \n\nThat package is [react-native-web](https://www.npmjs.com/package/react-native-web)\n\nAnd you can also learn a lot more about it [here](https://necolas.github.io/react-native-web/)\n\nIf you're thinking this is crazy or kind of a long shot, let me tell you several names in the industry (big names) use this same package to build their web apps from their actual React Native codebase.\n\nWith this package we can create a new build for the web that we can deploy to AWS amplify or Firebase hosting or whatever host you like. It would be a full web build you can deploy. :)\n\nSo we're covered! We have IOS, Android and Desktop and we only had to code it once.\n\nUnless you're making something super intricate or specific in your app, this should cover most simple projects or MVP's.\n\nLet's take a look into more detail on how all this is done, step by step:\n\nYou will fist need several dependencies to run the React Native CLI. (Node, watchman, cocoapods, react-native)\nAnd also x-code which is super heavy and takes a bit to download form [the official apple link](https://developer.apple.com/xcode/).\n\nMake sure Node version is 14 or above.\n\nYou can get more details on alternative setups [here](https://reactnative.dev/docs/environment-setup).\n\nThen, you can choose to start the project with just React Native or we can use Expo which would simplify the build process for us whenever we are exporting for web. \n\n**As any react project**, node package execute:\n\n`npx react-native init MyAwesomeProject`\n\n**As Expo** project:\n\n`npm install --global expo-cli && npx create-expo-app MyAwesomeProject`\n\nAs you would expect this will create the basic template and folder structure for you to start working on your project.\n\nThen to start the project `npx react-native start` or `npx expo start`\n\nThis will start the metro bundler and pull up our project on the emulator.\n\nOk, now let's make it web!\n\nWe need to add the dependencies `npm install react-dom react-native-web`\n\nCool, so after the installation we can pull up the project and we should see it in both mobile and web versions if we decide to go to the browser and type the localhost port, we should see the web version of our app.\n\nIn that web version, you might want to go ahead and inspect the page just to find out that it's no longer React Native elements, they're actually `html` in the browser now. The `view`s got compiled into `html`.\n\nAlright, how do we extract all this into a build so we can host it on our server?\n\nEasiest way I know would be **with Expo**:\n\n`expo build:web`\n\nThis will generate the new build in a root level folder and that content we can host wherever we like on the web!\n\nFor the **traditional version** we should follow the docs advice and install a few plugins for optimization first:\n\n`npm install --save-dev babel-plugin-react-native-web\n`\n\nThis Babel plugin is recommended for the build.\n\nNext, we would need to alias our `react-native` into `react-native-web` so babel-plugin-module-resolver is required.\n\n`npm install --save-dev babel-plugin-module-resolver\n`\n\nThis will all be configured from our webpack config file, so go ahead and add the following to your `babel.config.js` file: \n\n`npm install --save-dev babel-plugin-module-resolver\n`\n\nAll good so far, now for our web version we will need to create two entry files living at root path. `index.html` and `index.web.js`.\n\n/index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>React Native on the Web!</title>\n    <meta content=\"initial-scale=1,width=device-width\" name=\"viewport\" />\n    <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <style>\n      /* These styles make the body full-height */\n      html,\n      body,\n      #root {\n        height: 100%;\n      }\n      /* These styles disable body scrolling if you are using <ScrollView> */\n      body {\n        overflow: hidden;\n      }\n      /* These styles make the root element flex and column wise filling */\n      #root {\n        display: flex;\n        flex-direction: column;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"react-native-web-app\"></div>\n    <script type=\"text/javascript\" src=\"/bundle.web.js\"></script>\n  </body>\n</html>\n```\n\nNotice the script name src=\"/bundle.web.js\", We'll be using this file name while configuring webpack.\n\n```javascript\n/index.web.js\nimport React from 'react';\nimport {AppRegistry} from 'react-native';\nimport App from './src/components/App';\nimport {name as appName} from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n\nAppRegistry.runApplication(appName, {\n  rootTag: document.getElementById('react-native-web-app'),\n});\n```\n\nIf you look at the file above, you might notice that on the third line `import App from './src/components/App';` I'm importing an App component, which is different from our standard output for our React Native App. This is because, we will need a differential output for this build to happen, otherwise we would get an error because of the imports we are using that are not part of the RN public API. \n\nFor example: \n\n```javascript\nimport {\n Colors,\n Header,\n ReloadInstructions,\n} from 'react-native/Libraries/NewAppScreen';\n```\n\nAs stated by Nicolas Gallagher via [this discussion](https://github.com/necolas/react-native-web/discussions/2052).\n\n> \"First, we should not be loading any of the RN package on web, especially not parts that aren't part of the public API . Second, as mentioned in the inline comments of the config web/webpack.config.js, we need to explicitly list everything in node_modules that needs compiling.\"\n\nSo this is basically why we create a different file, to reference as output. And that file would not have the imports or would not be referencing any of the library components we used for our Mobile version. This will have to be resolved in a 'web' way for this one.\n\nGreat! We got ahead of that issue and back in track for our export. \n\nNext, we'll need dive into Compiling and Bundling using Webpack for bundling and Babel for transpiling along with babel-loader.\n\n```\nnpm install --save-dev babel-loader url-loader webpack webpack-cli webpack-dev-server\n```\n\n```\nnpm install --save-dev babel-plugin-react-native-web\n```\n\nCool, now let's create a `/web/webpack.config.js` file and start configuring webpack using the [official docs](https://necolas.github.io/react-native-web/docs/multi-platform/) with a small twist to add jsx support ;).\n\n`webpack.config.js`:\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\n\nconst appDirectory = path.resolve(__dirname, '../');\n\n// This is needed for webpack to compile JavaScript.\n// Many OSS React Native packages are not compiled to ES5 before being\n// published. If you depend on uncompiled packages they may cause webpack build\n// errors. To fix this webpack can be configured to compile to the necessary\n// `node_module`.\nconst babelLoaderConfiguration = {\n  test: /\\.(js)|(jsx)$/,\n  // Add every directory that needs to be compiled by Babel during the build.\n  include: [\n    path.resolve(appDirectory, 'index.web.js'),\n    path.resolve(appDirectory, 'src'),\n    path.resolve(appDirectory, 'node_modules/react-native-uncompiled'),\n  ],\n  use: {\n    loader: 'babel-loader',\n    options: {\n      cacheDirectory: true,\n      // The 'metro-react-native-babel-preset' preset is recommended to match React Native's packager\n      presets: ['module:metro-react-native-babel-preset'],\n      // Re-write paths to import only the modules needed by the app\n      plugins: [\n        'react-native-web',\n        [\n          'module-resolver',\n          {\n            alias: {\n              '^react-native$': 'react-native-web',\n            },\n          },\n        ],\n      ],\n    },\n  },\n};\n\n// This is needed for webpack to import static images in JavaScript files.\nconst imageLoaderConfiguration = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: 'url-loader',\n    options: {\n      name: '[name].[ext]',\n      esModule: false,\n    },\n  },\n};\n\nmodule.exports = {\n  entry: [\n    // load any web API polyfills\n    // path.resolve(appDirectory, 'polyfills-web.js'),\n    // your web-specific entry file\n    path.resolve(appDirectory, 'index.web.js'),\n  ],\n\n  // configures where the build ends up\n  output: {\n    filename: 'bundle.web.js',\n    path: path.resolve(appDirectory, 'dist'),\n  },\n\n  // ...the rest of your config\n\n  module: {\n    rules: [babelLoaderConfiguration, imageLoaderConfiguration],\n  },\n\n  resolve: {\n    // This will only alias the exact import \"react-native\"\n    alias: {\n      'react-native$': 'react-native-web',\n    },\n    // If you're working on a multi-platform React Native app, web-specific\n    // module implementations should be written in files using the extension\n    // `.web.js`.\n    extensions: ['.web.js', '.js', '.jsx'],\n  },\n};\n```\n\nWe are ALMOST there!\n\nJust need to setup which scripts we'll be using to actually run this on the web. So let's take a look at `/package.json`:\n\n```\n{\n  \"scripts\": {\n    \"web\": \"webpack serve -d source-map --mode development --config \\\"./web/webpack.config.js\\\" --inline --color --hot\",\n    \"build:web\": \"webpack --mode production --config \\\"./web/webpack.config.js\\\" --hot\"\n  }\n}\n```\n\nAfter adding the correct scripts we should be able to run `npm run web` on the command line and get our app to run!\n\nYou might want to navigate to port http://localhost:8080 to see your webapp running.\n\n**Conclusion:**\nAs you might have noticed, the Expo path is waaaay simpler and get's a lot done for you. If you want to dive into the regular RN way, I really hope this guide serves a purpose for that matter. \n\nI would recommend using the tools available to make it simple, as stated on the official docs:\n\n> \"If you are interested in making a multi-platform app it is strongly recommended that you use Expo (or learn from the source code for the Web integration). Expo includes web support and takes care of all the configuration work required.\"\n\nFeel free to build for ANY platform!\n\nHope you enjoyed the extensive article :)\n\n[react-native-web docs](https://necolas.github.io/react-native-web)\n[Multi-Platform-React-Native](https://necolas.github.io/react-native-web/docs/multi-platform/)\n[Setup - react-native-web](https://necolas.github.io/react-native-web/docs/setup/)\n[React Native for Web without Expo - by shivams136](https://dev.to/shivams136/create-react-native-app-for-android-ios-and-web-without-expo-48lc)","user":{"name":"Raul","username":"raulsposito","twitter_username":"raul_sposito","github_username":"raulsposito","user_id":577683,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--CYbxpPSO--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577683/e4f9935b-670a-4f7d-908b-c81abf8ccee2.JPG","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--L7HvQpih--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577683/e4f9935b-670a-4f7d-908b-c81abf8ccee2.JPG"}}