{"type_of":"article","id":1241579,"title":"How to call AWS Step Functions from AWS Amplify","description":"Purpose / Motivation   I read this great article.   AWS Amplify: execute a Step Functions...","readable_publish_date":"Nov 6","slug":"how-to-call-aws-step-functions-from-aws-amplify-21lm","path":"/aws-builders/how-to-call-aws-step-functions-from-aws-amplify-21lm","url":"https://dev.to/aws-builders/how-to-call-aws-step-functions-from-aws-amplify-21lm","comments_count":0,"public_reactions_count":12,"collection_id":null,"published_timestamp":"2022-11-06T09:47:23Z","positive_reactions_count":12,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--3RShQu6r--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjh0vfomvmu0v3ulqeno.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--apSSbX3---/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjh0vfomvmu0v3ulqeno.png","canonical_url":"https://dev.to/aws-builders/how-to-call-aws-step-functions-from-aws-amplify-21lm","created_at":"2022-11-03T11:16:04Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-06T09:47:23Z","last_comment_at":"2022-11-06T09:47:23Z","reading_time_minutes":5,"tag_list":"amplify, aws, webdev, serverless","tags":["amplify","aws","webdev","serverless"],"body_html":"<h2>\n  <a name=\"purpose-motivation\" href=\"#purpose-motivation\">\n  </a>\n  Purpose / Motivation\n</h2>\n\n<p>I read this great article.</p>\n\n<blockquote>\n<p><a href=\"https://awstip.com/aws-amplify-initialize-step-functions-execution-from-appsync-ad32b9dc35be\">AWS Amplify: execute a Step Functions state machine from Appsync</a></p>\n</blockquote>\n\n<p>This article shows how to call AWS Step Functions from AWS Amplify, including creating some VTL files.</p>\n\n<p>But now we can use AWS CDK inside AWS Amplify with the Amplify Custom feature.<br>\nAnd I want to use AWS CDK.<br>\nSo let's translate it to the AWS CDK style.</p>\n<h2>\n  <a name=\"why-call-aws-step-functions-from-aws-amplify\" href=\"#why-call-aws-step-functions-from-aws-amplify\">\n  </a>\n  Why call AWS Step Functions from AWS Amplify\n</h2>\n\n<p>In many cases, AWS Amplify has needed to implement logic on the Front-end side.<br>\nIf we can call AWS Step Functions from AWS Amplify, we can put some logic to Back-end, which is constructed in the Serverless style.<br>\nThis has positive effects in many aspects, such as scalability, security, etc.</p>\n<h2>\n  <a name=\"how\" href=\"#how\">\n  </a>\n  How\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iy1KiU9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruqqr6pkehach873p6tl.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iy1KiU9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruqqr6pkehach873p6tl.png\" alt=\"Figure: Architecture for How to call AWS Step Functions from AWS Amplify\" loading=\"lazy\" width=\"711\" height=\"481\"></a><br>\n<em>Figure: Architecture for How to call AWS Step Functions from AWS Amplify</em></p>\n\n<p><strong>Note:</strong><br>\nWe can use AWS CDK inside AWS Amplify by Amplify Custom feature.<br>\nBut we need to use AWS CDK v1.</p>\n<h3>\n  <a name=\"create-a-project\" href=\"#create-a-project\">\n  </a>\n  Create a project\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>% npm create vite@latest sample-app <span class=\"nt\">--</span> <span class=\"nt\">--template</span> react-ts \n% <span class=\"nb\">cd </span>sample-app\n% amplify init\n% npm i @aws-amplify/ui-react aws-amplify\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<h3>\n  <a name=\"add-api-graphql\" href=\"#add-api-graphql\">\n  </a>\n  Add API (GraphQL)\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>% amplify add api\n❯ GraphQL \n❯ Continue\n❯ Single object with fields <span class=\"o\">(</span>e.g., “Todo” with ID, name, description<span class=\"o\">)</span>\n? Do you want to edit the schema now? <span class=\"o\">(</span>Y/n<span class=\"o\">)</span> ‣ no\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n<p>Check your API name, and replace below [YOUR_API_NAME] with your own.</p>\n\n<p>[PROJECT_TOP]/amplify/backend/api/[YOUR_API_NAME]/schema.graphql<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight graphql\"><code><span class=\"c\"># This \"input\" configures a global authorization rule to enable public access to</span><span class=\"w\">\n</span><span class=\"c\"># all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules</span><span class=\"w\">\n</span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"n\">AMPLIFY</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">globalAuthRule</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">AuthRule</span><span class=\"w\"> </span><span class=\"err\">=</span><span class=\"w\"> </span><span class=\"err\">{</span><span class=\"w\"> </span><span class=\"n\">allow</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">public</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">}</span><span class=\"w\"> </span><span class=\"c\"># FOR TESTING ONLY!</span><span class=\"w\">\n\n</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Todo</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"p\">!</span><span class=\"w\">\n  </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">!</span><span class=\"w\">\n  </span><span class=\"n\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Mutation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">sendSns</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Add Mutation for call AWS Step Functions.</p>\n\n<h3>\n  <a name=\"add-custom-aws-cdk\" href=\"#add-custom-aws-cdk\">\n  </a>\n  Add Custom (AWS CDK)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>% amplify add custom\n❯ AWS CDK\n? Provide a name <span class=\"k\">for </span>your custom resource ‣ <span class=\"o\">[</span>YOUR_CUSTOM_RESOURCE_NAME]\n? Do you want to edit the CDK stack now? <span class=\"o\">(</span>Y/n<span class=\"o\">)</span> ‣ no\n\n% <span class=\"nb\">cd </span>amplify/backend/custom/[YOUR_CUSTOM_RESOURCE_NAME]\n% npm i @aws-cdk/aws-appsync @aws-cdk/aws-stepfunctions @aws-cdk/aws-stepfunctions-tasks\n% <span class=\"nb\">cd</span> ../../../..\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Check your custom resource name, and replace below [YOUR_CUSTOM_RESOURCE_NAME] with your own.</p>\n\n<p>Also, set up SNS in advance and check the ARN. Replace [SNS_ARN] with it.</p>\n\n<p>And replace [REGION] with the region of your project.</p>\n\n<p>[PROJECT_TOP]/amplify/backend/custom/[YOUR_CUSTOM_RESOURCE_NAME]/cdk-stack.ts<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">cdk</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/core</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">AmplifyHelpers</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-amplify/cli-extensibility-helper</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AmplifyDependentResourcesAttributes</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/amplify-dependent-resources-ref</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">iam</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/aws-iam</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">appsync</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/aws-appsync</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">sns</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/aws-sns</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">stepfunctions</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/aws-stepfunctions</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">tasks</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-cdk/aws-stepfunctions-tasks</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">cdkStack</span> <span class=\"kd\">extends</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">Stack</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"nx\">scope</span><span class=\"p\">:</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">Construct</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span>\n    <span class=\"nx\">props</span><span class=\"p\">?:</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">StackProps</span><span class=\"p\">,</span>\n    <span class=\"nx\">amplifyResourceProps</span><span class=\"p\">?:</span> <span class=\"nx\">AmplifyHelpers</span><span class=\"p\">.</span><span class=\"nx\">AmplifyResourceProps</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">scope</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">);</span>\n    <span class=\"cm\">/* Do not remove - Amplify CLI automatically injects the current deployment environment in this input parameter */</span>\n    <span class=\"k\">new</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">CfnParameter</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">env</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">String</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">description</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Current Amplify CLI env name</span><span class=\"dl\">'</span>\n    <span class=\"p\">});</span>\n    <span class=\"cm\">/* AWS CDK code goes here - learn more: https://docs.aws.amazon.com/cdk/latest/guide/home.html */</span>\n\n    <span class=\"c1\">// # Step Functions</span>\n    <span class=\"c1\">// ## Define Tasks</span>\n    <span class=\"c1\">// ### Choice</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">choiceTask</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">Choice</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">choiceTask</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"c1\">// Wait</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">waitTask</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">Wait</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">waitTask</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">time</span><span class=\"p\">:</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">WaitTime</span><span class=\"p\">.</span><span class=\"nx\">duration</span><span class=\"p\">(</span><span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">seconds</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n    <span class=\"p\">});</span>\n    <span class=\"c1\">// ### SNS</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">snsTopic</span> <span class=\"o\">=</span> <span class=\"nx\">sns</span><span class=\"p\">.</span><span class=\"nx\">Topic</span><span class=\"p\">.</span><span class=\"nx\">fromTopicArn</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"p\">,</span>\n      <span class=\"dl\">'</span><span class=\"s1\">topic</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"dl\">'</span><span class=\"s1\">[SNS_ARN]</span><span class=\"dl\">'</span>\n    <span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">snsTask</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">tasks</span><span class=\"p\">.</span><span class=\"nx\">SnsPublish</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">publish</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">topic</span><span class=\"p\">:</span> <span class=\"nx\">snsTopic</span><span class=\"p\">,</span>\n      <span class=\"na\">integrationPattern</span><span class=\"p\">:</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">IntegrationPattern</span><span class=\"p\">.</span><span class=\"nx\">REQUEST_RESPONSE</span><span class=\"p\">,</span>\n      <span class=\"na\">subject</span><span class=\"p\">:</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">TaskInput</span><span class=\"p\">.</span><span class=\"nx\">fromJsonPathAt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">$.input.subject</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">,</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">TaskInput</span><span class=\"p\">.</span><span class=\"nx\">fromJsonPathAt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">$.input.message</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ### Role for SNS called from Step Functions</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">statesRole</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">iam</span><span class=\"p\">.</span><span class=\"nx\">Role</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">StatesServiceRole</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">assumedBy</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nx\">iam</span><span class=\"p\">.</span><span class=\"nx\">ServicePrincipal</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">states.[REGION].amazonaws.com</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ## Set Step Functions</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">sf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">StateMachine</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">StateMachine</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// stateMachineType: stepfunctions.StateMachineType.EXPRESS,</span>\n      <span class=\"na\">definition</span><span class=\"p\">:</span> <span class=\"nx\">choiceTask</span>\n        <span class=\"p\">.</span><span class=\"nx\">when</span><span class=\"p\">(</span>\n          <span class=\"nx\">stepfunctions</span><span class=\"p\">.</span><span class=\"nx\">Condition</span><span class=\"p\">.</span><span class=\"nx\">stringEquals</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">$.input.subject</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">wait</span><span class=\"dl\">'</span><span class=\"p\">),</span>\n          <span class=\"nx\">waitTask</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"nx\">snsTask</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">otherwise</span><span class=\"p\">(</span><span class=\"nx\">snsTask</span><span class=\"p\">),</span>\n      <span class=\"na\">role</span><span class=\"p\">:</span> <span class=\"nx\">statesRole</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// # AppSync</span>\n    <span class=\"c1\">// ## Access other Amplify Resources</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">retVal</span><span class=\"p\">:</span> <span class=\"nx\">AmplifyDependentResourcesAttributes</span> <span class=\"o\">=</span>\n      <span class=\"nx\">AmplifyHelpers</span><span class=\"p\">.</span><span class=\"nx\">addResourceDependency</span><span class=\"p\">(</span>\n        <span class=\"k\">this</span><span class=\"p\">,</span>\n        <span class=\"nx\">amplifyResourceProps</span><span class=\"p\">.</span><span class=\"nx\">category</span><span class=\"p\">,</span>\n        <span class=\"nx\">amplifyResourceProps</span><span class=\"p\">.</span><span class=\"nx\">resourceName</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n            <span class=\"na\">category</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">api</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n            <span class=\"na\">resourceName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">[YOUR_API_NAME]</span><span class=\"dl\">'</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">);</span>\n\n    <span class=\"c1\">// ## Request VTL</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">requestVTL</span> <span class=\"o\">=</span> <span class=\"s2\">`\n      $util.qr($ctx.stash.put(\"executionId\", $util.autoId()))\n\n      #set( $Input = {} )\n      $util.qr($Input.put(\"subject\", $ctx.args.subject))\n      $util.qr($Input.put(\"message\", $ctx.args.message))\n\n      #set( $Headers = {\n        \"content-type\": \"application/x-amz-json-1.0\",\n        \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n      } )\n      #set( $Body = {\n        \"stateMachineArn\": \"</span><span class=\"p\">${</span><span class=\"nx\">sf</span><span class=\"p\">.</span><span class=\"nx\">stateMachineArn</span><span class=\"p\">}</span><span class=\"s2\">\"\n      } )\n\n      #set( $BaseInput = {} )\n      $util.qr($BaseInput.put(\"input\", $Input))\n      $util.qr($Body.put(\"input\", $util.toJson($BaseInput)))\n\n      #set( $PutObject = {\n        \"version\": \"2018-05-29\",\n        \"method\": \"POST\",\n        \"resourcePath\": \"/\"\n      } )\n      #set ( $Params = {} )\n      $util.qr($Params.put(\"headers\",$Headers))\n      $util.qr($Params.put(\"body\",$Body))\n\n      $util.qr($PutObject.put(\"params\",$Params))\n      $util.toJson($PutObject)\n    `</span><span class=\"p\">;</span>\n    <span class=\"c1\">// ## Response VTL</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">responseVTL</span> <span class=\"o\">=</span> <span class=\"s2\">`\n      $util.toJson($ctx.result)\n    `</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// ## Role for Step Functions</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">stepFunctionsRole</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">iam</span><span class=\"p\">.</span><span class=\"nx\">Role</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">stepFunctionsRole</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">assumedBy</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nx\">iam</span><span class=\"p\">.</span><span class=\"nx\">ServicePrincipal</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">appsync.amazonaws.com</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">stepFunctionsRole</span><span class=\"p\">.</span><span class=\"nx\">addToPolicy</span><span class=\"p\">(</span>\n      <span class=\"k\">new</span> <span class=\"nx\">iam</span><span class=\"p\">.</span><span class=\"nx\">PolicyStatement</span><span class=\"p\">({</span>\n        <span class=\"na\">actions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">states:StartExecution</span><span class=\"dl\">'</span><span class=\"p\">],</span>\n        <span class=\"na\">resources</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">sf</span><span class=\"p\">.</span><span class=\"nx\">stateMachineArn</span><span class=\"p\">]</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">);</span>\n\n    <span class=\"c1\">// ## AppSync DataSource</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">dataSourceId</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">sendSnsHttpDataSource</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">dataSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">appsync</span><span class=\"p\">.</span><span class=\"nx\">CfnDataSource</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">dataSourceId</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">apiId</span><span class=\"p\">:</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">Fn</span><span class=\"p\">.</span><span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"nx\">retVal</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">.[</span><span class=\"nx\">YOUR_API_NAME</span><span class=\"p\">].</span><span class=\"nx\">GraphQLAPIIdOutput</span><span class=\"p\">),</span>\n      <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">dataSourceId</span><span class=\"p\">,</span>\n      <span class=\"na\">serviceRoleArn</span><span class=\"p\">:</span> <span class=\"nx\">stepFunctionsRole</span><span class=\"p\">.</span><span class=\"nx\">roleArn</span><span class=\"p\">,</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">HTTP</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">httpConfig</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">endpoint</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://states.[REGION].amazonaws.com</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"na\">authorizationConfig</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">authorizationType</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">AWS_IAM</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n          <span class=\"na\">awsIamConfig</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">signingRegion</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">[REGION]</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n            <span class=\"na\">signingServiceName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">states</span><span class=\"dl\">'</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ## AppSync Resolver</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">resolver</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">appsync</span><span class=\"p\">.</span><span class=\"nx\">CfnResolver</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">custom-resolver</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">apiId</span><span class=\"p\">:</span> <span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">Fn</span><span class=\"p\">.</span><span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"nx\">retVal</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">.[</span><span class=\"nx\">YOUR_API_NAME</span><span class=\"p\">].</span><span class=\"nx\">GraphQLAPIIdOutput</span><span class=\"p\">),</span>\n      <span class=\"na\">fieldName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">sendSns</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">typeName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mutation</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n      <span class=\"na\">requestMappingTemplate</span><span class=\"p\">:</span> <span class=\"nx\">requestVTL</span><span class=\"p\">,</span>\n      <span class=\"na\">responseMappingTemplate</span><span class=\"p\">:</span> <span class=\"nx\">responseVTL</span><span class=\"p\">,</span>\n      <span class=\"na\">dataSourceName</span><span class=\"p\">:</span> <span class=\"nx\">dataSource</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"push-your-amplify-project\" href=\"#push-your-amplify-project\">\n  </a>\n  Push your Amplify project\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>% amplify push\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Push your Amplify project and wait a minute.</p>\n\n<h3>\n  <a name=\"set-up-other-codes\" href=\"#set-up-other-codes\">\n  </a>\n  Set up other codes\n</h3>\n\n<p>Set up Vite and Front-end codes.</p>\n\n<p>[PROJECT_TOP]/vite.config.ts<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">defineConfig</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">vite</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">react</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@vitejs/plugin-react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// https://vitejs.dev/config/</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">defineConfig</span><span class=\"p\">({</span>\n  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">react</span><span class=\"p\">()],</span>\n  <span class=\"na\">server</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">port</span><span class=\"p\">:</span> <span class=\"mi\">8080</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">resolve</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">alias</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span> <span class=\"na\">find</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">./runtimeConfig</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">replacement</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">./runtimeConfig.browser</span><span class=\"dl\">\"</span> <span class=\"p\">},</span>\n      <span class=\"p\">{</span> <span class=\"na\">find</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">@</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">replacement</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">/src</span><span class=\"dl\">\"</span> <span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>[PROJECT_TOP]/index.html<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"icon\"</span> <span class=\"na\">type=</span><span class=\"s\">\"image/svg+xml\"</span> <span class=\"na\">href=</span><span class=\"s\">\"/vite.svg\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Vite + React + TS<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"root\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"module\"</span> <span class=\"na\">src=</span><span class=\"s\">\"/src/main.tsx\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;script&gt;</span>\n      <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">global</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">;</span>\n      <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">process</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"na\">env</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">DEBUG</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span> <span class=\"p\">},</span>\n      <span class=\"p\">};</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n    <span class=\"nt\">&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>[PROJECT_TOP]/src/main.tsx<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-dom/client</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./App</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-amplify/ui-react/styles.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Amplify</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">aws-amplify</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">awsExports</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./aws-exports</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"nx\">Amplify</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"nx\">awsExports</span><span class=\"p\">);</span>\n\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">createRoot</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">root</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">).</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n  <span class=\"p\">&lt;</span><span class=\"nc\">React</span><span class=\"p\">.</span><span class=\"nc\">StrictMode</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nc\">React</span><span class=\"p\">.</span><span class=\"nc\">StrictMode</span><span class=\"p\">&gt;</span>\n<span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>[PROJECT_TOP]/src/App.tsx<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Flex</span><span class=\"p\">,</span> <span class=\"nx\">Button</span><span class=\"p\">,</span> <span class=\"nx\">TextField</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@aws-amplify/ui-react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">API</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">aws-amplify</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">sendSns</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./graphql/mutations</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">():</span> <span class=\"nx\">JSX</span><span class=\"p\">.</span><span class=\"nx\">Element</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">subject</span><span class=\"p\">,</span> <span class=\"nx\">setSubject</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">setMessage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">callSendSns</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">subject</span> <span class=\"o\">||</span> <span class=\"nx\">subject</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">message</span> <span class=\"o\">||</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">API</span><span class=\"p\">.</span><span class=\"nx\">graphql</span><span class=\"p\">({</span>\n      <span class=\"na\">query</span><span class=\"p\">:</span> <span class=\"nx\">sendSns</span><span class=\"p\">,</span>\n      <span class=\"na\">variables</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">subject</span><span class=\"p\">,</span>\n        <span class=\"nx\">message</span>\n      <span class=\"p\">},</span>\n      <span class=\"na\">authMode</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">API_KEY</span><span class=\"dl\">'</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">callSendSns</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n    <span class=\"nx\">setSubject</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n    <span class=\"nx\">setMessage</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">handleSetSubject</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FormEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setSubject</span><span class=\"p\">((</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleSetMessage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FormEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLInputElement</span><span class=\"o\">&gt;</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setMessage</span><span class=\"p\">((</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">Flex</span> <span class=\"na\">direction</span><span class=\"p\">=</span><span class=\"s\">\"column\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">TextField</span>\n        <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"Subject\"</span>\n        <span class=\"na\">label</span><span class=\"p\">=</span><span class=\"s\">\"Subject\"</span>\n        <span class=\"na\">isRequired</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"kc\">true</span><span class=\"si\">}</span>\n        <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">subject</span><span class=\"si\">}</span>\n        <span class=\"na\">errorMessage</span><span class=\"p\">=</span><span class=\"s\">\"There is an error\"</span>\n        <span class=\"na\">onInput</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSetSubject</span><span class=\"si\">}</span>\n      <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">TextField</span>\n        <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"Message\"</span>\n        <span class=\"na\">label</span><span class=\"p\">=</span><span class=\"s\">\"Message\"</span>\n        <span class=\"na\">isRequired</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"kc\">true</span><span class=\"si\">}</span>\n        <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">message</span><span class=\"si\">}</span>\n        <span class=\"na\">errorMessage</span><span class=\"p\">=</span><span class=\"s\">\"There is an error\"</span>\n        <span class=\"na\">onInput</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleSetMessage</span><span class=\"si\">}</span>\n      <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Button</span>\n        <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"submit\"</span>\n        <span class=\"na\">variation</span><span class=\"p\">=</span><span class=\"s\">\"primary\"</span>\n        <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"nx\">callSendSns</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span><span class=\"si\">}</span>\n      <span class=\"p\">&gt;</span>\n        Send SNS\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">Flex</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"check-the-operation-with-the-movie\" href=\"#check-the-operation-with-the-movie\">\n  </a>\n  Check the operation with the movie\n</h3>\n\n<p>Let's check the operation with the movie.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>% npm run dev\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vASDvJx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlt23s6ysu3xlwgyl9zm.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vASDvJx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlt23s6ysu3xlwgyl9zm.gif\" alt=\"Check the operation with the movie\" loading=\"lazy\" width=\"880\" height=\"606\" data-animated=\"true\"></a></p>\n\n","body_markdown":"## Purpose / Motivation\nI read this great article.\n\n> [AWS Amplify: execute a Step Functions state machine from Appsync](https://awstip.com/aws-amplify-initialize-step-functions-execution-from-appsync-ad32b9dc35be)\n\nThis article shows how to call AWS Step Functions from AWS Amplify, including creating some VTL files.\n\nBut now we can use AWS CDK inside AWS Amplify with the Amplify Custom feature.\nAnd I want to use AWS CDK.\nSo let's translate it to the AWS CDK style.\n\n## Why call AWS Step Functions from AWS Amplify\nIn many cases, AWS Amplify has needed to implement logic on the Front-end side.\nIf we can call AWS Step Functions from AWS Amplify, we can put some logic to Back-end, which is constructed in the Serverless style.\nThis has positive effects in many aspects, such as scalability, security, etc.\n\n## How\n![Figure: Architecture for How to call AWS Step Functions from AWS Amplify](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruqqr6pkehach873p6tl.png)\n*Figure: Architecture for How to call AWS Step Functions from AWS Amplify*\n\n**Note:**\nWe can use AWS CDK inside AWS Amplify by Amplify Custom feature.\nBut we need to use AWS CDK v1.\n\n### Create a project\n\n```sh\n% npm create vite@latest sample-app -- --template react-ts \n% cd sample-app\n% amplify init\n% npm i @aws-amplify/ui-react aws-amplify\n```\n\n### Add API (GraphQL)\n\n```sh\n% amplify add api\n❯ GraphQL \n❯ Continue\n❯ Single object with fields (e.g., “Todo” with ID, name, description)\n? Do you want to edit the schema now? (Y/n) ‣ no\n```\n\nCheck your API name, and replace below [YOUR_API_NAME] with your own.\n\n[PROJECT_TOP]/amplify/backend/api/[YOUR_API_NAME]/schema.graphql\n```graphql\n# This \"input\" configures a global authorization rule to enable public access to\n# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules\ninput AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!\n\ntype Todo @model {\n  id: ID!\n  name: String!\n  description: String\n}\n\ntype Mutation {\n  sendSns(subject: String, message: String): String\n}\n```\n\nAdd Mutation for call AWS Step Functions.\n\n### Add Custom (AWS CDK)\n\n```sh\n% amplify add custom\n❯ AWS CDK\n? Provide a name for your custom resource ‣ [YOUR_CUSTOM_RESOURCE_NAME]\n? Do you want to edit the CDK stack now? (Y/n) ‣ no\n\n% cd amplify/backend/custom/[YOUR_CUSTOM_RESOURCE_NAME]\n% npm i @aws-cdk/aws-appsync @aws-cdk/aws-stepfunctions @aws-cdk/aws-stepfunctions-tasks\n% cd ../../../..\n```\n\nCheck your custom resource name, and replace below [YOUR_CUSTOM_RESOURCE_NAME] with your own.\n\nAlso, set up SNS in advance and check the ARN. Replace [SNS_ARN] with it.\n\nAnd replace [REGION] with the region of your project.\n\n[PROJECT_TOP]/amplify/backend/custom/[YOUR_CUSTOM_RESOURCE_NAME]/cdk-stack.ts\n```typescript\nimport * as cdk from '@aws-cdk/core';\nimport * as AmplifyHelpers from '@aws-amplify/cli-extensibility-helper';\nimport { AmplifyDependentResourcesAttributes } from '../../types/amplify-dependent-resources-ref';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nexport class cdkStack extends cdk.Stack {\n  constructor(\n    scope: cdk.Construct,\n    id: string,\n    props?: cdk.StackProps,\n    amplifyResourceProps?: AmplifyHelpers.AmplifyResourceProps\n  ) {\n    super(scope, id, props);\n    /* Do not remove - Amplify CLI automatically injects the current deployment environment in this input parameter */\n    new cdk.CfnParameter(this, 'env', {\n      type: 'String',\n      description: 'Current Amplify CLI env name'\n    });\n    /* AWS CDK code goes here - learn more: https://docs.aws.amazon.com/cdk/latest/guide/home.html */\n\n    // # Step Functions\n    // ## Define Tasks\n    // ### Choice\n    const choiceTask = new stepfunctions.Choice(this, 'choiceTask');\n    // Wait\n    const waitTask = new stepfunctions.Wait(this, 'waitTask', {\n      time: stepfunctions.WaitTime.duration(cdk.Duration.seconds(5))\n    });\n    // ### SNS\n    const snsTopic = sns.Topic.fromTopicArn(\n      this,\n      'topic',\n      '[SNS_ARN]'\n    );\n    const snsTask = new tasks.SnsPublish(this, 'publish', {\n      topic: snsTopic,\n      integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n      subject: stepfunctions.TaskInput.fromJsonPathAt('$.input.subject').value,\n      message: stepfunctions.TaskInput.fromJsonPathAt('$.input.message')\n    });\n\n    // ### Role for SNS called from Step Functions\n    const statesRole = new iam.Role(this, 'StatesServiceRole', {\n      assumedBy: new iam.ServicePrincipal('states.[REGION].amazonaws.com')\n    });\n\n    // ## Set Step Functions\n    const sf = new stepfunctions.StateMachine(this, 'StateMachine', {\n      // stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: choiceTask\n        .when(\n          stepfunctions.Condition.stringEquals('$.input.subject', 'wait'),\n          waitTask.next(snsTask)\n        )\n        .otherwise(snsTask),\n      role: statesRole\n    });\n\n    // # AppSync\n    // ## Access other Amplify Resources\n    const retVal: AmplifyDependentResourcesAttributes =\n      AmplifyHelpers.addResourceDependency(\n        this,\n        amplifyResourceProps.category,\n        amplifyResourceProps.resourceName,\n        [\n          {\n            category: 'api',\n            resourceName: '[YOUR_API_NAME]'\n          }\n        ]\n      );\n\n    // ## Request VTL\n    const requestVTL = `\n      $util.qr($ctx.stash.put(\"executionId\", $util.autoId()))\n      \n      #set( $Input = {} )\n      $util.qr($Input.put(\"subject\", $ctx.args.subject))\n      $util.qr($Input.put(\"message\", $ctx.args.message))\n      \n      #set( $Headers = {\n        \"content-type\": \"application/x-amz-json-1.0\",\n        \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n      } )\n      #set( $Body = {\n        \"stateMachineArn\": \"${sf.stateMachineArn}\"\n      } )\n      \n      #set( $BaseInput = {} )\n      $util.qr($BaseInput.put(\"input\", $Input))\n      $util.qr($Body.put(\"input\", $util.toJson($BaseInput)))\n      \n      #set( $PutObject = {\n        \"version\": \"2018-05-29\",\n        \"method\": \"POST\",\n        \"resourcePath\": \"/\"\n      } )\n      #set ( $Params = {} )\n      $util.qr($Params.put(\"headers\",$Headers))\n      $util.qr($Params.put(\"body\",$Body))\n      \n      $util.qr($PutObject.put(\"params\",$Params))\n      $util.toJson($PutObject)\n    `;\n    // ## Response VTL\n    const responseVTL = `\n      $util.toJson($ctx.result)\n    `;\n\n    // ## Role for Step Functions\n    const stepFunctionsRole = new iam.Role(this, 'stepFunctionsRole', {\n      assumedBy: new iam.ServicePrincipal('appsync.amazonaws.com')\n    });\n    stepFunctionsRole.addToPolicy(\n      new iam.PolicyStatement({\n        actions: ['states:StartExecution'],\n        resources: [sf.stateMachineArn]\n      })\n    );\n\n    // ## AppSync DataSource\n    const dataSourceId = 'sendSnsHttpDataSource';\n    const dataSource = new appsync.CfnDataSource(this, dataSourceId, {\n      apiId: cdk.Fn.ref(retVal.api.[YOUR_API_NAME].GraphQLAPIIdOutput),\n      name: dataSourceId,\n      serviceRoleArn: stepFunctionsRole.roleArn,\n      type: 'HTTP',\n      httpConfig: {\n        endpoint: 'https://states.[REGION].amazonaws.com',\n        authorizationConfig: {\n          authorizationType: 'AWS_IAM',\n          awsIamConfig: {\n            signingRegion: '[REGION]',\n            signingServiceName: 'states'\n          }\n        }\n      }\n    });\n\n    // ## AppSync Resolver\n    const resolver = new appsync.CfnResolver(this, 'custom-resolver', {\n      apiId: cdk.Fn.ref(retVal.api.[YOUR_API_NAME].GraphQLAPIIdOutput),\n      fieldName: 'sendSns',\n      typeName: 'Mutation',\n      requestMappingTemplate: requestVTL,\n      responseMappingTemplate: responseVTL,\n      dataSourceName: dataSource.name\n    });\n  }\n}\n```\n\n### Push your Amplify project\n\n```sh\n% amplify push\n```\n\nPush your Amplify project and wait a minute.\n\n### Set up other codes\nSet up Vite and Front-end codes.\n\n[PROJECT_TOP]/vite.config.ts\n```typescript\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 8080,\n  },\n  resolve: {\n    alias: [\n      { find: \"./runtimeConfig\", replacement: \"./runtimeConfig.browser\" },\n      { find: \"@\", replacement: \"/src\" },\n    ],\n  },\n});\n```\n\n[PROJECT_TOP]/index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n    <script>\n      window.global = window;\n      window.process = {\n        env: { DEBUG: undefined },\n      };\n      var exports = {};\n    </script>\n  </body>\n</html>\n```\n\n[PROJECT_TOP]/src/main.tsx\n```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport { Amplify } from 'aws-amplify';\nimport awsExports from './aws-exports';\nAmplify.configure(awsExports);\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n[PROJECT_TOP]/src/App.tsx\n```tsx\nimport React, { useState } from 'react';\n\nimport { Flex, Button, TextField } from '@aws-amplify/ui-react';\n\nimport { API } from 'aws-amplify';\nimport { sendSns } from './graphql/mutations';\n\nfunction App(): JSX.Element {\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n\n  const callSendSns = async (): Promise<void> => {\n    if (!subject || subject.length === 0) {\n      return;\n    }\n    if (!message || message.length === 0) {\n      return;\n    }\n\n    const result = await API.graphql({\n      query: sendSns,\n      variables: {\n        subject,\n        message\n      },\n      authMode: 'API_KEY'\n    });\n    console.log('callSendSns', result);\n    setSubject('');\n    setMessage('');\n  };\n\n  const handleSetSubject = (event: React.FormEvent<HTMLInputElement>): void => {\n    setSubject((event.target as any).value);\n  };\n  const handleSetMessage = (event: React.FormEvent<HTMLInputElement>): void => {\n    setMessage((event.target as any).value);\n  };\n\n  return (\n    <Flex direction=\"column\">\n      <TextField\n        placeholder=\"Subject\"\n        label=\"Subject\"\n        isRequired={true}\n        value={subject}\n        errorMessage=\"There is an error\"\n        onInput={handleSetSubject}\n      />\n      <TextField\n        placeholder=\"Message\"\n        label=\"Message\"\n        isRequired={true}\n        value={message}\n        errorMessage=\"There is an error\"\n        onInput={handleSetMessage}\n      />\n      <Button\n        type=\"submit\"\n        variation=\"primary\"\n        onClick={() => {\n          callSendSns();\n        }}\n      >\n        Send SNS\n      </Button>\n    </Flex>\n  );\n}\n\nexport default App;\n```\n\n### Check the operation with the movie\nLet's check the operation with the movie.\n\n```sh\n% npm run dev\n```\n\n![Check the operation with the movie](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlt23s6ysu3xlwgyl9zm.gif)\n","user":{"name":"Kihara, Takuya","username":"tacck","twitter_username":"tacck","github_username":"tacck","user_id":552419,"website_url":"https://www.tacck.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--lxqJLzL9--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/552419/e33875f3-e4c3-4511-98f3-3b9727b11ad1.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--1wYgbsws--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/552419/e33875f3-e4c3-4511-98f3-3b9727b11ad1.jpg"},"organization":{"name":"AWS Community Builders ","username":"aws-builders","slug":"aws-builders","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--zmOZQNzv--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"}}