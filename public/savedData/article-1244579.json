{"type_of":"article","id":1244579,"title":"Angular Chat Application with Socket.io and Node Js","description":"In this article we will building an angular chat application with Socket.io and Node Js  We will be...","readable_publish_date":"Nov 5","slug":"angular-chat-application-with-socketio-and-node-js-1jo4","path":"/alakkadshaw/angular-chat-application-with-socketio-and-node-js-1jo4","url":"https://dev.to/alakkadshaw/angular-chat-application-with-socketio-and-node-js-1jo4","comments_count":0,"public_reactions_count":2,"collection_id":null,"published_timestamp":"2022-11-05T16:10:34Z","positive_reactions_count":2,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1244579.png","canonical_url":"https://dev.to/alakkadshaw/angular-chat-application-with-socketio-and-node-js-1jo4","created_at":"2022-11-05T14:47:32Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-05T16:10:34Z","last_comment_at":"2022-11-05T16:10:34Z","reading_time_minutes":10,"tag_list":"angular, node, javascript, tutorial","tags":["angular","node","javascript","tutorial"],"body_html":"<p>In this article we will building an angular chat application with Socket.io and Node Js</p>\n\n<p>We will be building a basic chat application using Node Js and Socket.io in the back-end and Angular in the front end.</p>\n\n<p>The code for this app is free and open-source and can be downloaded from Github. Link at the bottom of the article.</p>\n\n<blockquote>\n<p>New to DeadSimpleChat? It's a turn key chat that you can easily add to your website or App â€”without any complicated code. For Virtual / Live events, SaaS App, Social Platform, Education, Gaming, Finance  <a href=\"https://deadsimplechat.com/getstarted\">Sign Up for Free</a></p>\n</blockquote>\n\n<h2>\n  <a name=\"prerequisites-and-application-stack\" href=\"#prerequisites-and-application-stack\">\n  </a>\n  Prerequisites and Application Stack\n</h2>\n\n<p>We will be using the following technologies</p>\n\n<ol>\n<li>Angular</li>\n<li>Socket.io</li>\n<li>Node Js</li>\n<li>HTML</li>\n<li>CSS</li>\n</ol>\n\n<p>That's it. Now let us look at the how the finished application will look like</p>\n\n<h2>\n  <a name=\"how-the-application-will-look-like\" href=\"#how-the-application-will-look-like\">\n  </a>\n  How the Application will look like\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eulXIUPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpwh9n1yjcet909av357.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eulXIUPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpwh9n1yjcet909av357.png\" alt=\"Finished Application\" loading=\"lazy\" width=\"880\" height=\"660\"></a></p>\n\n<h2>\n  <a name=\"building-the-backend\" href=\"#building-the-backend\">\n  </a>\n  Building the Backend\n</h2>\n\n<p>Let's start building the backend first.</p>\n\n<p>We will be creating a 2 new projects with Node Js one for socket.io and another for angular</p>\n\n<p>We need the Node Js installed. Now create a new folder with the name<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>mkdir nodejs-socket-server\ncd nodejs-socket-server\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>now type npm init to initilize the project and press enter to the questions asked.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--V0cJ5gaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgfzak2f2gsbwvsi78iq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--V0cJ5gaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgfzak2f2gsbwvsi78iq.png\" alt=\"npm init\" loading=\"lazy\" width=\"880\" height=\"557\"></a></p>\n\n<p>This will generate a package.json file. Let us now install express js server. In the terminal type<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install express --save\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Open the index.js file and type the following code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\n\napp.get('/', (req, res) =&gt; {\n  res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');\n});\n\nserver.listen(3000, () =&gt; {\n  console.log('listening on *:3000');\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Your <code>package.json</code> should look something like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  \"name\": \"nodejs-socket-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"nodejs-socket-server\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"DeadSimpleChat-team\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.1\"\n  }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>now type the command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>node index.js\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This will start the server and when you go to <a href=\"http://localhost:3000/\">http://localhost:3000/</a> you will see the webpage</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u2koyyLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frtig4f4oqxn07p9fvth.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u2koyyLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frtig4f4oqxn07p9fvth.png\" alt=\"hello world\" loading=\"lazy\" width=\"880\" height=\"486\"></a></p>\n\n<p>Now we have successfully started the Node Js server and rendered hello world with it.</p>\n\n<p>Now let us install socket.io. Now we have successfully started the Node Js server and rendered hello world with it.</p>\n\n<p>Now let us install socket.io. type<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install socket.io --save\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>to install socket.io. Your package.json should look something like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  \"name\": \"nodejs-socket-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"nodejs-socket-server\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"DeadSimpleChat-team\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.1\",\n    \"socket.io\": \"^4.5.1\"\n  }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, update your index.js code with the following<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\nconst { Server } = require(\"socket.io\");\nconst io = new Server(server);\n\napp.get('/', (req, res) =&gt; {\n  res.send(\"Hello World\");\n});\n\nio.on('connection', (socket) =&gt; {\n  console.log('a user connected');\n});\n\nserver.listen(3000, () =&gt; {\n  console.log('listening on *:3000');\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What are we doing here:</p>\n\n<p>The socket.io is comprised of two parts</p>\n\n<ol>\n<li>Server side: Socket.io integrates with NodeJS server</li>\n<li>Client Side: Client library that integrates into our Angular App</li>\n</ol>\n\n<p>We are initializing a new instance of socket.io and we are passing it the HTTP server object.</p>\n\n<p>Then we are listening on the connection event for incoming sockets and logging it to the console.</p>\n\n<p>Using this process is going to give us CORS error when we send request through the Angular app. We can easily fix that by adding the code below.</p>\n\n<p>Edit the<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const io = new Server(server)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>to<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The socket.io also fires a disconnect event and we can listen to that with the code below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>io.on('connection', (socket) =&gt; {\n  console.log('a user connected');\n  socket.on('disconnect', () =&gt; {\n    console.log('user disconnected');\n  });\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"emitting-events\" href=\"#emitting-events\">\n  </a>\n  Emitting events\n</h2>\n\n<p>With socket.io you can send and receive events and data that you want.</p>\n\n<p>Let us make it so that when the server receives the data with an event called as the message it emits to everyone connected to the chat including the person who sent the message.</p>\n\n<p>To make this possible edit the above code to look like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>io.on('connection', (socket)=&gt;{\n    console.log('a user connected');\n    socket.on('message',(msg)=&gt;{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n\n    socket.on('disconnect',()=&gt;{\n    console.log('user disconnected')\n    })\n})\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"server-built\" href=\"#server-built\">\n  </a>\n  Server built\n</h2>\n\n<p>The finished code looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require('express');\nconst app = express();\nconst http = require('http');\nconst { disconnect } = require('process');\nconst server = http.createServer(app);\nconst {Server} = require(\"socket.io\");\n\n\nconst io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n\napp.get('/', (req, res) =&gt; {\n  console.log(\"hello world\")  \n  res.send(\"hello world\")\n  });\n\n\nio.on('connection', (socket)=&gt;{\n    console.log('a user connected');\n    socket.on('message',(msg)=&gt;{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n\n    socket.on('disconnect',()=&gt;{\n    console.log('user disconnected')\n    })\n})\n\nserver.listen(3000, () =&gt; {\n  console.log('listening on *:3000');\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The complete code for the app can be found on Github.</p>\n\n<h2>\n  <a name=\"building-the-angular-app\" href=\"#building-the-angular-app\">\n  </a>\n  Building the Angular App\n</h2>\n\n<p>Now let us create an angular application from scratch. To create an angular application you need to have angular and NodeJs installed<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install -g @angular/cli\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Type the above command to install angular cli. Then create a new app and name it angular-chat-application like this<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>ng new angular-chat-application\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>It will ask you a few questions</p>\n\n<ol>\n<li>Would you like to add Angular routing: Select No, we don't need that for this tutorial</li>\n<li>Which stylesheet format would you like to use: Select CSS</li>\n</ol>\n\n<p>This will install the app. now cd into the application and the app would look some thing like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fF_soPJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkqgcekf1d772zi9s3l6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fF_soPJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkqgcekf1d772zi9s3l6.png\" alt=\"Image description\" loading=\"lazy\" width=\"326\" height=\"1080\"></a></p>\n\n<p>start the application by running the below command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd angular-chat-application\nng serve --open\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now go to the localhost:4200 where our angular app is running and you can see the landing page</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gxyficJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/verepqmnyycx1o4y1j3o.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gxyficJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/verepqmnyycx1o4y1j3o.png\" alt=\"Image description\" loading=\"lazy\" width=\"880\" height=\"763\"></a><br>\nopen the code in your text editor. We are using VS Code but you can use whatever text editor you prefer</p>\n\n<p>Here go to<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>src -&gt; app -&gt; app.component.html\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>there delete all the code that you see there and save you can see the blank page in your angular application.</p>\n\n<p>Now create a file called chat-message.ts and write the below code there<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export class ChatMessage {\n\n    constructor( \n   public msg: string\n    ) {  }\n\n  }\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In this class we have a property msg. Here we can create multiple properties that can signify the ChatMessage Object like id, timestamp and other properties which we might be interested in.</p>\n\n<p>For this tutorial however we would like to keep it simple and just have one msg property that will be signify the chat message.</p>\n\n<p>Now create a new folder inside the app folder and name it chat-app</p>\n\n<p>Here create 3 files<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>chat-app.component.html\nchat-app.component.css\nchat-app.component.ts\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In the<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>chat-app.component.ts\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>paste the following code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { Component } from '@angular/core';\nimport { ChatMessage } from '../chat-message';\n\n@Component({\n  selector: 'app-chat-app',\n  templateUrl: './chat-app.component.html',\n  styleUrls: ['./chat-app.component.css']\n})\n\nexport class ChatAppComponent {\n\n  model = new ChatMessage(\"\");\n\n  messageList: string[] = [];\n\n  sendMessage(): void {\n  };\n\nngOnInit(): void {\n\n}\n\n  submitted = false;\n\n  onSubmit() { \n\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What are we doing here.</p>\n\n<p>We have imported the component from the angular core</p>\n\n<p>We have imported the ChatMessage Object that we created</p>\n\n<p>then</p>\n\n<p>we have initialized the model with a new ChatMessage</p>\n\n<p>created a messageList array for the messages that we are going to receive. In the real app we can store the messages in a database as well. But that is out of scope of this article.</p>\n\n<p>then we have created a sendMessage function which we will use to send messages to all the users</p>\n\n<p>Now, we need a messages.service that we will use to send and receive messages to the Node Js Socket io server.</p>\n\n<h2>\n  <a name=\"creating-a-service-to-send-and-receive-messages\" href=\"#creating-a-service-to-send-and-receive-messages\">\n  </a>\n  Creating a Service to send and receive messages\n</h2>\n\n<p>Go to your terminal and type the code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>ng generate service messages\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This code will generate the message service then paste the below code to the message.service.ts file<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable, Observer} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n\n  constructor(private socket: Socket) { }\n\n  sendMessage(msg:string){\n    console.log(msg)\n    this.socket.emit('message', msg);\n  }\n\n\n  getMessage(){\n  return  new Observable((observer: Observer&lt;any&gt;)=&gt;{\n      this.socket.on('message', (message:string)=&gt;{\n        observer.next(message)\n      })\n    })\n  }\n\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here we are adding the Observable and Observer from the rxjs library and we have the sendMessage() function that is emitting the message event that we are listening to in our server with the msg data that is our chat message that we want to broadcast.</p>\n\n<p>Our getMessage() function listens to the message.</p>\n\n<p>One more thing we need to do is add the socket.io angular library to our angular application for front-end socket integration.</p>\n\n<p>open the file app.module.ts and on the terminal type the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install ngx-socket-io --save\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This will install the front-end socket io library that we need.</p>\n\n<p>In the module.ts we also need to add the socket.io module and we also need to add the ChatAppComponent from the chat-app folder that we created.</p>\n\n<p>We also need to point the socket.io to the socket.io server. since by default it point to the angular server we will need to change that<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We will also need to add BrowserModule and Forms Module for when we create the HTML for this app</p>\n\n<p>Here is the final <code>app.module.ts</code> code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\nimport { CommonModule } from '@angular/common';\nimport { ChatAppComponent } from './chat-app/chat-app.component';\n\nconst config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ChatAppComponent\n  ],\n  imports: [\n    BrowserModule,\n    SocketIoModule.forRoot(config),\n    FormsModule,\n    CommonModule,\n\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Let us update the chat-app.component.ts file to use the message service to get and receive the data from the server</p>\n\n<p>go to chat-app.component.ts file and edit the code to make it look like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { Component } from '@angular/core';\nimport { MessagesService } from '../messages.service';\nimport { ChatMessage } from '../chat-message';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-chat-app',\n  templateUrl: './chat-app.component.html',\n  styleUrls: ['./chat-app.component.css']\n})\nexport class ChatAppComponent {\n\n  constructor(private messageService: MessagesService) {}\n\n  model = new ChatMessage(\"\");\n\n  messageList: string[] = [];\n\n  sendMessage(): void {\n    console.log(this.model.msg)\n    this.messageService.sendMessage(this.model.msg)\n    this.model.msg = \"\";\n  };\n\nngOnInit(): void {\n  this.messageService.getMessage().subscribe((message:string)=&gt; {\n    this.messageList.push(message);\n  })\n}\n\n  submitted = false;\n\n  onSubmit() { \n    this.sendMessage()\n    this.submitted = true;\n\n   }\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What are we doing here</p>\n\n<p>We have updated the sendMessage() function to use the messageService to send a message and we are calling the sendMessage() function when the HTML form is submitted</p>\n\n<p>We will be building the html form shortly</p>\n\n<p>and on ngInit() we are listning to the messageService for any messages that are coming from the server and we are pushing the messages that have come from the server to the messageList array.</p>\n\n<p>In the production application we can also push these messages to a database.</p>\n\n<p>Now, let us develop the front-end of our application</p>\n\n<p>First go to the style.css and paste the below code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>@import url('https://unpkg.com/bootstrap@5.2.0/dist/css/bootstrap.min.css');\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>here we a adding bootstrap a front-end css library to beautify our html</p>\n\n<p>Now,</p>\n\n<p>go to chat-app.component.html and paste the below code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;div class=\"form-group container\"&gt;\n    &lt;ul id=\"listOfMessages\"&gt;\n        &lt;li class=\"singleMessage\" *ngFor=\"let message of messageList\"&gt;\n            {{message}}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;form (ngSubmit)=\"onSubmit()\" action=\"\"&gt; \n        &lt;div class=\"form-group mb-3 fixed-bottom\"&gt;\n            &lt;input  class=\"form-control input\" type=\"text\" autocomplete=\"off\" required \n            [(ngModel)]=\"model.msg\" name=\"msg\"\n            /&gt;\n            &lt;button type=\"submit\" class=\"btn btn-outline-secondary button-css\" &gt;Send Message&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What are we doing here. We have created a div and creating a ul list for our messages</p>\n\n<p>We are using *ngFor to iterate the messages from out messageList array and show them as li on our webpage</p>\n\n<p>then we are creating a form and on ngSubmit, we are calling the ngsubmit() function in our app.component.ts file</p>\n\n<p>On out input method we have added ngModel to send our messages to the message. ts file</p>\n\n<p>Now, let us go to the chat-app.component.css file and add some CSS to beatify our code</p>\n\n<p>paste the below code to beautify the chat app<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>container {padding: 200px !important; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; }\n#listOfMessages { list-style-type: none; margin: 0; padding: 0; }\nli:nth-child { padding: 0.5rem 1rem; }\nli:nth-child(odd) { background: #efefef; }\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"running-the-application\" href=\"#running-the-application\">\n  </a>\n  Running the Application\n</h2>\n\n<p>Now we have built the application and we need to start the application. paste the selector code from the app.componenet.ts file to the app.ts file where you want the chat to appear</p>\n\n<p>We have built the chat as a separate component so that it easily integrates into a existing app if you want to integrate as such</p>\n\n<p>In the app.component.html create a h1 tag and type Angular app and paste the selector coed below it</p>\n\n<p>It should look something like this :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;div class=\"container\"&gt;\n    &lt;h1&gt;Angular App&lt;/h1&gt;\n\n    &lt;app-chat-app&gt;&lt;/app-chat-app&gt;\n&lt;/div&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now you can see the chat is running.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wtBEreMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwu6g9m5mlpzw79jfn4r.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wtBEreMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwu6g9m5mlpzw79jfn4r.png\" alt=\"final app\" loading=\"lazy\" width=\"880\" height=\"462\"></a></p>\n\n<h2>\n  <a name=\"bonus\" href=\"#bonus\">\n  </a>\n  Bonus\n</h2>\n\n<h2>\n  <a name=\"building-11-chat\" href=\"#building-11-chat\">\n  </a>\n  Building 1-1 Chat\n</h2>\n\n<p>It is quite easy to build 1-1 chat. The above chat that we created is a group chat application.</p>\n\n<p>Where we are broadcasting the message to allt he users event to the person who sent the message</p>\n\n<p>but in the 1-1 chat application we do not want to send the message to the person who is sending the message</p>\n\n<p>Go to our nodejs application and go to the index.js page there go to this code<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>io.on('connection', (socket)=&gt;{\n    console.log('a user connected');\n    socket.on('message',(msg)=&gt;{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n\n    socket.on('disconnect',()=&gt;{\n    console.log('user disconnected')\n    })\n})\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>and change the io.emit to socket.broadcast.emit</p>\n\n<p>this will broadcast the message to everyone except the sender of the message.</p>\n\n<p>thus you have built the 1-1 messaging app</p>\n\n<p>this looks something like this</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wnmALKa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f714d4tt2qlc52i46w6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wnmALKa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f714d4tt2qlc52i46w6.png\" alt=\"1-1 chat\" loading=\"lazy\" width=\"880\" height=\"641\"></a></p>\n\n<p>You can use some CSS to improve the app.</p>\n\n<h2>\n  <a name=\"deadsimplechat\" href=\"#deadsimplechat\">\n  </a>\n  DeadSimpleChat\n</h2>\n\n<blockquote>\n<p>This article is brought to you by DeadSimpleChat. Integrate chat into your application with a single line of code. DeadSimpleChat is an easy to use chat with features like</p>\n</blockquote>\n\n<h2>\n  <a name=\"code-on-github\" href=\"#code-on-github\">\n  </a>\n  Code on GitHub\n</h2>\n\n<p>The code for this application is on GitHub</p>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>In this article we explained how to build a chat application using Angular, NodeJs and socketio.</p>\n\n<p>An easier way to add chat to your angular application is by using DeadSImpleCHat</p>\n\n<p>Add chat just by pasting a single line of code. If you want to learn more about how to add chat to your angular application using DeadSimpleChat refer to this article</p>\n\n<p>This article was originally published on DeadSimpleChat Plan <a href=\"https://deadsimplechat.com/blog/angular-chat-application-with-socket-io-and-node-js/\">Angular Chat Application with Socket.io and Node Js</a></p>\n\n","body_markdown":"In this article we will building an angular chat application with Socket.io and Node Js\n\nWe will be building a basic chat application using Node Js and Socket.io in the back-end and Angular in the front end.\n\nThe code for this app is free and open-source and can be downloaded from Github. Link at the bottom of the article.\n\n> \nNew to DeadSimpleChat? It's a turn key chat that you can easily add to your website or App â€”without any complicated code. For Virtual / Live events, SaaS App, Social Platform, Education, Gaming, Finance  [Sign Up for Free](https://deadsimplechat.com/getstarted)\n\n## Prerequisites and Application Stack\n\nWe will be using the following technologies\n\n1. Angular\n2. Socket.io\n3. Node Js\n4. HTML\n5. CSS\n\nThat's it. Now let us look at the how the finished application will look like\n\n## How the Application will look like\n\n\n![Finished Application](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpwh9n1yjcet909av357.png)\n\n## Building the Backend\n\nLet's start building the backend first.\n\nWe will be creating a 2 new projects with Node Js one for socket.io and another for angular\n\nWe need the Node Js installed. Now create a new folder with the name\n\n```\nmkdir nodejs-socket-server\ncd nodejs-socket-server\n```\nnow type npm init to initilize the project and press enter to the questions asked.\n\n\n![npm init](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgfzak2f2gsbwvsi78iq.png)\n\nThis will generate a package.json file. Let us now install express js server. In the terminal type\n\n```\nnpm install express --save\n```\nOpen the index.js file and type the following code:\n\n```\nconst express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\n\napp.get('/', (req, res) => {\n  res.send('<h1>Hello world</h1>');\n});\n\nserver.listen(3000, () => {\n  console.log('listening on *:3000');\n});\n```\nYour `package.json` should look something like this:\n\n```\n{\n  \"name\": \"nodejs-socket-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"nodejs-socket-server\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"DeadSimpleChat-team\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.1\"\n  }\n}\n```\nnow type the command\n\n```\nnode index.js\n```\nThis will start the server and when you go to http://localhost:3000/ you will see the webpage\n\n\n![hello world](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frtig4f4oqxn07p9fvth.png)\n\nNow we have successfully started the Node Js server and rendered hello world with it.\n\nNow let us install socket.io. Now we have successfully started the Node Js server and rendered hello world with it.\n\nNow let us install socket.io. type\n\n```\nnpm install socket.io --save\n```\nto install socket.io. Your package.json should look something like:\n\n```\n{\n  \"name\": \"nodejs-socket-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"nodejs-socket-server\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"DeadSimpleChat-team\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.1\",\n    \"socket.io\": \"^4.5.1\"\n  }\n}\n```\nNow, update your index.js code with the following\n```\nconst express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\nconst { Server } = require(\"socket.io\");\nconst io = new Server(server);\n\napp.get('/', (req, res) => {\n  res.send(\"Hello World\");\n});\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n});\n\nserver.listen(3000, () => {\n  console.log('listening on *:3000');\n});\n```\nWhat are we doing here:\n\nThe socket.io is comprised of two parts\n\n1. Server side: Socket.io integrates with NodeJS server\n2. Client Side: Client library that integrates into our Angular App\n\nWe are initializing a new instance of socket.io and we are passing it the HTTP server object.\n\nThen we are listening on the connection event for incoming sockets and logging it to the console.\n\nUsing this process is going to give us CORS error when we send request through the Angular app. We can easily fix that by adding the code below.\n\nEdit the\n```\nconst io = new Server(server)\n```\nto\n```\nconst io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n```\nThe socket.io also fires a disconnect event and we can listen to that with the code below:\n\n```\nio.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('disconnect', () => {\n    console.log('user disconnected');\n  });\n});\n```\n## Emitting events\n\nWith socket.io you can send and receive events and data that you want.\n\nLet us make it so that when the server receives the data with an event called as the message it emits to everyone connected to the chat including the person who sent the message.\n\nTo make this possible edit the above code to look like this:\n\n```\nio.on('connection', (socket)=>{\n    console.log('a user connected');\n    socket.on('message',(msg)=>{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n    \n    socket.on('disconnect',()=>{\n    console.log('user disconnected')\n    })\n})\n```\n## Server built\nThe finished code looks like this:\n\n```\nconst express = require('express');\nconst app = express();\nconst http = require('http');\nconst { disconnect } = require('process');\nconst server = http.createServer(app);\nconst {Server} = require(\"socket.io\");\n\n\nconst io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n\napp.get('/', (req, res) => {\n  console.log(\"hello world\")  \n  res.send(\"hello world\")\n  });\n\n\nio.on('connection', (socket)=>{\n    console.log('a user connected');\n    socket.on('message',(msg)=>{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n    \n    socket.on('disconnect',()=>{\n    console.log('user disconnected')\n    })\n})\n\nserver.listen(3000, () => {\n  console.log('listening on *:3000');\n});\n```\nThe complete code for the app can be found on Github.\n\n## Building the Angular App\n\nNow let us create an angular application from scratch. To create an angular application you need to have angular and NodeJs installed\n\n```\nnpm install -g @angular/cli\n```\nType the above command to install angular cli. Then create a new app and name it angular-chat-application like this\n\n```\nng new angular-chat-application\n```\nIt will ask you a few questions\n\n1. Would you like to add Angular routing: Select No, we don't need that for this tutorial\n2. Which stylesheet format would you like to use: Select CSS\n\nThis will install the app. now cd into the application and the app would look some thing like this:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkqgcekf1d772zi9s3l6.png)\n\nstart the application by running the below command\n```\ncd angular-chat-application\nng serve --open\n```\nNow go to the localhost:4200 where our angular app is running and you can see the landing page\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/verepqmnyycx1o4y1j3o.png)\nopen the code in your text editor. We are using VS Code but you can use whatever text editor you prefer\n\nHere go to\n```\nsrc -> app -> app.component.html\n```\nthere delete all the code that you see there and save you can see the blank page in your angular application.\n\nNow create a file called chat-message.ts and write the below code there\n\n```\nexport class ChatMessage {\n\n    constructor( \n   public msg: string\n    ) {  }\n  \n  }\n```\nIn this class we have a property msg. Here we can create multiple properties that can signify the ChatMessage Object like id, timestamp and other properties which we might be interested in.\n\nFor this tutorial however we would like to keep it simple and just have one msg property that will be signify the chat message.\n\nNow create a new folder inside the app folder and name it chat-app\n\nHere create 3 files\n\n```\nchat-app.component.html\nchat-app.component.css\nchat-app.component.ts\n```\n\nIn the\n```\nchat-app.component.ts\n```\npaste the following code:\n```\nimport { Component } from '@angular/core';\nimport { ChatMessage } from '../chat-message';\n\n@Component({\n  selector: 'app-chat-app',\n  templateUrl: './chat-app.component.html',\n  styleUrls: ['./chat-app.component.css']\n})\n\nexport class ChatAppComponent {\n\n  model = new ChatMessage(\"\");\n  \n  messageList: string[] = [];\n\n  sendMessage(): void {\n  };\n\nngOnInit(): void {\n\n}\n\n  submitted = false;\n\n  onSubmit() { \n\n}\n```\n\nWhat are we doing here.\n\nWe have imported the component from the angular core\n\nWe have imported the ChatMessage Object that we created\n\nthen\n\nwe have initialized the model with a new ChatMessage\n\ncreated a messageList array for the messages that we are going to receive. In the real app we can store the messages in a database as well. But that is out of scope of this article.\n\nthen we have created a sendMessage function which we will use to send messages to all the users\n\nNow, we need a messages.service that we will use to send and receive messages to the Node Js Socket io server.\n\n## Creating a Service to send and receive messages\n\nGo to your terminal and type the code:\n\n```\nng generate service messages\n```\nThis code will generate the message service then paste the below code to the message.service.ts file\n\n```\nimport { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable, Observer} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n\n  constructor(private socket: Socket) { }\n\n  sendMessage(msg:string){\n    console.log(msg)\n    this.socket.emit('message', msg);\n  }\n\n\n  getMessage(){\n  return  new Observable((observer: Observer<any>)=>{\n      this.socket.on('message', (message:string)=>{\n        observer.next(message)\n      })\n    })\n  }\n\n}\n```\n\nHere we are adding the Observable and Observer from the rxjs library and we have the sendMessage() function that is emitting the message event that we are listening to in our server with the msg data that is our chat message that we want to broadcast.\n\nOur getMessage() function listens to the message.\n\nOne more thing we need to do is add the socket.io angular library to our angular application for front-end socket integration.\n\nopen the file app.module.ts and on the terminal type the following command:\n\n```\nnpm install ngx-socket-io --save\n```\nThis will install the front-end socket io library that we need.\n\nIn the module.ts we also need to add the socket.io module and we also need to add the ChatAppComponent from the chat-app folder that we created.\n\nWe also need to point the socket.io to the socket.io server. since by default it point to the angular server we will need to change that\n```\nconst config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n```\nWe will also need to add BrowserModule and Forms Module for when we create the HTML for this app\n\nHere is the final `app.module.ts` code.\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\nimport { CommonModule } from '@angular/common';\nimport { ChatAppComponent } from './chat-app/chat-app.component';\n\nconst config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ChatAppComponent\n  ],\n  imports: [\n    BrowserModule,\n    SocketIoModule.forRoot(config),\n    FormsModule,\n    CommonModule,\n    \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nLet us update the chat-app.component.ts file to use the message service to get and receive the data from the server\n\ngo to chat-app.component.ts file and edit the code to make it look like:\n\n```\nimport { Component } from '@angular/core';\nimport { MessagesService } from '../messages.service';\nimport { ChatMessage } from '../chat-message';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-chat-app',\n  templateUrl: './chat-app.component.html',\n  styleUrls: ['./chat-app.component.css']\n})\nexport class ChatAppComponent {\n\n  constructor(private messageService: MessagesService) {}\n\n  model = new ChatMessage(\"\");\n  \n  messageList: string[] = [];\n\n  sendMessage(): void {\n    console.log(this.model.msg)\n    this.messageService.sendMessage(this.model.msg)\n    this.model.msg = \"\";\n  };\n\nngOnInit(): void {\n  this.messageService.getMessage().subscribe((message:string)=> {\n    this.messageList.push(message);\n  })\n}\n\n  submitted = false;\n\n  onSubmit() { \n    this.sendMessage()\n    this.submitted = true;\n    \n   }\n}\n```\nWhat are we doing here\n\nWe have updated the sendMessage() function to use the messageService to send a message and we are calling the sendMessage() function when the HTML form is submitted\n\nWe will be building the html form shortly\n\nand on ngInit() we are listning to the messageService for any messages that are coming from the server and we are pushing the messages that have come from the server to the messageList array.\n\nIn the production application we can also push these messages to a database.\n\nNow, let us develop the front-end of our application\n\nFirst go to the style.css and paste the below code:\n```\n@import url('https://unpkg.com/bootstrap@5.2.0/dist/css/bootstrap.min.css');\n```\nhere we a adding bootstrap a front-end css library to beautify our html\n\nNow,\n\ngo to chat-app.component.html and paste the below code:\n\n```\n<div class=\"form-group container\">\n    <ul id=\"listOfMessages\">\n        <li class=\"singleMessage\" *ngFor=\"let message of messageList\">\n            {{message}}\n        </li>\n    </ul>\n\n    <form (ngSubmit)=\"onSubmit()\" action=\"\"> \n        <div class=\"form-group mb-3 fixed-bottom\">\n            <input  class=\"form-control input\" type=\"text\" autocomplete=\"off\" required \n            [(ngModel)]=\"model.msg\" name=\"msg\"\n            />\n            <button type=\"submit\" class=\"btn btn-outline-secondary button-css\" >Send Message</button>\n        </div>\n    </form>\n</div>\n```\nWhat are we doing here. We have created a div and creating a ul list for our messages\n\nWe are using *ngFor to iterate the messages from out messageList array and show them as li on our webpage\n\nthen we are creating a form and on ngSubmit, we are calling the ngsubmit() function in our app.component.ts file\n\nOn out input method we have added ngModel to send our messages to the message. ts file\n\nNow, let us go to the chat-app.component.css file and add some CSS to beatify our code\n\npaste the below code to beautify the chat app\n\n```\ncontainer {padding: 200px !important; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; }\n#listOfMessages { list-style-type: none; margin: 0; padding: 0; }\nli:nth-child { padding: 0.5rem 1rem; }\nli:nth-child(odd) { background: #efefef; }\n```\n## Running the Application\n\nNow we have built the application and we need to start the application. paste the selector code from the app.componenet.ts file to the app.ts file where you want the chat to appear\n\nWe have built the chat as a separate component so that it easily integrates into a existing app if you want to integrate as such\n\nIn the app.component.html create a h1 tag and type Angular app and paste the selector coed below it\n\nIt should look something like this :\n\n```\n<div class=\"container\">\n    <h1>Angular App</h1>\n\n    <app-chat-app></app-chat-app>\n</div>\n```\nNow you can see the chat is running.\n\n\n![final app](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwu6g9m5mlpzw79jfn4r.png)\n\n## Bonus\n## Building 1-1 Chat\n\nIt is quite easy to build 1-1 chat. The above chat that we created is a group chat application.\n\nWhere we are broadcasting the message to allt he users event to the person who sent the message\n\nbut in the 1-1 chat application we do not want to send the message to the person who is sending the message\n\nGo to our nodejs application and go to the index.js page there go to this code\n\n```\nio.on('connection', (socket)=>{\n    console.log('a user connected');\n    socket.on('message',(msg)=>{\n        console.log('message : ' + msg);\n        io.emit('message', msg);\n    })\n\n    \n    socket.on('disconnect',()=>{\n    console.log('user disconnected')\n    })\n})\n```\nand change the io.emit to socket.broadcast.emit\n\nthis will broadcast the message to everyone except the sender of the message.\n\nthus you have built the 1-1 messaging app\n\nthis looks something like this\n\n\n![1-1 chat](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f714d4tt2qlc52i46w6.png)\n\nYou can use some CSS to improve the app.\n\n## DeadSimpleChat\n\n> \nThis article is brought to you by DeadSimpleChat. Integrate chat into your application with a single line of code. DeadSimpleChat is an easy to use chat with features like\n\n## Code on GitHub\nThe code for this application is on GitHub\n\n## Conclusion\n\nIn this article we explained how to build a chat application using Angular, NodeJs and socketio.\n\nAn easier way to add chat to your angular application is by using DeadSImpleCHat\n\nAdd chat just by pasting a single line of code. If you want to learn more about how to add chat to your angular application using DeadSimpleChat refer to this article\n\nThis article was originally published on DeadSimpleChat Plan [Angular Chat Application with Socket.io and Node Js](https://deadsimplechat.com/blog/angular-chat-application-with-socket-io-and-node-js/)\n \n\n","user":{"name":"alakkadshaw","username":"alakkadshaw","twitter_username":null,"github_username":"alakkadshaw","user_id":815127,"website_url":"https://metered.ca","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--IVBurB-e--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/815127/09334486-33b8-4a55-a079-7204e7692d78.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--1dsDmw-2--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/815127/09334486-33b8-4a55-a079-7204e7692d78.png"}}