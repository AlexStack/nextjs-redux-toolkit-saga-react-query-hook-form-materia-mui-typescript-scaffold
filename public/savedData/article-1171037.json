{"type_of":"article","id":1171037,"title":"To VPC or not to VPC...","description":"If you are building on AWS you've probably run into the situation where you have a Lambda that needs...","readable_publish_date":"Nov 3","slug":"to-vpc-or-not-to-vpc-19cc","path":"/peetss/to-vpc-or-not-to-vpc-19cc","url":"https://dev.to/peetss/to-vpc-or-not-to-vpc-19cc","comments_count":0,"public_reactions_count":0,"collection_id":null,"published_timestamp":"2022-11-03T00:22:34Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1171037.png","canonical_url":"https://dev.to/peetss/to-vpc-or-not-to-vpc-19cc","created_at":"2022-08-19T04:30:49Z","edited_at":null,"crossposted_at":null,"published_at":"2022-11-03T00:22:34Z","last_comment_at":"2022-11-03T00:22:34Z","reading_time_minutes":3,"tag_list":"serverless, aws, database, programming","tags":["serverless","aws","database","programming"],"body_html":"<p>If you are building on AWS you've probably run into the situation where you have a Lambda that needs to talk to a database.  Easy right... well, it actually requires some non-trivial knowledge of concepts like VPCs, subnets, and security groups.  Probably more than what you initially bargained for.</p>\n\n<p>Of course, you probably made it through this (there are a plethora of tutorials solving this exact thing) and also realized the importance of restricting access to your database by placing it within the confines of a VPC.</p>\n\n<p>Then your use case changed and now you need to make a network request from a public source to your Lambda.  Problem is, the Lambda is inside a VPC which is not accessible to the public internet.</p>\n\n<p>After days spent scouring the internet for solutions to this problem, here is what I found.</p>\n\n<ol>\n<li><p>Get rid of the VPC, who needs 'em anyway? Seriously though... don't do this.  The most valuable asset to any application is its data.  If you make your database public by taking it out of the VPC, the only thing separating your data from a hacker is an alphanumeric username and password combination.  Sure, you could have a <strong>strong</strong> password but you have to really be comfortable with that risk.  Most people aren't.</p></li>\n<li><p>Even better, just use a NAT gateway.  A NAT gateway allows a Lambda in a VPC to be assigned a publicly addressable IP address.  Once you make it past the finicky nature of setting up this configuration, it works really well.  The Lambda is publicly accessible, can query the database and return a response to the user, just like you drew it up.  One caveat though, there is no free tier.  To this point, you're likely still paying 0$ for your database and Lambda.  However, the NAT gateway is going to cost you a whopping $30 monthly.  That is steep, especially if you are trying to build out a serverless stack on the cheap.  For me, it just wasn't worth it - there had to be a better way.</p></li>\n</ol>\n\n<p>This is where it got difficult.  There didn't <em>seem</em> to be another way.  It looked fairly certain that I would either have to sacrifice security or pay a prohibitive cost.  However, I dug to the deepest depths of the internet (Stackoverflow) and eventually the heavens opened up revealing a closely guarded secret, <a href=\"https://stackoverflow.com/a/41559669\">https://stackoverflow.com/a/41559669</a>, which led me to the following,</p>\n\n<p>Use a public Lambda to call the private Lambda.  That sounds so obvious in hindsight.  But wait, I thought the VPC Lambda wasn't publicly accessible.  That certainly is true, but apparently the <code>Invoke</code> API does not adhere to such mortal rules.  Now, you can have your cake and eat it too.  We retain the security of having the database in the VPC, while also keeping costs at zero.  The only downside is you will have to manage several Lambdas which does add some operational overhead.  It also slightly complicates the debugging process, as each Lambda has its own logging group and figuring out which one is behaving poorly can be a tad tedious.</p>\n\n<p>Anyways, hope this was education and/or helps someone who finds themself in a similar situation.  Curious to see what else the community has to say about VPC, Lambdas, and the like.</p>\n\n<p>Thanks for reading!</p>\n\n","body_markdown":"If you are building on AWS you've probably run into the situation where you have a Lambda that needs to talk to a database.  Easy right... well, it actually requires some non-trivial knowledge of concepts like VPCs, subnets, and security groups.  Probably more than what you initially bargained for.\n\nOf course, you probably made it through this (there are a plethora of tutorials solving this exact thing) and also realized the importance of restricting access to your database by placing it within the confines of a VPC.\n\nThen your use case changed and now you need to make a network request from a public source to your Lambda.  Problem is, the Lambda is inside a VPC which is not accessible to the public internet.\n\nAfter days spent scouring the internet for solutions to this problem, here is what I found.\n\n1. Get rid of the VPC, who needs 'em anyway? Seriously though... don't do this.  The most valuable asset to any application is its data.  If you make your database public by taking it out of the VPC, the only thing separating your data from a hacker is an alphanumeric username and password combination.  Sure, you could have a **strong** password but you have to really be comfortable with that risk.  Most people aren't.\n\n2. Even better, just use a NAT gateway.  A NAT gateway allows a Lambda in a VPC to be assigned a publicly addressable IP address.  Once you make it past the finicky nature of setting up this configuration, it works really well.  The Lambda is publicly accessible, can query the database and return a response to the user, just like you drew it up.  One caveat though, there is no free tier.  To this point, you're likely still paying 0$ for your database and Lambda.  However, the NAT gateway is going to cost you a whopping $30 monthly.  That is steep, especially if you are trying to build out a serverless stack on the cheap.  For me, it just wasn't worth it - there had to be a better way.\n\nThis is where it got difficult.  There didn't _seem_ to be another way.  It looked fairly certain that I would either have to sacrifice security or pay a prohibitive cost.  However, I dug to the deepest depths of the internet (Stackoverflow) and eventually the heavens opened up revealing a closely guarded secret, https://stackoverflow.com/a/41559669, which led me to the following,\n\nUse a public Lambda to call the private Lambda.  That sounds so obvious in hindsight.  But wait, I thought the VPC Lambda wasn't publicly accessible.  That certainly is true, but apparently the `Invoke` API does not adhere to such mortal rules.  Now, you can have your cake and eat it too.  We retain the security of having the database in the VPC, while also keeping costs at zero.  The only downside is you will have to manage several Lambdas which does add some operational overhead.  It also slightly complicates the debugging process, as each Lambda has its own logging group and figuring out which one is behaving poorly can be a tad tedious.\n\nAnyways, hope this was education and/or helps someone who finds themself in a similar situation.  Curious to see what else the community has to say about VPC, Lambdas, and the like.\n\nThanks for reading!","user":{"name":"peetss","username":"peetss","twitter_username":"peetss","github_username":"peetss","user_id":571820,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--9PmvsU1A--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571820/3d324c7b-9069-4ecd-8779-31872450cc59.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--4ht8bx3c--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571820/3d324c7b-9069-4ecd-8779-31872450cc59.jpeg"}}