{"type_of":"article","id":1242532,"title":"Frontline: Running Something","description":"Hello everyone! You have probably noticed by now that I am not a consistent writer. It is finally...","readable_publish_date":"Nov 5","slug":"frontline-running-something-mie","path":"/hossomi/frontline-running-something-mie","url":"https://dev.to/hossomi/frontline-running-something-mie","comments_count":0,"public_reactions_count":0,"collection_id":16756,"published_timestamp":"2022-11-05T21:01:25Z","positive_reactions_count":0,"cover_image":null,"social_image":"https://dev.to/social_previews/article/1242532.png","canonical_url":"https://dev.to/hossomi/frontline-running-something-mie","created_at":"2022-11-04T01:36:50Z","edited_at":"2022-11-05T21:06:12Z","crossposted_at":null,"published_at":"2022-11-05T21:01:25Z","last_comment_at":"2022-11-05T21:01:25Z","reading_time_minutes":4,"tag_list":"frontend, typescript, react","tags":["frontend","typescript","react"],"body_html":"<p>Hello everyone! You have probably noticed by now that I am not a consistent writer. It is finally time to run and see something!</p>\n\n<p>Today we will implement the most basic of all: a CRA client talking to an HTTP server to display something.</p>\n\n<p><strong>In this article</strong> | <a href=\"https://github.com/hossomi/tamiyo\">Repository</a> | <a href=\"https://github.com/hossomi/tamiyo/compare/833dcd9...c8cf63f\">Changes</a> | <a href=\"https://github.com/hossomi/tamiyo/tree/c8cf63fa3793d3e472db97cad28ab12160f26666\">Final commit</a></p>\n\n<h2>\n  <a name=\"server\" href=\"#server\">\n  </a>\n  Server\n</h2>\n\n<p>The server is the simplest piece: an <a href=\"https://expressjs.com/\">Express</a> HTTP server that returns <code>Hello world</code> on GET. We start by installing Express in the server workspace:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>yarn workspace @tamiyo/server add express\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then we write the server in <code>index.ts</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/api</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello world</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Listening at port 8000</span><span class=\"dl\">\"</span><span class=\"p\">))</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The basics of Express is really simple and intuitive, so I probably don't need to explain the code above. To run, we can build and manually run the built script:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>yarn tsc <span class=\"nt\">--build</span>\nyarn workspace @tamiyo/server node build/index.js\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The first command will transpile Typescript into Javascript as we discussed in the last article. The second will run the transpiled Javascript file using Yarn's module resolution, required since we use workspaces.</p>\n\n<p>We can test our server with <code>curl</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>curl http://localhost:8000/api\nHello world\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"client\" href=\"#client\">\n  </a>\n  Client\n</h2>\n\n<p>The client is a basic <a href=\"https://create-react-app.dev/\">CRA</a> application that we will modify to get a message to display from our server. </p>\n\n<blockquote>\n<p>⚠️ First of all, we will disable Yarn's Plug'n'Play (PNP) resolution:</p>\n\n\n<pre class=\"highlight shell\"><code>yarn <span class=\"nb\">set </span>config nodeLinker node\nyarn <span class=\"nb\">install</span>\n</code></pre>\n\n\n<p>Although there are sources on the internet saying that it should, I could not make Workspaces + PNP + CRA work properly. I decided to not spend more time on that and focus on actual development.</p>\n</blockquote>\n\n<p>We will replace our current client with code generated with CRA:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">rm</span> <span class=\"nt\">-r</span> client\nyarn create react-app client <span class=\"nt\">--template</span> typescript\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Our old client had some important configuration discussed in the last article. In <code>package.json</code>, the name was changed and <code>type</code> was removed. Put them back:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">{</span>\n  <span class=\"s2\">\"</span><span class=\"s\">name\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">@tamiyo/client\"</span><span class=\"pi\">,</span> <span class=\"c1\"># &lt;-- Change back</span>\n  <span class=\"s2\">\"</span><span class=\"s\">version\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0.1.0\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">private\"</span><span class=\"pi\">:</span> <span class=\"nv\">true</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">type\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">module\"</span><span class=\"pi\">,</span> <span class=\"c1\"># &lt;-- Put back</span>\n  <span class=\"pi\">[</span><span class=\"nv\">...</span><span class=\"pi\">]</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In <code>tsconfig.json</code>, we extracted most of the properties to <code>tsconfig.common.json</code>. So we can revert it, keeping only the few additional properties:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">{</span>\n  <span class=\"s2\">\"</span><span class=\"s\">extends\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">../tsconfig.common.json\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">compilerOptions\"</span><span class=\"pi\">:</span> <span class=\"pi\">{</span>\n    <span class=\"s2\">\"</span><span class=\"s\">rootDir\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">src\"</span><span class=\"pi\">,</span>\n    <span class=\"s2\">\"</span><span class=\"s\">outDir\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">build\"</span><span class=\"pi\">,</span>\n    <span class=\"c1\"># Additional properties:</span>\n    <span class=\"s2\">\"</span><span class=\"s\">lib\"</span><span class=\"pi\">:</span> <span class=\"pi\">[</span>\n      <span class=\"s2\">\"</span><span class=\"s\">dom\"</span><span class=\"pi\">,</span>\n      <span class=\"s2\">\"</span><span class=\"s\">dom.iterable\"</span><span class=\"pi\">,</span>\n      <span class=\"s2\">\"</span><span class=\"s\">esnext\"</span>\n    <span class=\"pi\">],</span>\n    <span class=\"s2\">\"</span><span class=\"s\">noEmit\"</span><span class=\"pi\">:</span> <span class=\"nv\">true</span><span class=\"pi\">,</span>\n    <span class=\"s2\">\"</span><span class=\"s\">jsx\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">react-jsx\"</span>\n  <span class=\"pi\">}</span>\n<span class=\"pi\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With that, you should be able to run the template and run it in your browser (CRA will open itself) by running the <code>start</code> script with Yarn:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>yarn workspace @tamiyo/client start\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"integrating\" href=\"#integrating\">\n  </a>\n  Integrating\n</h2>\n\n<p>The last step for today is modifying our client to make a request to our server and display the response on screen. This request should be made by the <code>App</code> component:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">setText</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Loading...</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/api</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">())</span>\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">setText</span><span class=\"p\">)</span>\n  <span class=\"p\">},</span> <span class=\"p\">[])</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">App</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n      <span class=\"c1\">// [...]</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span>\n        <span class=\"p\">{</span><span class=\"nx\">text</span><span class=\"p\">}</span>\n      <span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;\n</span>      <span class=\"c1\">// [...]</span>\n    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This should be easy if you already know React hooks. Here is a quick explanation anyway:</p>\n\n<ol>\n<li>We use <a href=\"https://beta.reactjs.org/apis/react/useState\"><code>useState</code></a> to define a state variable <code>text</code> with initial value <code>Loading...</code>. <code>setText</code> should be used to update its value.</li>\n<li>We use <a href=\"https://beta.reactjs.org/apis/react/useEffect\"><code>useEffect</code></a> with an empty array in the second argument to run an effect only once when the component is mounted.</li>\n<li>This effect makes the request using <code>fetch</code>, parses the response as text using and store it in the <code>text</code> state variable, triggering a component re-render since the state changed.</li>\n<li>The actual component renders <code>text</code> on screen, which will now be <code>Hello world</code>.</li>\n</ol>\n\n<p>However, if you start the server and open the client, you will see this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6FrrPJZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si4uspxp99l3xwmdxooq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6FrrPJZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si4uspxp99l3xwmdxooq.png\" alt=\"Client without proxying displays an HTML instead of the server message\" loading=\"lazy\" width=\"880\" height=\"418\"></a></p>\n\n<p>This happens because the client is actually making the request to the CRA development server that is serving the client pages, and not our server! In production these two servers would be the same, but we are not there yet.</p>\n\n<p>CRA provides a solution for this in development: <a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">proxying</a>. We can easily enable this in <code>client/package.json</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">{</span>\n  <span class=\"s2\">\"</span><span class=\"s\">name\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">@tamiyo/client\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">version\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0.1.0\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">private\"</span><span class=\"pi\">:</span> <span class=\"nv\">true</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">type\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">module\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">proxy\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">http://localhost:8000\"</span><span class=\"pi\">,</span> <span class=\"c1\"># &lt;-- Proxy to here</span>\n  <span class=\"c1\"># [...]</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>With this, the CRA development server will proxy unknown requests (i.e. that are not requesting a client page) to our server that is running on port 8000. Restarting the client and trying again, you should finally see this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--l0tjMdu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvjz4hjd3zhghsv7fzfq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--l0tjMdu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvjz4hjd3zhghsv7fzfq.png\" alt=\"Client with proxying displays the server message\" loading=\"lazy\" width=\"880\" height=\"418\"></a></p>\n\n<h2>\n  <a name=\"quality-of-life\" href=\"#quality-of-life\">\n  </a>\n  Quality of life\n</h2>\n\n<p>Today, we had to run some quite verbose commands to start our client and server. To make our lives easier, we can put them in Yarn scripts in the parent <code>package.json</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">{</span>\n  <span class=\"s2\">\"</span><span class=\"s\">name\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">tamiyo\"</span><span class=\"pi\">,</span>\n  <span class=\"s2\">\"</span><span class=\"s\">version\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">1.0.0\"</span><span class=\"pi\">,</span>\n  <span class=\"c1\"># [...]</span>\n  <span class=\"s2\">\"</span><span class=\"s\">scripts\"</span><span class=\"pi\">:</span> <span class=\"pi\">{</span>\n    <span class=\"s2\">\"</span><span class=\"s\">build\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">yarn</span><span class=\"nv\"> </span><span class=\"s\">tsc</span><span class=\"nv\"> </span><span class=\"s\">--build</span><span class=\"nv\"> </span><span class=\"s\">--verbose\"</span><span class=\"pi\">,</span>\n    <span class=\"s2\">\"</span><span class=\"s\">clean\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">yarn</span><span class=\"nv\"> </span><span class=\"s\">tsc</span><span class=\"nv\"> </span><span class=\"s\">--build</span><span class=\"nv\"> </span><span class=\"s\">--clean\"</span><span class=\"pi\">,</span>\n    <span class=\"s2\">\"</span><span class=\"s\">start:server\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">yarn</span><span class=\"nv\"> </span><span class=\"s\">workspace</span><span class=\"nv\"> </span><span class=\"s\">@tamiyo/server</span><span class=\"nv\"> </span><span class=\"s\">start\"</span><span class=\"pi\">,</span>\n    <span class=\"s2\">\"</span><span class=\"s\">start:client\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">yarn</span><span class=\"nv\"> </span><span class=\"s\">workspace</span><span class=\"nv\"> </span><span class=\"s\">@tamiyo/client</span><span class=\"nv\"> </span><span class=\"s\">start\"</span>\n  <span class=\"pi\">},</span>\n  <span class=\"c1\"># [...]</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We also need to define a <code>start</code> script in <code>server/package.json</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">{</span>\n  <span class=\"s2\">\"</span><span class=\"s\">name\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">@tamiyo/server\"</span><span class=\"pi\">,</span>\n  <span class=\"c1\"># [...]</span>\n  <span class=\"s2\">\"</span><span class=\"s\">scripts\"</span><span class=\"pi\">:</span> <span class=\"pi\">{</span>\n    <span class=\"s2\">\"</span><span class=\"s\">start\"</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">yarn</span><span class=\"nv\"> </span><span class=\"s\">node</span><span class=\"nv\"> </span><span class=\"s\">build/index.js\"</span>\n  <span class=\"pi\">},</span>\n  <span class=\"c1\"># [...]</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We can now run <code>yarn build</code> to transpile Typescript, <code>yarn start:server</code> to start the server and <code>yarn start:client</code> to start the client, much shorter commands! CRA even has hot reload in development mode, so changing client code while it is running will automatically update in the browser. I will investigate how to do the same for the server.</p>\n\n<h2>\n  <a name=\"next-step\" href=\"#next-step\">\n  </a>\n  Next step\n</h2>\n\n<p>We have a basic client-server application running, but we are using plain HTTP. In the next step, I will get started on GraphQL. It is a new world to me, so I am not sure an entire article will be needed. If it turns out simpler than I expect, I can also explore MTG JSON data sets.</p>\n\n","body_markdown":"Hello everyone! You have probably noticed by now that I am not a consistent writer. It is finally time to run and see something!\n\nToday we will implement the most basic of all: a CRA client talking to an HTTP server to display something.\n\n**In this article** | [Repository](https://github.com/hossomi/tamiyo) | [Changes](https://github.com/hossomi/tamiyo/compare/833dcd9...c8cf63f) | [Final commit](https://github.com/hossomi/tamiyo/tree/c8cf63fa3793d3e472db97cad28ab12160f26666)\n\n## Server\n\nThe server is the simplest piece: an [Express](https://expressjs.com/) HTTP server that returns `Hello world` on GET. We start by installing Express in the server workspace:\n\n```bash\nyarn workspace @tamiyo/server add express\n```\n\nThen we write the server in `index.ts`:\n\n```typescript\nimport express from 'express'\n\nconst app = express()\n\napp.get('/api', (req, res) => {\n    res.send(\"Hello world\")\n})\n\napp.listen(8000, () => console.log(\"Listening at port 8000\"))\n```\n\nThe basics of Express is really simple and intuitive, so I probably don't need to explain the code above. To run, we can build and manually run the built script:\n\n```bash\nyarn tsc --build\nyarn workspace @tamiyo/server node build/index.js\n```\n\nThe first command will transpile Typescript into Javascript as we discussed in the last article. The second will run the transpiled Javascript file using Yarn's module resolution, required since we use workspaces.\n\nWe can test our server with `curl`:\n\n```bash\n$ curl http://localhost:8000/api\nHello world\n```\n\n## Client\n\nThe client is a basic [CRA](https://create-react-app.dev/) application that we will modify to get a message to display from our server. \n\n> :warning: First of all, we will disable Yarn's Plug'n'Play (PNP) resolution:\n>\n> ```bash\n> yarn set config nodeLinker node\n> yarn install\n> ```\n>\n> Although there are sources on the internet saying that it should, I could not make Workspaces + PNP + CRA work properly. I decided to not spend more time on that and focus on actual development.\n\nWe will replace our current client with code generated with CRA:\n\n```bash\nrm -r client\nyarn create react-app client --template typescript\n```\n\nOur old client had some important configuration discussed in the last article. In `package.json`, the name was changed and `type` was removed. Put them back: \n\n```yaml\n{\n  \"name\": \"@tamiyo/client\", # <-- Change back\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\", # <-- Put back\n  [...]\n```\n\nIn `tsconfig.json`, we extracted most of the properties to `tsconfig.common.json`. So we can revert it, keeping only the few additional properties:\n\n```yaml\n{\n  \"extends\": \"../tsconfig.common.json\",\n  \"compilerOptions\": {\n    \"rootDir\": \"src\",\n    \"outDir\": \"build\",\n    # Additional properties:\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"esnext\"\n    ],\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\"\n  }\n}\n```\n\nWith that, you should be able to run the template and run it in your browser (CRA will open itself) by running the `start` script with Yarn:\n\n```bash\nyarn workspace @tamiyo/client start\n```\n\n## Integrating\n\nThe last step for today is modifying our client to make a request to our server and display the response on screen. This request should be made by the `App` component:\n\n```typescript\nfunction App() {\n  const [text, setText] = useState(\"Loading...\")\n  useEffect(() => {\n    fetch('/api')\n      .then(res => res.text())\n      .then(setText)\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      // [...]\n      <p>\n        {text}\n      </p>\n      // [...]\n    </div>\n  );\n}\n```\n\nThis should be easy if you already know React hooks. Here is a quick explanation anyway:\n\n1. We use [`useState`](https://beta.reactjs.org/apis/react/useState) to define a state variable `text` with initial value `Loading...`. `setText` should be used to update its value.\n2. We use [`useEffect`](https://beta.reactjs.org/apis/react/useEffect) with an empty array in the second argument to run an effect only once when the component is mounted.\n3. This effect makes the request using `fetch`, parses the response as text using and store it in the `text` state variable, triggering a component re-render since the state changed.\n4. The actual component renders `text` on screen, which will now be `Hello world`.\n\nHowever, if you start the server and open the client, you will see this:\n\n![Client without proxying displays an HTML instead of the server message](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si4uspxp99l3xwmdxooq.png)\n\nThis happens because the client is actually making the request to the CRA development server that is serving the client pages, and not our server! In production these two servers would be the same, but we are not there yet.\n\nCRA provides a solution for this in development: [proxying](https://create-react-app.dev/docs/proxying-api-requests-in-development/). We can easily enable this in `client/package.json`:\n\n```yaml\n{\n  \"name\": \"@tamiyo/client\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"proxy\": \"http://localhost:8000\", # <-- Proxy to here\n  # [...]\n```\n\nWith this, the CRA development server will proxy unknown requests (i.e. that are not requesting a client page) to our server that is running on port 8000. Restarting the client and trying again, you should finally see this:\n\n![Client with proxying displays the server message](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvjz4hjd3zhghsv7fzfq.png)\n\n## Quality of life\n\nToday, we had to run some quite verbose commands to start our client and server. To make our lives easier, we can put them in Yarn scripts in the parent `package.json`:\n\n```yaml\n{\n  \"name\": \"tamiyo\",\n  \"version\": \"1.0.0\",\n  # [...]\n  \"scripts\": {\n    \"build\": \"yarn tsc --build --verbose\",\n    \"clean\": \"yarn tsc --build --clean\",\n    \"start:server\": \"yarn workspace @tamiyo/server start\",\n    \"start:client\": \"yarn workspace @tamiyo/client start\"\n  },\n  # [...]\n```\n\nWe also need to define a `start` script in `server/package.json`:\n\n```yaml\n{\n  \"name\": \"@tamiyo/server\",\n  # [...]\n  \"scripts\": {\n    \"start\": \"yarn node build/index.js\"\n  },\n  # [...]\n```\n\nWe can now run `yarn build` to transpile Typescript, `yarn start:server` to start the server and `yarn start:client` to start the client, much shorter commands! CRA even has hot reload in development mode, so changing client code while it is running will automatically update in the browser. I will investigate how to do the same for the server.\n\n## Next step\n\nWe have a basic client-server application running, but we are using plain HTTP. In the next step, I will get started on GraphQL. It is a new world to me, so I am not sure an entire article will be needed. If it turns out simpler than I expect, I can also explore MTG JSON data sets.\n\n","user":{"name":"Hossomi","username":"hossomi","twitter_username":"mhossomi","github_username":null,"user_id":789258,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--hwWLOTcp--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/789258/43fee4d8-85ee-49c7-a462-440c7259a279.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--mF8mX27A--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/789258/43fee4d8-85ee-49c7-a462-440c7259a279.jpg"}}